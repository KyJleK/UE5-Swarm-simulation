#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6
// #define __SHADER_TARGET_MINOR 6
// #define ALLOW_STATIC_LIGHTING 1
// #define AMPLIFICATIONSHADER 0
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPILER_DXC 1
// #define COMPUTESHADER 1
// #define DO_CHECK 1
// #define DO_GUARD_SLOW 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define FORWARD_SHADING 0
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0
// #define GBUFFER_HAS_VELOCITY 1
// #define GBUFFER_REFACTOR 1
// #define GEOMETRYSHADER 0
// #define GPU_SIMULATION 1
// #define GPU_SIMULATION_SHADER 1
// #define HAS_INVERTED_Z_BUFFER 1
// #define INSTANCED_STEREO 0
// #define IRIS_NORMAL 0
// #define MATERIAL_ENERGYCONSERVATION 0
// #define MATERIAL_ROUGHDIFFUSE 0
// #define MESHSHADER 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 0
// #define NIAGARA_COMPRESSED_ATTRIBUTES_ENABLED 0
// #define NIAGARA_DISPATCH_TYPE 0
// #define NIAGARA_MAX_GPU_SPAWN_INFOS 8
// #define PIXELSHADER 0
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1
// #define PLATFORM_SUPPORTS_BINDLESS 1
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 1
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_SRV_UB 1
// #define PLATFORM_SUPPORTS_UB_STRUCT 1
// #define POST_PROCESS_ALPHA 0
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_OIT 0
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1
// #define PROJECT_SUPPORTS_LUMEN 1
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define SimulationStageIndex 0
// #define SM6_PROFILE 1
// #define STRATA_ADVANCED_DEBUG_ENABLED 0
// #define STRATA_ENABLED 0
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0
// #define THREADGROUP_SIZE 64
// #define THREADGROUP_SIZE_X 64
// #define THREADGROUP_SIZE_Y 1
// #define THREADGROUP_SIZE_Z 1
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f
// #define USE_DBUFFER 1
// #define USE_WAVE_INTRINSICS 0
// #define VELOCITY_ENCODE_DEPTH 1
// #define VERTEXSHADER 0
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0
#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 36 "/Engine/Public/Platform.ush"
#line 1 "Platform/D3D/D3DCommon.ush"
#line 15 "/Engine/Public/Platform/D3D/D3DCommon.ush"
precise float MakePrecise(float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(float4 v) { precise float4 pv = v; return pv; }





SamplerState D3DStaticPointWrappedSampler : register(s0, space1000);
SamplerState D3DStaticPointClampedSampler : register(s1, space1000);
SamplerState D3DStaticBilinearWrappedSampler : register(s2, space1000);
SamplerState D3DStaticBilinearClampedSampler : register(s3, space1000);
SamplerState D3DStaticTrilinearWrappedSampler : register(s4, space1000);
SamplerState D3DStaticTrilinearClampedSampler : register(s5, space1000);
#line 41 "/Engine/Public/Platform/D3D/D3DCommon.ush"
RWStructuredBuffer<uint> UEDiagnosticBuffer : register(u0, space999);

void UEReportAssertWithPayload(uint AssertID, uint4 Payload)
{
	if (WaveIsFirstLane())
	{

		uint OldValue = 0;
		InterlockedAdd(UEDiagnosticBuffer[0], 1, OldValue);
		if (OldValue == 0)
		{
			UEDiagnosticBuffer[1] = AssertID;
			UEDiagnosticBuffer[2] = Payload.x;
			UEDiagnosticBuffer[3] = Payload.y;
			UEDiagnosticBuffer[4] = Payload.z;
			UEDiagnosticBuffer[5] = Payload.w;
		}


		UEDiagnosticBuffer[0xFFFFFFFF] = 0;
	}
}
#line 106 "/Engine/Public/Platform/D3D/D3DCommon.ush"
		uint64_t  PackUlongType(uint2 Value)
		{
			return (( uint64_t )Value.y << 32) | Value.x;
		}

		uint2 UnpackUlongType( uint64_t  Value)
		{
			return uint2(uint(Value), uint(Value >> 32));
		}



		void ImageInterlockedMaxUInt64(RWTexture2D< uint64_t > Dest, uint2 Coord,  uint64_t  Value)
		{
			InterlockedMax(Dest[Coord], Value);
		}





	#define  GetResourceFromHeap(Type, Index) ResourceDescriptorHeap[Index]
	#define  GetSamplerFromHeap(Type, Index) SamplerDescriptorHeap[Index]
#line 37 "/Engine/Public/Platform.ush"
#line 39 "/Engine/Public/Platform.ush"
#line 1 "/Engine/Public/BindlessResources.ush"
#line 40 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 498 "/Engine/Public/Platform.ush"
void ShaderYield()
{

}
#line 736 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}
#line 901 "/Engine/Public/Platform.ush"
bool select_internal(bool c, bool a, bool b) { return bool (c ? a.x : b.x); } bool2 select_internal(bool c, bool a, bool2 b) { return bool2 (c ? a : b.x, c ? a : b.y); } bool2 select_internal(bool c, bool2 a, bool b) { return bool2 (c ? a.x : b , c ? a.y : b ); } bool2 select_internal(bool c, bool2 a, bool2 b) { return bool2 (c ? a.x : b.x, c ? a.y : b.y); } bool2 select_internal(bool2 c, bool a, bool b) { return bool2 (c.x ? a : b , c.y ? a : b ); } bool2 select_internal(bool2 c, bool a, bool2 b) { return bool2 (c.x ? a : b.x, c.y ? a : b.y); } bool2 select_internal(bool2 c, bool2 a, bool b) { return bool2 (c.x ? a.x : b , c.y ? a.y : b ); } bool2 select_internal(bool2 c, bool2 a, bool2 b) { return bool2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool c, bool a, bool3 b) { return bool3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } bool3 select_internal(bool c, bool3 a, bool b) { return bool3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } bool3 select_internal(bool c, bool3 a, bool3 b) { return bool3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } bool3 select_internal(bool3 c, bool a, bool b) { return bool3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } bool3 select_internal(bool3 c, bool a, bool3 b) { return bool3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } bool3 select_internal(bool3 c, bool3 a, bool b) { return bool3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } bool3 select_internal(bool3 c, bool3 a, bool3 b) { return bool3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool c, bool a, bool4 b) { return bool4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } bool4 select_internal(bool c, bool4 a, bool b) { return bool4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } bool4 select_internal(bool c, bool4 a, bool4 b) { return bool4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } bool4 select_internal(bool4 c, bool a, bool b) { return bool4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } bool4 select_internal(bool4 c, bool a, bool4 b) { return bool4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } bool4 select_internal(bool4 c, bool4 a, bool b) { return bool4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } bool4 select_internal(bool4 c, bool4 a, bool4 b) { return bool4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
uint select_internal(bool c, uint a, uint b) { return uint (c ? a.x : b.x); } uint2 select_internal(bool c, uint a, uint2 b) { return uint2 (c ? a : b.x, c ? a : b.y); } uint2 select_internal(bool c, uint2 a, uint b) { return uint2 (c ? a.x : b , c ? a.y : b ); } uint2 select_internal(bool c, uint2 a, uint2 b) { return uint2 (c ? a.x : b.x, c ? a.y : b.y); } uint2 select_internal(bool2 c, uint a, uint b) { return uint2 (c.x ? a : b , c.y ? a : b ); } uint2 select_internal(bool2 c, uint a, uint2 b) { return uint2 (c.x ? a : b.x, c.y ? a : b.y); } uint2 select_internal(bool2 c, uint2 a, uint b) { return uint2 (c.x ? a.x : b , c.y ? a.y : b ); } uint2 select_internal(bool2 c, uint2 a, uint2 b) { return uint2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } uint3 select_internal(bool c, uint a, uint3 b) { return uint3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } uint3 select_internal(bool c, uint3 a, uint b) { return uint3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } uint3 select_internal(bool c, uint3 a, uint3 b) { return uint3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } uint3 select_internal(bool3 c, uint a, uint b) { return uint3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } uint3 select_internal(bool3 c, uint a, uint3 b) { return uint3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } uint3 select_internal(bool3 c, uint3 a, uint b) { return uint3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } uint3 select_internal(bool3 c, uint3 a, uint3 b) { return uint3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } uint4 select_internal(bool c, uint a, uint4 b) { return uint4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } uint4 select_internal(bool c, uint4 a, uint b) { return uint4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } uint4 select_internal(bool c, uint4 a, uint4 b) { return uint4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } uint4 select_internal(bool4 c, uint a, uint b) { return uint4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } uint4 select_internal(bool4 c, uint a, uint4 b) { return uint4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } uint4 select_internal(bool4 c, uint4 a, uint b) { return uint4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } uint4 select_internal(bool4 c, uint4 a, uint4 b) { return uint4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool c, int a, int b) { return int (c ? a.x : b.x); } int2 select_internal(bool c, int a, int2 b) { return int2 (c ? a : b.x, c ? a : b.y); } int2 select_internal(bool c, int2 a, int b) { return int2 (c ? a.x : b , c ? a.y : b ); } int2 select_internal(bool c, int2 a, int2 b) { return int2 (c ? a.x : b.x, c ? a.y : b.y); } int2 select_internal(bool2 c, int a, int b) { return int2 (c.x ? a : b , c.y ? a : b ); } int2 select_internal(bool2 c, int a, int2 b) { return int2 (c.x ? a : b.x, c.y ? a : b.y); } int2 select_internal(bool2 c, int2 a, int b) { return int2 (c.x ? a.x : b , c.y ? a.y : b ); } int2 select_internal(bool2 c, int2 a, int2 b) { return int2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool c, int a, int3 b) { return int3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } int3 select_internal(bool c, int3 a, int b) { return int3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } int3 select_internal(bool c, int3 a, int3 b) { return int3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } int3 select_internal(bool3 c, int a, int b) { return int3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } int3 select_internal(bool3 c, int a, int3 b) { return int3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } int3 select_internal(bool3 c, int3 a, int b) { return int3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } int3 select_internal(bool3 c, int3 a, int3 b) { return int3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool c, int a, int4 b) { return int4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } int4 select_internal(bool c, int4 a, int b) { return int4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } int4 select_internal(bool c, int4 a, int4 b) { return int4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } int4 select_internal(bool4 c, int a, int b) { return int4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } int4 select_internal(bool4 c, int a, int4 b) { return int4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } int4 select_internal(bool4 c, int4 a, int b) { return int4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } int4 select_internal(bool4 c, int4 a, int4 b) { return int4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool c, float a, float b) { return float (c ? a.x : b.x); } float2 select_internal(bool c, float a, float2 b) { return float2 (c ? a : b.x, c ? a : b.y); } float2 select_internal(bool c, float2 a, float b) { return float2 (c ? a.x : b , c ? a.y : b ); } float2 select_internal(bool c, float2 a, float2 b) { return float2 (c ? a.x : b.x, c ? a.y : b.y); } float2 select_internal(bool2 c, float a, float b) { return float2 (c.x ? a : b , c.y ? a : b ); } float2 select_internal(bool2 c, float a, float2 b) { return float2 (c.x ? a : b.x, c.y ? a : b.y); } float2 select_internal(bool2 c, float2 a, float b) { return float2 (c.x ? a.x : b , c.y ? a.y : b ); } float2 select_internal(bool2 c, float2 a, float2 b) { return float2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool c, float a, float3 b) { return float3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } float3 select_internal(bool c, float3 a, float b) { return float3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } float3 select_internal(bool c, float3 a, float3 b) { return float3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } float3 select_internal(bool3 c, float a, float b) { return float3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } float3 select_internal(bool3 c, float a, float3 b) { return float3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } float3 select_internal(bool3 c, float3 a, float b) { return float3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } float3 select_internal(bool3 c, float3 a, float3 b) { return float3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool c, float a, float4 b) { return float4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } float4 select_internal(bool c, float4 a, float b) { return float4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } float4 select_internal(bool c, float4 a, float4 b) { return float4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } float4 select_internal(bool4 c, float a, float b) { return float4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } float4 select_internal(bool4 c, float a, float4 b) { return float4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } float4 select_internal(bool4 c, float4 a, float b) { return float4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } float4 select_internal(bool4 c, float4 a, float4 b) { return float4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
#line 913 "/Engine/Public/Platform.ush"
bool and_internal(bool a, bool b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool or_internal(bool a, bool b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }
#line 949 "/Engine/Public/Platform.ush"
float CondMask(bool Cond, float Src0, float Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int CondMask(bool Cond, int Src0, int Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint CondMask(bool Cond, uint Src0, uint Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{


	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}




uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}
#line 1054 "/Engine/Public/Platform.ush"
uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}
#line 1086 "/Engine/Public/Platform.ush"
uint MaskedBitCount( uint2 Bits )
{
	return MaskedBitCount( Bits, WaveGetLaneIndex() );
}



uint2 WaveBallot( bool Expr )
{
	return WaveActiveBallot( Expr ).xy;
}



uint WaveGetActiveLaneIndexLast()
{
	uint2 ActiveMask = WaveActiveBallot( true ).xy;
	return firstbithigh( ActiveMask.y ? ActiveMask.y : ActiveMask.x ) + ( ActiveMask.y ? 32 : 0 );
}
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "NiagaraShaderVersion.ush"
#line 10 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Common.ush"
#line 31 "/Engine/Private/Common.ush"
struct FloatDeriv
{
	float Value;
	float Ddx;
	float Ddy;
};

struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FloatDeriv3
{
	float3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FloatDeriv4
{
	float4 Value;
	float4 Ddx;
	float4 Ddy;
};

FloatDeriv ConstructFloatDeriv(float InValue, float InDdx, float InDdy)
{
	FloatDeriv Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv2 ConstructFloatDeriv2(float2 InValue, float2 InDdx, float2 InDdy)
{
	FloatDeriv2 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv3 ConstructFloatDeriv3(float3 InValue, float3 InDdx, float3 InDdy)
{
	FloatDeriv3 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv4 ConstructFloatDeriv4(float4 InValue, float4 InDdx, float4 InDdy)
{
	FloatDeriv4 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}
#line 109 "/Engine/Private/Common.ush"
const static  float  PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max11BitsFloat = 65024.0f;
const static float Max10BitsFloat = 64512.0f;
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);
#line 166 "/Engine/Private/Common.ush"
#line 1 "GeneratedUniformBufferTypes.ush"
#line 8 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "Nanite/NanitePackedNaniteView.ush"
#line 5 "/Engine/Private/Nanite/NanitePackedNaniteView.ush"
struct FPackedNaniteView
{
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ViewToTranslatedWorld;

	float4x4 TranslatedWorldToView;
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 ViewToClip;
	float4x4 ClipToRelativeWorld;

	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToRelativeWorld;

	int4 ViewRect;
	float4 ViewSizeAndInvSize;
	float4 ClipSpaceScaleOffset;
	float4 PreViewTranslation;
	float4 PrevPreViewTranslation;
	float4 WorldCameraOrigin;
	float4 ViewForwardAndNearPlane;

	float3 ViewTilePosition;
	float RangeBasedCullingDistance;

	float3 MatrixTilePosition;
	float Padding1;

	float2 LODScales;
	float MinBoundsRadiusSq;
	uint StreamingPriorityCategory_AndFlags;

	int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;

	int4 HZBTestViewRect;
};
#line 9 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 11 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsVisibilityCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsVisibilityCommonStruct.ush"
struct FPackedHairSample
{
	float Depth;
	uint PrimitiveID_MacroGroupID;
	uint Tangent_Coverage8bit;
	uint BaseColor_Roughness;
	uint Specular_LightChannels_Backlit;
};

struct FPackedHairVis
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
};

struct FPackedHairVisPPLL
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
	uint NextNodeIndex;
};
#line 12 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsVoxelPageCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsVoxelPageCommonStruct.ush"
struct FPackedVirtualVoxelNodeDesc
{
	float3 TranslatedWorldMinAABB;
	uint PackedPageIndexResolution;
	float3 TranslatedWorldMaxAABB;
	uint PageIndexOffset_VoxelWorldSize;
};

struct FVoxelizationViewInfo
{
	float4x4 TranslatedWorldToClip;
	float3 ViewForward;
	float Pad0;
	uint2 RasterResolution;
	float2 Pad1;
};
#line 13 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsDeepShadowCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsDeepShadowCommonStruct.ush"
struct FDeepShadowViewInfo
{
	float4x4 TranslatedWorldToClipScaledBiased;
	float4x4 TranslatedWorldToClip;
	float4 AtlasScaleBias;
	float3 ViewForward;
	float MinRadiusAtDepth1;
};
#line 14 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 167 "/Engine/Private/Common.ush"
#line 169 "/Engine/Private/Common.ush"
#line 1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"


cbuffer  UniformBufferConstants_View
{
	float4x4 View_TranslatedWorldToClip;
	float4x4 View_TranslatedWorldToSubpixelClip;
	float4x4 View_RelativeWorldToClip;
	float4x4 View_ClipToRelativeWorld;
	float4x4 View_TranslatedWorldToView;
	float4x4 View_ViewToTranslatedWorld;
	float4x4 View_TranslatedWorldToCameraView;
	float4x4 View_CameraViewToTranslatedWorld;
	float4x4 View_ViewToClip;
	float4x4 View_ViewToClipNoAA;
	float4x4 View_ClipToView;
	float4x4 View_ClipToTranslatedWorld;
	float4x4 View_SVPositionToTranslatedWorld;
	float4x4 View_ScreenToRelativeWorld;
	float4x4 View_ScreenToTranslatedWorld;
	float4x4 View_MobileMultiviewShadowTransform;
	float3 View_ViewTilePosition;
	float PrePadding_View_1036;
	float3 View_MatrixTilePosition;
	float PrePadding_View_1052;
	float3 View_ViewForward;
	float PrePadding_View_1068;
	float3 View_ViewUp;
	float PrePadding_View_1084;
	float3 View_ViewRight;
	float PrePadding_View_1100;
	float3 View_HMDViewNoRollUp;
	float PrePadding_View_1116;
	float3 View_HMDViewNoRollRight;
	float PrePadding_View_1132;
	float4 View_InvDeviceZToWorldZTransform;
	float4 View_ScreenPositionScaleBias;
	float3 View_RelativeWorldCameraOrigin;
	float PrePadding_View_1180;
	float3 View_TranslatedWorldCameraOrigin;
	float PrePadding_View_1196;
	float3 View_RelativeWorldViewOrigin;
	float PrePadding_View_1212;
	float3 View_RelativePreViewTranslation;
	float PrePadding_View_1228;
	float4x4 View_PrevViewToClip;
	float4x4 View_PrevClipToView;
	float4x4 View_PrevTranslatedWorldToClip;
	float4x4 View_PrevTranslatedWorldToView;
	float4x4 View_PrevViewToTranslatedWorld;
	float4x4 View_PrevTranslatedWorldToCameraView;
	float4x4 View_PrevCameraViewToTranslatedWorld;
	float3 View_PrevTranslatedWorldCameraOrigin;
	float PrePadding_View_1692;
	float3 View_PrevRelativeWorldCameraOrigin;
	float PrePadding_View_1708;
	float3 View_PrevRelativeWorldViewOrigin;
	float PrePadding_View_1724;
	float3 View_RelativePrevPreViewTranslation;
	float PrePadding_View_1740;
	float4x4 View_PrevClipToRelativeWorld;
	float4x4 View_PrevScreenToTranslatedWorld;
	float4x4 View_ClipToPrevClip;
	float4x4 View_ClipToPrevClipWithAA;
	float4 View_TemporalAAJitter;
	float4 View_GlobalClippingPlane;
	float2 View_FieldOfViewWideAngles;
	float2 View_PrevFieldOfViewWideAngles;
	float4 View_ViewRectMin;
	float4 View_ViewSizeAndInvSize;
	uint4 View_ViewRectMinAndSize;
	float4 View_LightProbeSizeRatioAndInvSizeRatio;
	float4 View_BufferSizeAndInvSize;
	float4 View_BufferBilinearUVMinMax;
	float4 View_ScreenToViewSpace;
	float2 View_BufferToSceneTextureScale;
	float2 View_ResolutionFractionAndInv;
	int View_NumSceneColorMSAASamples;
	float View_SeparateWaterMainDirLightLuminance;
	float View_PreExposure;
	float View_OneOverPreExposure;
	float4 View_DiffuseOverrideParameter;
	float4 View_SpecularOverrideParameter;
	float4 View_NormalOverrideParameter;
	float2 View_RoughnessOverrideParameter;
	float View_PrevFrameGameTime;
	float View_PrevFrameRealTime;
	float View_OutOfBoundsMask;
	float PrePadding_View_2260;
	float PrePadding_View_2264;
	float PrePadding_View_2268;
	float3 View_WorldCameraMovementSinceLastFrame;
	float View_CullingSign;
	float View_NearPlane;
	float View_GameTime;
	float View_RealTime;
	float View_DeltaTime;
	float View_MaterialTextureMipBias;
	float View_MaterialTextureDerivativeMultiply;
	uint View_Random;
	uint View_FrameNumber;
	uint View_StateFrameIndexMod8;
	uint View_StateFrameIndex;
	uint View_DebugViewModeMask;
	float View_CameraCut;
	float View_UnlitViewmodeMask;
	float PrePadding_View_2340;
	float PrePadding_View_2344;
	float PrePadding_View_2348;
	float4 View_DirectionalLightColor;
	float3 View_DirectionalLightDirection;
	float PrePadding_View_2380;
	float4 View_TranslucencyLightingVolumeMin[2];
	float4 View_TranslucencyLightingVolumeInvSize[2];
	float4 View_TemporalAAParams;
	float4 View_CircleDOFParams;
	float View_DepthOfFieldSensorWidth;
	float View_DepthOfFieldFocalDistance;
	float View_DepthOfFieldScale;
	float View_DepthOfFieldFocalLength;
	float View_DepthOfFieldFocalRegion;
	float View_DepthOfFieldNearTransitionRegion;
	float View_DepthOfFieldFarTransitionRegion;
	float View_MotionBlurNormalizedToPixel;
	float View_GeneralPurposeTweak;
	float View_GeneralPurposeTweak2;
	float View_DemosaicVposOffset;
	float View_DecalDepthBias;
	float3 View_IndirectLightingColorScale;
	float PrePadding_View_2540;
	float3 View_PrecomputedIndirectLightingColorScale;
	float PrePadding_View_2556;
	float3 View_PrecomputedIndirectSpecularColorScale;
	float PrePadding_View_2572;
	float4 View_AtmosphereLightDirection[2];
	float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 View_AtmosphereLightIlluminanceOuterSpace[2];
	float4 View_AtmosphereLightDiscLuminance[2];
	float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 View_SkyViewLutSizeAndInvSize;
	float3 View_SkyCameraTranslatedWorldOrigin;
	float PrePadding_View_2764;
	float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 View_SkyViewLutReferential;
	float4 View_SkyAtmosphereSkyLuminanceFactor;
	float View_SkyAtmospherePresentInScene;
	float View_SkyAtmosphereHeightFogContribution;
	float View_SkyAtmosphereBottomRadiusKm;
	float View_SkyAtmosphereTopRadiusKm;
	float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float PrePadding_View_2920;
	float PrePadding_View_2924;
	float3 View_NormalCurvatureToRoughnessScaleBias;
	float View_RenderingReflectionCaptureMask;
	float View_RealTimeReflectionCapture;
	float View_RealTimeReflectionCapturePreExposure;
	float PrePadding_View_2952;
	float PrePadding_View_2956;
	float4 View_AmbientCubemapTint;
	float View_AmbientCubemapIntensity;
	float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float View_SkyLightAffectReflectionFlag;
	float View_SkyLightAffectGlobalIlluminationFlag;
	float4 View_SkyLightColor;
	float4 View_MobileSkyIrradianceEnvironmentMap[8];
	float View_MobilePreviewMode;
	float View_HMDEyePaddingOffset;
	float View_ReflectionCubemapMaxMip;
	float View_ShowDecalsMask;
	uint View_DistanceFieldAOSpecularOcclusionMode;
	float View_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_View_3160;
	float PrePadding_View_3164;
	float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int View_StereoPassIndex;
	float4 View_GlobalVolumeCenterAndExtent[6];
	float4 View_GlobalVolumeWorldToUVAddAndMul[6];
	float4 View_GlobalDistanceFieldMipWorldToUVScale[6];
	float4 View_GlobalDistanceFieldMipWorldToUVBias[6];
	float View_GlobalDistanceFieldMipFactor;
	float View_GlobalDistanceFieldMipTransition;
	int View_GlobalDistanceFieldClipmapSizeInPages;
	int PrePadding_View_3580;
	float3 View_GlobalDistanceFieldInvPageAtlasSize;
	float PrePadding_View_3596;
	float3 View_GlobalDistanceFieldInvCoverageAtlasSize;
	float View_GlobalVolumeDimension;
	float View_GlobalVolumeTexelSize;
	float View_MaxGlobalDFAOConeDistance;
	uint View_NumGlobalSDFClipmaps;
	float View_CoveredExpandSurfaceScale;
	float View_NotCoveredExpandSurfaceScale;
	float View_NotCoveredMinStepScale;
	float View_DitheredTransparencyStepThreshold;
	float View_DitheredTransparencyTraceThreshold;
	int2 View_CursorPosition;
	float View_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_View_3660;
	float3 View_VolumetricFogInvGridSize;
	float PrePadding_View_3676;
	float3 View_VolumetricFogGridZParams;
	float PrePadding_View_3692;
	float2 View_VolumetricFogSVPosToVolumeUV;
	float View_VolumetricFogMaxDistance;
	float PrePadding_View_3708;
	float3 View_VolumetricLightmapWorldToUVScale;
	float PrePadding_View_3724;
	float3 View_VolumetricLightmapWorldToUVAdd;
	float PrePadding_View_3740;
	float3 View_VolumetricLightmapIndirectionTextureSize;
	float View_VolumetricLightmapBrickSize;
	float3 View_VolumetricLightmapBrickTexelSize;
	float View_IndirectLightingCacheShowFlag;
	float View_EyeToPixelSpreadAngle;
	float PrePadding_View_3780;
	float PrePadding_View_3784;
	float PrePadding_View_3788;
	float4 View_XRPassthroughCameraUVs[2];
	float View_GlobalVirtualTextureMipBias;
	uint View_VirtualTextureFeedbackShift;
	uint View_VirtualTextureFeedbackMask;
	uint View_VirtualTextureFeedbackStride;
	uint View_VirtualTextureFeedbackJitterOffset;
	uint View_VirtualTextureFeedbackSampleOffset;
	uint PrePadding_View_3848;
	uint PrePadding_View_3852;
	float4 View_RuntimeVirtualTextureMipLevel;
	float2 View_RuntimeVirtualTexturePackHeight;
	float PrePadding_View_3880;
	float PrePadding_View_3884;
	float4 View_RuntimeVirtualTextureDebugParams;
	float View_OverrideLandscapeLOD;
	int View_FarShadowStaticMeshLODBias;
	float View_MinRoughness;
	float PrePadding_View_3916;
	float4 View_HairRenderInfo;
	uint View_EnableSkyLight;
	uint View_HairRenderInfoBits;
	uint View_HairComponents;
	float View_bSubsurfacePostprocessEnabled;
	float4 View_SSProfilesTextureSizeAndInvSize;
	float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 View_PhysicsFieldClipmapCenter;
	float View_PhysicsFieldClipmapDistance;
	int View_PhysicsFieldClipmapResolution;
	int View_PhysicsFieldClipmapExponent;
	int View_PhysicsFieldClipmapCount;
	int View_PhysicsFieldTargetCount;
	int4 View_PhysicsFieldTargets[32];
	uint View_InstanceSceneDataSOAStride;
	uint View_GPUSceneViewId;
	float View_ViewResolutionFraction;
	float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	uint PrePadding_View_4548;
	uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	uint PrePadding_View_4556;
	uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	uint PrePadding_View_4564;
	uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	uint PrePadding_View_4572;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	uint PrePadding_View_4580;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	uint PrePadding_View_4588;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	uint PrePadding_View_4596;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	uint PrePadding_View_4604;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	uint PrePadding_View_4612;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	uint PrePadding_View_4620;
	uint BindlessResource_View_SkyBentNormalBrickTexture ;
	uint PrePadding_View_4628;
	uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	uint PrePadding_View_4636;
	uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	uint PrePadding_View_4644;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	uint PrePadding_View_4652;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	uint PrePadding_View_4660;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	uint PrePadding_View_4668;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	uint PrePadding_View_4676;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	uint PrePadding_View_4684;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	uint PrePadding_View_4692;
	uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	uint PrePadding_View_4700;
	uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	uint PrePadding_View_4708;
	uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	uint PrePadding_View_4716;
	uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	uint PrePadding_View_4724;
	uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	uint PrePadding_View_4732;
	uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	uint PrePadding_View_4740;
	uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	uint PrePadding_View_4748;
	uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	uint PrePadding_View_4756;
	uint BindlessResource_View_AtmosphereIrradianceTexture ;
	uint PrePadding_View_4764;
	uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	uint PrePadding_View_4772;
	uint BindlessResource_View_AtmosphereInscatterTexture ;
	uint PrePadding_View_4780;
	uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	uint PrePadding_View_4788;
	uint BindlessResource_View_PerlinNoiseGradientTexture ;
	uint PrePadding_View_4796;
	uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	uint PrePadding_View_4804;
	uint BindlessResource_View_PerlinNoise3DTexture ;
	uint PrePadding_View_4812;
	uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	uint PrePadding_View_4820;
	uint BindlessResource_View_SobolSamplingTexture ;
	uint PrePadding_View_4828;
	uint BindlessSampler_View_SharedPointWrappedSampler ;
	uint PrePadding_View_4836;
	uint BindlessSampler_View_SharedPointClampedSampler ;
	uint PrePadding_View_4844;
	uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	uint PrePadding_View_4852;
	uint BindlessSampler_View_SharedBilinearClampedSampler ;
	uint PrePadding_View_4860;
	uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	uint PrePadding_View_4868;
	uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	uint PrePadding_View_4876;
	uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	uint PrePadding_View_4884;
	uint BindlessResource_View_PreIntegratedBRDF ;
	uint PrePadding_View_4892;
	uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	uint PrePadding_View_4900;
	uint BindlessResource_View_PrimitiveSceneData ;
	uint PrePadding_View_4908;
	uint BindlessResource_View_InstanceSceneData ;
	uint PrePadding_View_4916;
	uint BindlessResource_View_InstancePayloadData ;
	uint PrePadding_View_4924;
	uint BindlessResource_View_LightmapSceneData ;
	uint PrePadding_View_4932;
	uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	uint PrePadding_View_4940;
	uint BindlessResource_View_TransmittanceLutTexture ;
	uint PrePadding_View_4948;
	uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	uint PrePadding_View_4956;
	uint BindlessResource_View_SkyViewLutTexture ;
	uint PrePadding_View_4964;
	uint BindlessSampler_View_SkyViewLutTextureSampler ;
	uint PrePadding_View_4972;
	uint BindlessResource_View_DistantSkyLightLutTexture ;
	uint PrePadding_View_4980;
	uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	uint PrePadding_View_4988;
	uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	uint PrePadding_View_4996;
	uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	uint PrePadding_View_5004;
	uint BindlessResource_View_HairScatteringLUTTexture ;
	uint PrePadding_View_5012;
	uint BindlessSampler_View_HairScatteringLUTSampler ;
	uint PrePadding_View_5020;
	uint BindlessResource_View_LTCMatTexture ;
	uint PrePadding_View_5028;
	uint BindlessSampler_View_LTCMatSampler ;
	uint PrePadding_View_5036;
	uint BindlessResource_View_LTCAmpTexture ;
	uint PrePadding_View_5044;
	uint BindlessSampler_View_LTCAmpSampler ;
	uint PrePadding_View_5052;
	uint View_bShadingEnergyConservation;
	uint View_bShadingEnergyPreservation;
	uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	uint PrePadding_View_5068;
	uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	uint PrePadding_View_5076;
	uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	uint PrePadding_View_5084;
	uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	uint PrePadding_View_5092;
	uint BindlessSampler_View_ShadingEnergySampler ;
	uint PrePadding_View_5100;
	uint BindlessResource_View_SSProfilesTexture ;
	uint PrePadding_View_5108;
	uint BindlessSampler_View_SSProfilesSampler ;
	uint PrePadding_View_5116;
	uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	uint PrePadding_View_5124;
	uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	uint PrePadding_View_5132;
	uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	uint PrePadding_View_5140;
	uint BindlessResource_View_WaterIndirection ;
	uint PrePadding_View_5148;
	uint BindlessResource_View_WaterData ;
	uint PrePadding_View_5156;
	uint PrePadding_View_5160;
	uint PrePadding_View_5164;
	float4 View_RectLightAtlasSizeAndInvSize;
	float View_RectLightAtlasMaxMipLevel;
	float PrePadding_View_5188;
	uint BindlessResource_View_RectLightAtlasTexture ;
	uint PrePadding_View_5196;
	uint BindlessSampler_View_RectLightAtlasSampler ;
	uint PrePadding_View_5204;
	uint BindlessSampler_View_LandscapeWeightmapSampler ;
	uint PrePadding_View_5212;
	uint BindlessResource_View_LandscapeIndirection ;
	uint PrePadding_View_5220;
	uint BindlessResource_View_LandscapePerComponentData ;
	uint PrePadding_View_5228;
	uint BindlessResource_View_VTFeedbackBuffer ;
	uint PrePadding_View_5236;
	uint BindlessResource_View_EditorVisualizeLevelInstanceIds ;
	uint PrePadding_View_5244;
	uint BindlessResource_View_EditorSelectedHitProxyIds ;
	uint PrePadding_View_5252;
	uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	uint PrePadding_View_5260;
	float3 View_TLASRelativePreViewTranslation;
	float PrePadding_View_5276;
	float3 View_TLASViewTilePosition;
}
SamplerState View_MaterialTextureBilinearWrapedSampler ;
SamplerState View_MaterialTextureBilinearClampedSampler ;
Texture3D<uint4> View_VolumetricLightmapIndirectionTexture ;
Texture3D View_VolumetricLightmapBrickAmbientVector ;
Texture3D View_VolumetricLightmapBrickSHCoefficients0 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients1 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients2 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients3 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients4 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients5 ;
Texture3D View_SkyBentNormalBrickTexture ;
Texture3D View_DirectionalLightShadowingBrickTexture ;
SamplerState View_VolumetricLightmapBrickAmbientVectorSampler ;
SamplerState View_VolumetricLightmapTextureSampler0 ;
SamplerState View_VolumetricLightmapTextureSampler1 ;
SamplerState View_VolumetricLightmapTextureSampler2 ;
SamplerState View_VolumetricLightmapTextureSampler3 ;
SamplerState View_VolumetricLightmapTextureSampler4 ;
SamplerState View_VolumetricLightmapTextureSampler5 ;
SamplerState View_SkyBentNormalTextureSampler ;
SamplerState View_DirectionalLightShadowingTextureSampler ;
Texture3D View_GlobalDistanceFieldPageAtlasTexture ;
Texture3D View_GlobalDistanceFieldCoverageAtlasTexture ;
Texture3D<uint> View_GlobalDistanceFieldPageTableTexture ;
Texture3D View_GlobalDistanceFieldMipTexture ;
Texture2D View_AtmosphereTransmittanceTexture ;
SamplerState View_AtmosphereTransmittanceTextureSampler ;
Texture2D View_AtmosphereIrradianceTexture ;
SamplerState View_AtmosphereIrradianceTextureSampler ;
Texture3D View_AtmosphereInscatterTexture ;
SamplerState View_AtmosphereInscatterTextureSampler ;
Texture2D View_PerlinNoiseGradientTexture ;
SamplerState View_PerlinNoiseGradientTextureSampler ;
Texture3D View_PerlinNoise3DTexture ;
SamplerState View_PerlinNoise3DTextureSampler ;
Texture2D<uint> View_SobolSamplingTexture ;
SamplerState View_SharedPointWrappedSampler ;
SamplerState View_SharedPointClampedSampler ;
SamplerState View_SharedBilinearWrappedSampler ;
SamplerState View_SharedBilinearClampedSampler ;
SamplerState View_SharedBilinearAnisoClampedSampler ;
SamplerState View_SharedTrilinearWrappedSampler ;
SamplerState View_SharedTrilinearClampedSampler ;
Texture2D View_PreIntegratedBRDF ;
SamplerState View_PreIntegratedBRDFSampler ;
StructuredBuffer<float4> View_PrimitiveSceneData ;
StructuredBuffer<float4> View_InstanceSceneData ;
StructuredBuffer<float4> View_InstancePayloadData ;
StructuredBuffer<float4> View_LightmapSceneData ;
StructuredBuffer<float4> View_SkyIrradianceEnvironmentMap ;
Texture2D View_TransmittanceLutTexture ;
SamplerState View_TransmittanceLutTextureSampler ;
Texture2D View_SkyViewLutTexture ;
SamplerState View_SkyViewLutTextureSampler ;
Texture2D View_DistantSkyLightLutTexture ;
SamplerState View_DistantSkyLightLutTextureSampler ;
Texture3D View_CameraAerialPerspectiveVolume ;
SamplerState View_CameraAerialPerspectiveVolumeSampler ;
Texture3D View_HairScatteringLUTTexture ;
SamplerState View_HairScatteringLUTSampler ;
Texture2D View_LTCMatTexture ;
SamplerState View_LTCMatSampler ;
Texture2D View_LTCAmpTexture ;
SamplerState View_LTCAmpSampler ;
Texture2D<float2> View_ShadingEnergyGGXSpecTexture ;
Texture3D<float2> View_ShadingEnergyGGXGlassTexture ;
Texture2D<float2> View_ShadingEnergyClothSpecTexture ;
Texture2D<float> View_ShadingEnergyDiffuseTexture ;
SamplerState View_ShadingEnergySampler ;
Texture2D View_SSProfilesTexture ;
SamplerState View_SSProfilesSampler ;
SamplerState View_SSProfilesTransmissionSampler ;
Texture2DArray View_SSProfilesPreIntegratedTexture ;
SamplerState View_SSProfilesPreIntegratedSampler ;
Buffer<float4> View_WaterIndirection ;
Buffer<float4> View_WaterData ;
Texture2D<float4> View_RectLightAtlasTexture ;
SamplerState View_RectLightAtlasSampler ;
SamplerState View_LandscapeWeightmapSampler ;
Buffer<uint> View_LandscapeIndirection ;
Buffer<float> View_LandscapePerComponentData ;
RWBuffer<uint> View_VTFeedbackBuffer ;
Buffer<uint> View_EditorVisualizeLevelInstanceIds ;
Buffer<uint> View_EditorSelectedHitProxyIds ;
Buffer<float> View_PhysicsFieldClipmapBuffer ;
static const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float SeparateWaterMainDirLightLuminance;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	uint bShadingEnergyConservation;
	uint bShadingEnergyPreservation;
	float4 RectLightAtlasSizeAndInvSize;
	float RectLightAtlasMaxMipLevel;
	float3 TLASRelativePreViewTranslation;
	float3 TLASViewTilePosition;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	StructuredBuffer<float4> InstanceSceneData;
	StructuredBuffer<float4> InstancePayloadData;
	StructuredBuffer<float4> LightmapSceneData;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D LTCMatTexture;
	SamplerState LTCMatSampler;
	Texture2D LTCAmpTexture;
	SamplerState LTCAmpSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Texture2D<float4> RectLightAtlasTexture;
	SamplerState RectLightAtlasSampler;
	SamplerState LandscapeWeightmapSampler;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWBuffer<uint> VTFeedbackBuffer;
	Buffer<uint> EditorVisualizeLevelInstanceIds;
	Buffer<uint> EditorSelectedHitProxyIds;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_TranslatedWorldToSubpixelClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_ViewRectMinAndSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_BufferToSceneTextureScale,View_ResolutionFractionAndInv,View_NumSceneColorMSAASamples,View_SeparateWaterMainDirLightLuminance,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle_PPTrans,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeCenterAndExtent,View_GlobalVolumeWorldToUVAddAndMul,View_GlobalDistanceFieldMipWorldToUVScale,View_GlobalDistanceFieldMipWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_CoveredExpandSurfaceScale,View_NotCoveredExpandSurfaceScale,View_NotCoveredMinStepScale,View_DitheredTransparencyStepThreshold,View_DitheredTransparencyTraceThreshold,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_InstanceSceneDataSOAStride,View_GPUSceneViewId,View_ViewResolutionFraction,View_SubSurfaceColorAsTransmittanceAtDistanceInMeters,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_RectLightAtlasSizeAndInvSize,View_RectLightAtlasMaxMipLevel,View_TLASRelativePreViewTranslation,View_TLASViewTilePosition,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,  View_PrimitiveSceneData,   View_InstanceSceneData,   View_InstancePayloadData,   View_LightmapSceneData,   View_SkyIrradianceEnvironmentMap,  View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_LTCMatTexture,View_LTCMatSampler,View_LTCAmpTexture,View_LTCAmpSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,  View_WaterIndirection,   View_WaterData,  View_RectLightAtlasTexture,View_RectLightAtlasSampler,View_LandscapeWeightmapSampler,  View_LandscapeIndirection,   View_LandscapePerComponentData,  View_VTFeedbackBuffer,  View_EditorVisualizeLevelInstanceIds,   View_EditorSelectedHitProxyIds,   View_PhysicsFieldClipmapBuffer,  };
#line 2 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Strata.ush"


cbuffer  UniformBufferConstants_Strata
{
	uint Strata_MaxBytesPerPixel;
	uint Strata_bRoughDiffuse;
	uint Strata_PeelLayersAboveDepth;
	int Strata_SliceStoringDebugStrataTree;
	int Strata_FirstSliceStoringStrataSSSData;
	uint Strata_TileSize;
	uint Strata_TileSizeLog2;
	uint PrePadding_Strata_28;
	int2 Strata_TileCount;
	int2 Strata_TileOffset;
	int2 Strata_OverflowTileCount;
	int2 Strata_OverflowTileOffset;
	uint BindlessResource_Strata_MaterialTextureArray ;
	uint PrePadding_Strata_68;
	uint BindlessResource_Strata_TopLayerTexture ;
	uint PrePadding_Strata_76;
	uint BindlessResource_Strata_OpaqueRoughRefractionTexture ;
	uint PrePadding_Strata_84;
	uint BindlessResource_Strata_BSDFOffsetTexture ;
	uint PrePadding_Strata_92;
	uint BindlessResource_Strata_BSDFTileTexture ;
	uint PrePadding_Strata_100;
	uint BindlessResource_Strata_BSDFTileCountBuffer ;
}
Texture2DArray<uint> Strata_MaterialTextureArray ;
Texture2D<uint> Strata_TopLayerTexture ;
Texture2D<float3> Strata_OpaqueRoughRefractionTexture ;
Texture2D<uint> Strata_BSDFOffsetTexture ;
Texture2D<uint> Strata_BSDFTileTexture ;
Buffer<uint> Strata_BSDFTileCountBuffer ;
static const struct
{
	uint MaxBytesPerPixel;
	uint bRoughDiffuse;
	uint PeelLayersAboveDepth;
	int SliceStoringDebugStrataTree;
	int FirstSliceStoringStrataSSSData;
	uint TileSize;
	uint TileSizeLog2;
	int2 TileCount;
	int2 TileOffset;
	int2 OverflowTileCount;
	int2 OverflowTileOffset;
	Texture2DArray<uint> MaterialTextureArray;
	Texture2D<uint> TopLayerTexture;
	Texture2D<float3> OpaqueRoughRefractionTexture;
	Texture2D<uint> BSDFOffsetTexture;
	Texture2D<uint> BSDFTileTexture;
	Buffer<uint> BSDFTileCountBuffer;
} Strata = {Strata_MaxBytesPerPixel,Strata_bRoughDiffuse,Strata_PeelLayersAboveDepth,Strata_SliceStoringDebugStrataTree,Strata_FirstSliceStoringStrataSSSData,Strata_TileSize,Strata_TileSizeLog2,Strata_TileCount,Strata_TileOffset,Strata_OverflowTileCount,Strata_OverflowTileOffset,Strata_MaterialTextureArray,Strata_TopLayerTexture,Strata_OpaqueRoughRefractionTexture,Strata_BSDFOffsetTexture,Strata_BSDFTileTexture,Strata_BSDFTileCountBuffer,};
#line 3 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"


cbuffer  UniformBufferConstants_DrawRectangleParameters
{
	float4 DrawRectangleParameters_PosScaleBias;
	float4 DrawRectangleParameters_UVScaleBias;
	float4 DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
static const struct
{
	float4 PosScaleBias;
	float4 UVScaleBias;
	float4 InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,};
#line 4 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"


cbuffer  UniformBufferConstants_InstancedView
{
	float4x4 InstancedView_TranslatedWorldToClip;
	float4x4 InstancedView_TranslatedWorldToSubpixelClip;
	float4x4 InstancedView_RelativeWorldToClip;
	float4x4 InstancedView_ClipToRelativeWorld;
	float4x4 InstancedView_TranslatedWorldToView;
	float4x4 InstancedView_ViewToTranslatedWorld;
	float4x4 InstancedView_TranslatedWorldToCameraView;
	float4x4 InstancedView_CameraViewToTranslatedWorld;
	float4x4 InstancedView_ViewToClip;
	float4x4 InstancedView_ViewToClipNoAA;
	float4x4 InstancedView_ClipToView;
	float4x4 InstancedView_ClipToTranslatedWorld;
	float4x4 InstancedView_SVPositionToTranslatedWorld;
	float4x4 InstancedView_ScreenToRelativeWorld;
	float4x4 InstancedView_ScreenToTranslatedWorld;
	float4x4 InstancedView_MobileMultiviewShadowTransform;
	float3 InstancedView_ViewTilePosition;
	float PrePadding_InstancedView_1036;
	float3 InstancedView_MatrixTilePosition;
	float PrePadding_InstancedView_1052;
	float3 InstancedView_ViewForward;
	float PrePadding_InstancedView_1068;
	float3 InstancedView_ViewUp;
	float PrePadding_InstancedView_1084;
	float3 InstancedView_ViewRight;
	float PrePadding_InstancedView_1100;
	float3 InstancedView_HMDViewNoRollUp;
	float PrePadding_InstancedView_1116;
	float3 InstancedView_HMDViewNoRollRight;
	float PrePadding_InstancedView_1132;
	float4 InstancedView_InvDeviceZToWorldZTransform;
	float4 InstancedView_ScreenPositionScaleBias;
	float3 InstancedView_RelativeWorldCameraOrigin;
	float PrePadding_InstancedView_1180;
	float3 InstancedView_TranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1196;
	float3 InstancedView_RelativeWorldViewOrigin;
	float PrePadding_InstancedView_1212;
	float3 InstancedView_RelativePreViewTranslation;
	float PrePadding_InstancedView_1228;
	float4x4 InstancedView_PrevViewToClip;
	float4x4 InstancedView_PrevClipToView;
	float4x4 InstancedView_PrevTranslatedWorldToClip;
	float4x4 InstancedView_PrevTranslatedWorldToView;
	float4x4 InstancedView_PrevViewToTranslatedWorld;
	float4x4 InstancedView_PrevTranslatedWorldToCameraView;
	float4x4 InstancedView_PrevCameraViewToTranslatedWorld;
	float3 InstancedView_PrevTranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1692;
	float3 InstancedView_PrevRelativeWorldCameraOrigin;
	float PrePadding_InstancedView_1708;
	float3 InstancedView_PrevRelativeWorldViewOrigin;
	float PrePadding_InstancedView_1724;
	float3 InstancedView_RelativePrevPreViewTranslation;
	float PrePadding_InstancedView_1740;
	float4x4 InstancedView_PrevClipToRelativeWorld;
	float4x4 InstancedView_PrevScreenToTranslatedWorld;
	float4x4 InstancedView_ClipToPrevClip;
	float4x4 InstancedView_ClipToPrevClipWithAA;
	float4 InstancedView_TemporalAAJitter;
	float4 InstancedView_GlobalClippingPlane;
	float2 InstancedView_FieldOfViewWideAngles;
	float2 InstancedView_PrevFieldOfViewWideAngles;
	float4 InstancedView_ViewRectMin;
	float4 InstancedView_ViewSizeAndInvSize;
	uint4 InstancedView_ViewRectMinAndSize;
	float4 InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	float4 InstancedView_BufferSizeAndInvSize;
	float4 InstancedView_BufferBilinearUVMinMax;
	float4 InstancedView_ScreenToViewSpace;
	float2 InstancedView_BufferToSceneTextureScale;
	float2 InstancedView_ResolutionFractionAndInv;
	int InstancedView_NumSceneColorMSAASamples;
	float InstancedView_SeparateWaterMainDirLightLuminance;
	float InstancedView_PreExposure;
	float InstancedView_OneOverPreExposure;
	float4 InstancedView_DiffuseOverrideParameter;
	float4 InstancedView_SpecularOverrideParameter;
	float4 InstancedView_NormalOverrideParameter;
	float2 InstancedView_RoughnessOverrideParameter;
	float InstancedView_PrevFrameGameTime;
	float InstancedView_PrevFrameRealTime;
	float InstancedView_OutOfBoundsMask;
	float PrePadding_InstancedView_2260;
	float PrePadding_InstancedView_2264;
	float PrePadding_InstancedView_2268;
	float3 InstancedView_WorldCameraMovementSinceLastFrame;
	float InstancedView_CullingSign;
	float InstancedView_NearPlane;
	float InstancedView_GameTime;
	float InstancedView_RealTime;
	float InstancedView_DeltaTime;
	float InstancedView_MaterialTextureMipBias;
	float InstancedView_MaterialTextureDerivativeMultiply;
	uint InstancedView_Random;
	uint InstancedView_FrameNumber;
	uint InstancedView_StateFrameIndexMod8;
	uint InstancedView_StateFrameIndex;
	uint InstancedView_DebugViewModeMask;
	float InstancedView_CameraCut;
	float InstancedView_UnlitViewmodeMask;
	float PrePadding_InstancedView_2340;
	float PrePadding_InstancedView_2344;
	float PrePadding_InstancedView_2348;
	float4 InstancedView_DirectionalLightColor;
	float3 InstancedView_DirectionalLightDirection;
	float PrePadding_InstancedView_2380;
	float4 InstancedView_TranslucencyLightingVolumeMin[2];
	float4 InstancedView_TranslucencyLightingVolumeInvSize[2];
	float4 InstancedView_TemporalAAParams;
	float4 InstancedView_CircleDOFParams;
	float InstancedView_DepthOfFieldSensorWidth;
	float InstancedView_DepthOfFieldFocalDistance;
	float InstancedView_DepthOfFieldScale;
	float InstancedView_DepthOfFieldFocalLength;
	float InstancedView_DepthOfFieldFocalRegion;
	float InstancedView_DepthOfFieldNearTransitionRegion;
	float InstancedView_DepthOfFieldFarTransitionRegion;
	float InstancedView_MotionBlurNormalizedToPixel;
	float InstancedView_GeneralPurposeTweak;
	float InstancedView_GeneralPurposeTweak2;
	float InstancedView_DemosaicVposOffset;
	float InstancedView_DecalDepthBias;
	float3 InstancedView_IndirectLightingColorScale;
	float PrePadding_InstancedView_2540;
	float3 InstancedView_PrecomputedIndirectLightingColorScale;
	float PrePadding_InstancedView_2556;
	float3 InstancedView_PrecomputedIndirectSpecularColorScale;
	float PrePadding_InstancedView_2572;
	float4 InstancedView_AtmosphereLightDirection[2];
	float4 InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 InstancedView_AtmosphereLightIlluminanceOuterSpace[2];
	float4 InstancedView_AtmosphereLightDiscLuminance[2];
	float4 InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 InstancedView_SkyViewLutSizeAndInvSize;
	float3 InstancedView_SkyCameraTranslatedWorldOrigin;
	float PrePadding_InstancedView_2764;
	float4 InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 InstancedView_SkyViewLutReferential;
	float4 InstancedView_SkyAtmosphereSkyLuminanceFactor;
	float InstancedView_SkyAtmospherePresentInScene;
	float InstancedView_SkyAtmosphereHeightFogContribution;
	float InstancedView_SkyAtmosphereBottomRadiusKm;
	float InstancedView_SkyAtmosphereTopRadiusKm;
	float4 InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float PrePadding_InstancedView_2920;
	float PrePadding_InstancedView_2924;
	float3 InstancedView_NormalCurvatureToRoughnessScaleBias;
	float InstancedView_RenderingReflectionCaptureMask;
	float InstancedView_RealTimeReflectionCapture;
	float InstancedView_RealTimeReflectionCapturePreExposure;
	float PrePadding_InstancedView_2952;
	float PrePadding_InstancedView_2956;
	float4 InstancedView_AmbientCubemapTint;
	float InstancedView_AmbientCubemapIntensity;
	float InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float InstancedView_SkyLightAffectReflectionFlag;
	float InstancedView_SkyLightAffectGlobalIlluminationFlag;
	float4 InstancedView_SkyLightColor;
	float4 InstancedView_MobileSkyIrradianceEnvironmentMap[8];
	float InstancedView_MobilePreviewMode;
	float InstancedView_HMDEyePaddingOffset;
	float InstancedView_ReflectionCubemapMaxMip;
	float InstancedView_ShowDecalsMask;
	uint InstancedView_DistanceFieldAOSpecularOcclusionMode;
	float InstancedView_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_InstancedView_3160;
	float PrePadding_InstancedView_3164;
	float3 InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int InstancedView_StereoPassIndex;
	float4 InstancedView_GlobalVolumeCenterAndExtent[6];
	float4 InstancedView_GlobalVolumeWorldToUVAddAndMul[6];
	float4 InstancedView_GlobalDistanceFieldMipWorldToUVScale[6];
	float4 InstancedView_GlobalDistanceFieldMipWorldToUVBias[6];
	float InstancedView_GlobalDistanceFieldMipFactor;
	float InstancedView_GlobalDistanceFieldMipTransition;
	int InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	int PrePadding_InstancedView_3580;
	float3 InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	float PrePadding_InstancedView_3596;
	float3 InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	float InstancedView_GlobalVolumeDimension;
	float InstancedView_GlobalVolumeTexelSize;
	float InstancedView_MaxGlobalDFAOConeDistance;
	uint InstancedView_NumGlobalSDFClipmaps;
	float InstancedView_CoveredExpandSurfaceScale;
	float InstancedView_NotCoveredExpandSurfaceScale;
	float InstancedView_NotCoveredMinStepScale;
	float InstancedView_DitheredTransparencyStepThreshold;
	float InstancedView_DitheredTransparencyTraceThreshold;
	int2 InstancedView_CursorPosition;
	float InstancedView_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_InstancedView_3660;
	float3 InstancedView_VolumetricFogInvGridSize;
	float PrePadding_InstancedView_3676;
	float3 InstancedView_VolumetricFogGridZParams;
	float PrePadding_InstancedView_3692;
	float2 InstancedView_VolumetricFogSVPosToVolumeUV;
	float InstancedView_VolumetricFogMaxDistance;
	float PrePadding_InstancedView_3708;
	float3 InstancedView_VolumetricLightmapWorldToUVScale;
	float PrePadding_InstancedView_3724;
	float3 InstancedView_VolumetricLightmapWorldToUVAdd;
	float PrePadding_InstancedView_3740;
	float3 InstancedView_VolumetricLightmapIndirectionTextureSize;
	float InstancedView_VolumetricLightmapBrickSize;
	float3 InstancedView_VolumetricLightmapBrickTexelSize;
	float InstancedView_IndirectLightingCacheShowFlag;
	float InstancedView_EyeToPixelSpreadAngle;
	float PrePadding_InstancedView_3780;
	float PrePadding_InstancedView_3784;
	float PrePadding_InstancedView_3788;
	float4 InstancedView_XRPassthroughCameraUVs[2];
	float InstancedView_GlobalVirtualTextureMipBias;
	uint InstancedView_VirtualTextureFeedbackShift;
	uint InstancedView_VirtualTextureFeedbackMask;
	uint InstancedView_VirtualTextureFeedbackStride;
	uint InstancedView_VirtualTextureFeedbackJitterOffset;
	uint InstancedView_VirtualTextureFeedbackSampleOffset;
	uint PrePadding_InstancedView_3848;
	uint PrePadding_InstancedView_3852;
	float4 InstancedView_RuntimeVirtualTextureMipLevel;
	float2 InstancedView_RuntimeVirtualTexturePackHeight;
	float PrePadding_InstancedView_3880;
	float PrePadding_InstancedView_3884;
	float4 InstancedView_RuntimeVirtualTextureDebugParams;
	float InstancedView_OverrideLandscapeLOD;
	int InstancedView_FarShadowStaticMeshLODBias;
	float InstancedView_MinRoughness;
	float PrePadding_InstancedView_3916;
	float4 InstancedView_HairRenderInfo;
	uint InstancedView_EnableSkyLight;
	uint InstancedView_HairRenderInfoBits;
	uint InstancedView_HairComponents;
	float InstancedView_bSubsurfacePostprocessEnabled;
	float4 InstancedView_SSProfilesTextureSizeAndInvSize;
	float4 InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 InstancedView_PhysicsFieldClipmapCenter;
	float InstancedView_PhysicsFieldClipmapDistance;
	int InstancedView_PhysicsFieldClipmapResolution;
	int InstancedView_PhysicsFieldClipmapExponent;
	int InstancedView_PhysicsFieldClipmapCount;
	int InstancedView_PhysicsFieldTargetCount;
	int4 InstancedView_PhysicsFieldTargets[32];
	uint InstancedView_InstanceSceneDataSOAStride;
	uint InstancedView_GPUSceneViewId;
	float InstancedView_ViewResolutionFraction;
	float InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
}
static const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float SeparateWaterMainDirLightLuminance;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_TranslatedWorldToSubpixelClip,InstancedView_RelativeWorldToClip,InstancedView_ClipToRelativeWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToRelativeWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewTilePosition,InstancedView_MatrixTilePosition,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_RelativeWorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_RelativeWorldViewOrigin,InstancedView_RelativePreViewTranslation,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevTranslatedWorldCameraOrigin,InstancedView_PrevRelativeWorldCameraOrigin,InstancedView_PrevRelativeWorldViewOrigin,InstancedView_RelativePrevPreViewTranslation,InstancedView_PrevClipToRelativeWorld,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_ClipToPrevClipWithAA,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_ViewRectMinAndSize,InstancedView_LightProbeSizeRatioAndInvSizeRatio,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_BufferToSceneTextureScale,InstancedView_ResolutionFractionAndInv,InstancedView_NumSceneColorMSAASamples,InstancedView_SeparateWaterMainDirLightLuminance,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_DebugViewModeMask,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_GeneralPurposeTweak,InstancedView_GeneralPurposeTweak2,InstancedView_DemosaicVposOffset,InstancedView_DecalDepthBias,InstancedView_IndirectLightingColorScale,InstancedView_PrecomputedIndirectLightingColorScale,InstancedView_PrecomputedIndirectSpecularColorScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance,InstancedView_AtmosphereLightIlluminanceOuterSpace,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyCameraTranslatedWorldOrigin,InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight,InstancedView_SkyViewLutReferential,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmospherePresentInScene,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadiusKm,InstancedView_SkyAtmosphereTopRadiusKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_RealTimeReflectionCapture,InstancedView_RealTimeReflectionCapturePreExposure,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_MobileSkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeCenterAndExtent,InstancedView_GlobalVolumeWorldToUVAddAndMul,InstancedView_GlobalDistanceFieldMipWorldToUVScale,InstancedView_GlobalDistanceFieldMipWorldToUVBias,InstancedView_GlobalDistanceFieldMipFactor,InstancedView_GlobalDistanceFieldMipTransition,InstancedView_GlobalDistanceFieldClipmapSizeInPages,InstancedView_GlobalDistanceFieldInvPageAtlasSize,InstancedView_GlobalDistanceFieldInvCoverageAtlasSize,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDFAOConeDistance,InstancedView_NumGlobalSDFClipmaps,InstancedView_CoveredExpandSurfaceScale,InstancedView_NotCoveredExpandSurfaceScale,InstancedView_NotCoveredMinStepScale,InstancedView_DitheredTransparencyStepThreshold,InstancedView_DitheredTransparencyTraceThreshold,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_XRPassthroughCameraUVs,InstancedView_GlobalVirtualTextureMipBias,InstancedView_VirtualTextureFeedbackShift,InstancedView_VirtualTextureFeedbackMask,InstancedView_VirtualTextureFeedbackStride,InstancedView_VirtualTextureFeedbackJitterOffset,InstancedView_VirtualTextureFeedbackSampleOffset,InstancedView_RuntimeVirtualTextureMipLevel,InstancedView_RuntimeVirtualTexturePackHeight,InstancedView_RuntimeVirtualTextureDebugParams,InstancedView_OverrideLandscapeLOD,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_HairRenderInfo,InstancedView_EnableSkyLight,InstancedView_HairRenderInfoBits,InstancedView_HairComponents,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_SSProfilesTextureSizeAndInvSize,InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize,InstancedView_PhysicsFieldClipmapCenter,InstancedView_PhysicsFieldClipmapDistance,InstancedView_PhysicsFieldClipmapResolution,InstancedView_PhysicsFieldClipmapExponent,InstancedView_PhysicsFieldClipmapCount,InstancedView_PhysicsFieldTargetCount,InstancedView_PhysicsFieldTargets,InstancedView_InstanceSceneDataSOAStride,InstancedView_GPUSceneViewId,InstancedView_ViewResolutionFraction,InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters,};
#line 5 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"


cbuffer  UniformBufferConstants_MobileSceneTextures
{
	uint BindlessResource_MobileSceneTextures_SceneColorTexture ;
	uint PrePadding_MobileSceneTextures_4;
	uint BindlessSampler_MobileSceneTextures_SceneColorTextureSampler ;
	uint PrePadding_MobileSceneTextures_12;
	uint BindlessResource_MobileSceneTextures_SceneDepthTexture ;
	uint PrePadding_MobileSceneTextures_20;
	uint BindlessSampler_MobileSceneTextures_SceneDepthTextureSampler ;
	uint PrePadding_MobileSceneTextures_28;
	uint BindlessResource_MobileSceneTextures_CustomDepthTexture ;
	uint PrePadding_MobileSceneTextures_36;
	uint BindlessSampler_MobileSceneTextures_CustomDepthTextureSampler ;
	uint PrePadding_MobileSceneTextures_44;
	uint BindlessResource_MobileSceneTextures_CustomStencilTexture ;
	uint PrePadding_MobileSceneTextures_52;
	uint BindlessResource_MobileSceneTextures_SceneVelocityTexture ;
	uint PrePadding_MobileSceneTextures_60;
	uint BindlessSampler_MobileSceneTextures_SceneVelocityTextureSampler ;
	uint PrePadding_MobileSceneTextures_68;
	uint BindlessResource_MobileSceneTextures_GBufferATexture ;
	uint PrePadding_MobileSceneTextures_76;
	uint BindlessResource_MobileSceneTextures_GBufferBTexture ;
	uint PrePadding_MobileSceneTextures_84;
	uint BindlessResource_MobileSceneTextures_GBufferCTexture ;
	uint PrePadding_MobileSceneTextures_92;
	uint BindlessResource_MobileSceneTextures_GBufferDTexture ;
	uint PrePadding_MobileSceneTextures_100;
	uint BindlessResource_MobileSceneTextures_SceneDepthAuxTexture ;
	uint PrePadding_MobileSceneTextures_108;
	uint BindlessSampler_MobileSceneTextures_GBufferATextureSampler ;
	uint PrePadding_MobileSceneTextures_116;
	uint BindlessSampler_MobileSceneTextures_GBufferBTextureSampler ;
	uint PrePadding_MobileSceneTextures_124;
	uint BindlessSampler_MobileSceneTextures_GBufferCTextureSampler ;
	uint PrePadding_MobileSceneTextures_132;
	uint BindlessSampler_MobileSceneTextures_GBufferDTextureSampler ;
	uint PrePadding_MobileSceneTextures_140;
	uint BindlessSampler_MobileSceneTextures_SceneDepthAuxTextureSampler ;
}
Texture2D MobileSceneTextures_SceneColorTexture ;
SamplerState MobileSceneTextures_SceneColorTextureSampler ;
Texture2D MobileSceneTextures_SceneDepthTexture ;
SamplerState MobileSceneTextures_SceneDepthTextureSampler ;
Texture2D MobileSceneTextures_CustomDepthTexture ;
SamplerState MobileSceneTextures_CustomDepthTextureSampler ;
Texture2D<uint2> MobileSceneTextures_CustomStencilTexture ;
Texture2D MobileSceneTextures_SceneVelocityTexture ;
SamplerState MobileSceneTextures_SceneVelocityTextureSampler ;
Texture2D MobileSceneTextures_GBufferATexture ;
Texture2D MobileSceneTextures_GBufferBTexture ;
Texture2D MobileSceneTextures_GBufferCTexture ;
Texture2D MobileSceneTextures_GBufferDTexture ;
Texture2D MobileSceneTextures_SceneDepthAuxTexture ;
SamplerState MobileSceneTextures_GBufferATextureSampler ;
SamplerState MobileSceneTextures_GBufferBTextureSampler ;
SamplerState MobileSceneTextures_GBufferCTextureSampler ;
SamplerState MobileSceneTextures_GBufferDTextureSampler ;
SamplerState MobileSceneTextures_SceneDepthAuxTextureSampler ;
static const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D SceneVelocityTexture;
	SamplerState SceneVelocityTextureSampler;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D SceneDepthAuxTexture;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState SceneDepthAuxTextureSampler;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_CustomStencilTexture,MobileSceneTextures_SceneVelocityTexture,MobileSceneTextures_SceneVelocityTextureSampler,MobileSceneTextures_GBufferATexture,MobileSceneTextures_GBufferBTexture,MobileSceneTextures_GBufferCTexture,MobileSceneTextures_GBufferDTexture,MobileSceneTextures_SceneDepthAuxTexture,MobileSceneTextures_GBufferATextureSampler,MobileSceneTextures_GBufferBTextureSampler,MobileSceneTextures_GBufferCTextureSampler,MobileSceneTextures_GBufferDTextureSampler,MobileSceneTextures_SceneDepthAuxTextureSampler,};
#line 6 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"


cbuffer  UniformBufferConstants_SceneTexturesStruct
{
	uint BindlessResource_SceneTexturesStruct_SceneColorTexture ;
	uint PrePadding_SceneTexturesStruct_4;
	uint BindlessResource_SceneTexturesStruct_SceneDepthTexture ;
	uint PrePadding_SceneTexturesStruct_12;
	uint BindlessResource_SceneTexturesStruct_GBufferATexture ;
	uint PrePadding_SceneTexturesStruct_20;
	uint BindlessResource_SceneTexturesStruct_GBufferBTexture ;
	uint PrePadding_SceneTexturesStruct_28;
	uint BindlessResource_SceneTexturesStruct_GBufferCTexture ;
	uint PrePadding_SceneTexturesStruct_36;
	uint BindlessResource_SceneTexturesStruct_GBufferDTexture ;
	uint PrePadding_SceneTexturesStruct_44;
	uint BindlessResource_SceneTexturesStruct_GBufferETexture ;
	uint PrePadding_SceneTexturesStruct_52;
	uint BindlessResource_SceneTexturesStruct_GBufferFTexture ;
	uint PrePadding_SceneTexturesStruct_60;
	uint BindlessResource_SceneTexturesStruct_GBufferVelocityTexture ;
	uint PrePadding_SceneTexturesStruct_68;
	uint BindlessResource_SceneTexturesStruct_ScreenSpaceAOTexture ;
	uint PrePadding_SceneTexturesStruct_76;
	uint BindlessResource_SceneTexturesStruct_CustomDepthTexture ;
	uint PrePadding_SceneTexturesStruct_84;
	uint BindlessResource_SceneTexturesStruct_CustomStencilTexture ;
	uint PrePadding_SceneTexturesStruct_92;
	uint BindlessSampler_SceneTexturesStruct_PointClampSampler ;
}
Texture2D SceneTexturesStruct_SceneColorTexture ;
Texture2D SceneTexturesStruct_SceneDepthTexture ;
Texture2D SceneTexturesStruct_GBufferATexture ;
Texture2D SceneTexturesStruct_GBufferBTexture ;
Texture2D SceneTexturesStruct_GBufferCTexture ;
Texture2D SceneTexturesStruct_GBufferDTexture ;
Texture2D SceneTexturesStruct_GBufferETexture ;
Texture2D SceneTexturesStruct_GBufferFTexture ;
Texture2D SceneTexturesStruct_GBufferVelocityTexture ;
Texture2D SceneTexturesStruct_ScreenSpaceAOTexture ;
Texture2D SceneTexturesStruct_CustomDepthTexture ;
Texture2D<uint2> SceneTexturesStruct_CustomStencilTexture ;
SamplerState SceneTexturesStruct_PointClampSampler ;
static const struct
{
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferFTexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomStencilTexture,SceneTexturesStruct_PointClampSampler,};
#line 7 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 8 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Strata.ush"
#line 9 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"
#line 10 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 11 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"
#line 12 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"
#line 13 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 170 "/Engine/Private/Common.ush"
#line 172 "/Engine/Private/Common.ush"
#line 1 "CommonViewUniformBuffer.ush"
#line 12 "/Engine/Private/CommonViewUniformBuffer.ush"
float2 GetTanHalfFieldOfView()
{
	return float2(View.ClipToView[0][0], View.ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View.PrevClipToView[0][0], View.PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View.ViewToClip[0][0], View.ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View.PrevViewToClip[0][0], View.PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{

	return View.StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 173 "/Engine/Private/Common.ush"



float FmodFloor(float Lhs, float Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float2 FmodFloor(float2 Lhs, float2 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float3 FmodFloor(float3 Lhs, float3 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float4 FmodFloor(float4 Lhs, float4 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float VectorSum(float V) { return V; }
float VectorSum(float2 V) { return V.x + V.y; }
float VectorSum(float3 V) { return V.x + V.y + V.z; }
float VectorSum(float4 V) { return V.x + V.y + V.z + V.w; }
#line 201 "/Engine/Private/Common.ush"
#line 1 "LargeWorldCoordinates.ush"
#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

struct FLWCScalarDeriv
{
	FLWCScalar Value;
	float Ddx;
	float Ddy;
};

struct FLWCVector2Deriv
{
	FLWCVector2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FLWCVector3Deriv
{
	FLWCVector3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FLWCVector4Deriv
{
	FLWCVector4 Value;
	float4 Ddx;
	float4 Ddy;
};


struct FLWCMatrix
{
	float4x4 M;
	float3 Tile;
};


struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile;
	int Dummy;
};




float LWCGetTileOffset(FLWCScalar V) { return  ((V).Tile)  *  2097152.00f ; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  ((V).Tile)  *  2097152.00f ; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  ((V).Tile)  *  2097152.00f ; }

float4x4 Make4x3Matrix(float4x4 M)
{

	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( ((XYZ).Tile) , float4(XYZ.Offset, W));
}

FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( ((X).Tile) ,  ((Y).Tile) ), float2(X.Offset, Y.Offset)); }

FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( ((X).Tile) ,  ((Y).Tile) ,  ((Z).Tile) ), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( ((X).Tile) ,  ((YZ).Tile) ), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( ((XY).Tile) ,  ((Z).Tile) ), float3(XY.Offset, Z.Offset)); }

FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( ((X).Tile) ,  ((Y).Tile) ,  ((Z).Tile) ,  ((W).Tile) ), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( ((X).Tile) ,  ((Y).Tile) ,  ((ZW).Tile) ), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( ((X).Tile) ,  ((YZ).Tile) ,  ((W).Tile) ), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( ((XY).Tile) ,  ((Z).Tile) ,  ((W).Tile) ), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( ((XY).Tile) ,  ((ZW).Tile) ), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( ((X).Tile) ,  ((YZW).Tile) ), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( ((XYZ).Tile) ,  ((W).Tile) ), float4(XYZ.Offset, W.Offset)); }

FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	(Result).Tile = (Tile) ;
	Result.M = InMatrix;
	return Result;
}

FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	(Result).Tile = (Tile) ;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	(Result).Tile = (-Tile) ;
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	(Result).Tile = (-Tile) ;
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}



FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }






FLWCScalar LWCSwizzle(FLWCScalar V, int C0) { return V; }
FLWCScalar LWCSwizzle(FLWCVector2 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector3 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector4 V, int C0) { return LWCGetComponent(V, C0); }

FLWCVector2 LWCSwizzle(FLWCScalar V, int C0, int C1) { return MakeLWCVector(V, V); }
FLWCVector2 LWCSwizzle(FLWCVector2 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector3 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector4 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }

FLWCVector3 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2) { return MakeLWCVector(V, V, V); }
FLWCVector3 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }

FLWCVector4 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2, int C3) { return MakeLWCVector(V, V, V, V); }
FLWCVector4 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }

float LWCToFloat(FLWCScalar Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

float3x3 LWCToFloat3x3(FLWCMatrix Value)
{
	return (float3x3)Value.M;
}

float3x3 LWCToFloat3x3(FLWCInverseMatrix Value)
{
	return (float3x3)Value.M;
}


float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }


FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCInverseMatrix LWCPromoteInverse(float4x4 Value) { return MakeLWCInverseMatrix((float3)0, Value); }

FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{

	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( ((InMatrix).Tile) , Offset);
}

FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( ((InMatrix).Tile) , Offset);
}

float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( ((Position).Tile)  +  ((InMatrix).Tile) , Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( ((Position).Tile)  + float4( ((InMatrix).Tile) , 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( ((Rhs).Tile) , ResultMatrix);
}

FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- ((Lhs).Tile) , ResultMatrix);
}

float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{

	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f ));
	Result = mul(Result, Rhs.M);
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCMatrix Lhs, FLWCVector3 Rhs)
{
	float4x4 Result = Lhs.M;
	Result[3].xyz += ( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f ;
	Result[3].xyz += Rhs.Offset;
	return Result;
}

FLWCMatrix LWCMultiplyTranslation(float4x4 Lhs, FLWCVector3 Rhs)
{
	FLWCMatrix Result = MakeLWCMatrix( ((Rhs).Tile) , Lhs);
	Result.M[3].xyz += Rhs.Offset;
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCVector3 Lhs, FLWCInverseMatrix Rhs)
{
	float3 Offset = ( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f  + Lhs.Offset;
	return mul(MakeTranslationMatrix(Offset), Rhs.M);
}

FLWCInverseMatrix LWCMultiplyTranslation(FLWCVector3 Lhs, float4x4 Rhs)
{
	FLWCInverseMatrix Result = MakeLWCInverseMatrix(- ((Lhs).Tile) , Rhs);
	Result.M = mul(MakeTranslationMatrix(Lhs.Offset), Result.M);
	return Result;
}

FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( ((InMatrix).Tile) , InMatrix.M[3].xyz);
}

void LWCSetOrigin(inout FLWCMatrix InOutMatrix, FLWCVector3 Origin)
{
	(InOutMatrix).Tile = ( ((Origin).Tile) ) ;
	InOutMatrix.M[3].xyz = Origin.Offset;
}
#line 376 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCScalar  LWCNormalizeTile( FLWCScalar  V)
{
	float  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCScalar (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCScalar  LWCMakeIntTile( FLWCScalar  V)
{
	float  IntTile = floor(V.Tile);
	return  MakeLWCScalar (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float  LWCSqrtUnscaled( FLWCScalar  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCRsqrtUnscaled( FLWCScalar  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCRcpUnscaled( FLWCScalar  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCSqrtScaled( FLWCScalar  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float  LWCRsqrtScaled( FLWCScalar  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float  LWCRcpScaled( FLWCScalar  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float  LWCSqrt( FLWCScalar  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float  LWCRsqrt( FLWCScalar  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float  LWCRcp( FLWCScalar  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool LWCGreater( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool LWCGreater( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool LWCGreater( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool LWCGreaterEqual( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool LWCGreaterEqual( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool LWCGreaterEqual( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool LWCLess( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool LWCLess( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool LWCLess( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool LWCLessEqual( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool LWCLessEqual( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool LWCLessEqual( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float  LWCDdx( FLWCScalar  V) { return ( float )0; }
float  LWCDdy( FLWCScalar  V) { return ( float )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCScalar  LWCAdd( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCScalar  LWCAdd( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCScalar  LWCAdd( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCScalar  LWCSubtract( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCScalar  LWCSubtract( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCScalar  LWCSubtract( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool  LWCEquals( FLWCScalar  Lhs,  FLWCScalar  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool  LWCEquals( float  Lhs,  FLWCScalar  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool  LWCEquals( FLWCScalar  Lhs,  float  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool  LWCEqualsApprox( FLWCScalar  Lhs,  FLWCScalar  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float )Threshold;
}
bool  LWCEqualsApprox( float  Lhs,  FLWCScalar  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float )Threshold;
}
bool  LWCEqualsApprox( FLWCScalar  Lhs,  float  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float )Threshold;
}

FLWCScalar  LWCSelect( bool  S,  FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCScalar  LWCSelect( bool  S,  float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( select_internal(S,( float )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCScalar  LWCSelect( bool  S,  FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( select_internal(S, ((Lhs).Tile) ,( float )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCScalar  LWCNegate( FLWCScalar  V) { return  MakeLWCScalar (- ((V).Tile) , -V.Offset); }

float  LWCFrac( FLWCScalar  V)
{
	float  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCScalar  LWCFloor( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , floor(VN.Offset)); }
FLWCScalar  LWCCeil( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCScalar  LWCRound( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , round(VN.Offset)); }
FLWCScalar  LWCTrunc( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , trunc(VN.Offset)); }


float  LWCSign( FLWCScalar  V) { return  float (sign(LWCToFloat(V))); }
float  LWCSaturate( FLWCScalar  V) { return saturate(LWCToFloat(V)); }
float  LWCClampScalar( FLWCScalar  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCScalar  LWCMultiply( FLWCScalar  Lhs,  FLWCScalar  Rhs)
{
	return  MakeLWCScalar ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar  LWCMultiply( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCScalar  LWCMultiply( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCScalar  LWCDivide( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar  LWCDivide( FLWCScalar  Lhs,  float  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar  LWCDivide( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (( float )0, Lhs * LWCRcp(Rhs)); }


FLWCScalar  LWCLerp( FLWCScalar  Lhs,  FLWCScalar  Rhs,  float  S)
{
	return  MakeLWCScalar (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float  LWCFmod( FLWCScalar  Lhs,  float  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float  LWCFmodFloor( FLWCScalar  Lhs,  float  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float  LWCFmodFloorPI( FLWCScalar  V)
{
	return LWCFmodFloor(V, PI);

}
float  LWCFmodFloor2PI( FLWCScalar  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float  LWCSin( FLWCScalar  V) { return sin(LWCFmodFloor2PI(V)); }
float  LWCCos( FLWCScalar  V) { return cos(LWCFmodFloor2PI(V)); }
float  LWCTan( FLWCScalar  V) { return tan(LWCFmodFloorPI(V)); }
float  LWCASin( FLWCScalar  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float  LWCACos( FLWCScalar  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float  LWCATan( FLWCScalar  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float  LWCSmoothStep( FLWCScalar  Lhs,  FLWCScalar  Rhs,  FLWCScalar  S)
{
	float  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCScalar  LWCMin( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMin( float  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMin( FLWCScalar  Lhs,  float  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( float  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( FLWCScalar  Lhs,  float  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCScalar  LWCAbs( FLWCScalar  V) { return LWCSelect(LWCLess(V, ( float )0), LWCNegate(V), V); }

float  LWCStep( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float )1.0f,( float )0.0f) ; }
float  LWCStep( FLWCScalar  Lhs,  float  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float )1.0f,( float )0.0f) ; }
float  LWCStep( float  Lhs,  FLWCScalar  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float )1.0f,( float )0.0f) ; }


FLWCScalar  LWCSquareScaled( FLWCScalar  V)
{
	float  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCScalar ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 377 "/Engine/Private/LargeWorldCoordinates.ush"
#line 386 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector2  LWCNormalizeTile( FLWCVector2  V)
{
	float2  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector2 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector2  LWCMakeIntTile( FLWCVector2  V)
{
	float2  IntTile = floor(V.Tile);
	return  MakeLWCVector2 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float2  LWCSqrtUnscaled( FLWCVector2  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCRsqrtUnscaled( FLWCVector2  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCRcpUnscaled( FLWCVector2  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCSqrtScaled( FLWCVector2  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float2  LWCRsqrtScaled( FLWCVector2  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2  LWCRcpScaled( FLWCVector2  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2  LWCSqrt( FLWCVector2  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float2  LWCRsqrt( FLWCVector2  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float2  LWCRcp( FLWCVector2  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool2 LWCGreater( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool2 LWCGreater( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool2 LWCGreater( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool2 LWCGreaterEqual( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool2 LWCGreaterEqual( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool2 LWCGreaterEqual( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool2 LWCLess( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool2 LWCLess( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool2 LWCLess( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool2 LWCLessEqual( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool2 LWCLessEqual( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool2 LWCLessEqual( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float2  LWCDdx( FLWCVector2  V) { return ( float2 )0; }
float2  LWCDdy( FLWCVector2  V) { return ( float2 )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector2  LWCAdd( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector2  LWCAdd( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector2  LWCAdd( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector2  LWCSubtract( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector2  LWCSubtract( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector2  LWCSubtract( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool2  LWCEquals( FLWCVector2  Lhs,  FLWCVector2  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool2  LWCEquals( float2  Lhs,  FLWCVector2  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool2  LWCEquals( FLWCVector2  Lhs,  float2  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool2  LWCEqualsApprox( FLWCVector2  Lhs,  FLWCVector2  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float2 )Threshold;
}
bool2  LWCEqualsApprox( float2  Lhs,  FLWCVector2  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float2 )Threshold;
}
bool2  LWCEqualsApprox( FLWCVector2  Lhs,  float2  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float2 )Threshold;
}

FLWCVector2  LWCSelect( bool2  S,  FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCVector2  LWCSelect( bool2  S,  float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( select_internal(S,( float2 )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCVector2  LWCSelect( bool2  S,  FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( select_internal(S, ((Lhs).Tile) ,( float2 )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCVector2  LWCNegate( FLWCVector2  V) { return  MakeLWCVector2 (- ((V).Tile) , -V.Offset); }

float2  LWCFrac( FLWCVector2  V)
{
	float2  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector2  LWCFloor( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector2  LWCCeil( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector2  LWCRound( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector2  LWCTrunc( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , trunc(VN.Offset)); }


float2  LWCSign( FLWCVector2  V) { return  float2 (sign(LWCToFloat(V))); }
float2  LWCSaturate( FLWCVector2  V) { return saturate(LWCToFloat(V)); }
float2  LWCClampScalar( FLWCVector2  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector2  LWCMultiply( FLWCVector2  Lhs,  FLWCVector2  Rhs)
{
	return  MakeLWCVector2 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2  LWCMultiply( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector2  LWCMultiply( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector2  LWCDivide( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2  LWCDivide( FLWCVector2  Lhs,  float2  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2  LWCDivide( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (( float2 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector2  LWCLerp( FLWCVector2  Lhs,  FLWCVector2  Rhs,  float2  S)
{
	return  MakeLWCVector2 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float2  LWCFmod( FLWCVector2  Lhs,  float2  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float2  LWCFmodFloor( FLWCVector2  Lhs,  float2  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float2  LWCFmodFloorPI( FLWCVector2  V)
{
	return LWCFmodFloor(V, PI);

}
float2  LWCFmodFloor2PI( FLWCVector2  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float2  LWCSin( FLWCVector2  V) { return sin(LWCFmodFloor2PI(V)); }
float2  LWCCos( FLWCVector2  V) { return cos(LWCFmodFloor2PI(V)); }
float2  LWCTan( FLWCVector2  V) { return tan(LWCFmodFloorPI(V)); }
float2  LWCASin( FLWCVector2  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float2  LWCACos( FLWCVector2  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float2  LWCATan( FLWCVector2  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float2  LWCSmoothStep( FLWCVector2  Lhs,  FLWCVector2  Rhs,  FLWCVector2  S)
{
	float2  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector2  LWCMin( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMin( float2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMin( FLWCVector2  Lhs,  float2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( float2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( FLWCVector2  Lhs,  float2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector2  LWCAbs( FLWCVector2  V) { return LWCSelect(LWCLess(V, ( float2 )0), LWCNegate(V), V); }

float2  LWCStep( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float2 )1.0f,( float2 )0.0f) ; }
float2  LWCStep( FLWCVector2  Lhs,  float2  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float2 )1.0f,( float2 )0.0f) ; }
float2  LWCStep( float2  Lhs,  FLWCVector2  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float2 )1.0f,( float2 )0.0f) ; }


FLWCVector2  LWCSquareScaled( FLWCVector2  V)
{
	float2  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector2 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 387 "/Engine/Private/LargeWorldCoordinates.ush"
#line 396 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector3  LWCNormalizeTile( FLWCVector3  V)
{
	float3  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector3 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector3  LWCMakeIntTile( FLWCVector3  V)
{
	float3  IntTile = floor(V.Tile);
	return  MakeLWCVector3 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float3  LWCSqrtUnscaled( FLWCVector3  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCRsqrtUnscaled( FLWCVector3  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCRcpUnscaled( FLWCVector3  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCSqrtScaled( FLWCVector3  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float3  LWCRsqrtScaled( FLWCVector3  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3  LWCRcpScaled( FLWCVector3  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3  LWCSqrt( FLWCVector3  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float3  LWCRsqrt( FLWCVector3  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float3  LWCRcp( FLWCVector3  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool3 LWCGreater( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool3 LWCGreater( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool3 LWCGreater( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool3 LWCGreaterEqual( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool3 LWCGreaterEqual( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool3 LWCGreaterEqual( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool3 LWCLess( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool3 LWCLess( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool3 LWCLess( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool3 LWCLessEqual( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool3 LWCLessEqual( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool3 LWCLessEqual( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float3  LWCDdx( FLWCVector3  V) { return ( float3 )0; }
float3  LWCDdy( FLWCVector3  V) { return ( float3 )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector3  LWCAdd( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector3  LWCAdd( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector3  LWCAdd( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector3  LWCSubtract( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector3  LWCSubtract( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector3  LWCSubtract( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool3  LWCEquals( FLWCVector3  Lhs,  FLWCVector3  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool3  LWCEquals( float3  Lhs,  FLWCVector3  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool3  LWCEquals( FLWCVector3  Lhs,  float3  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool3  LWCEqualsApprox( FLWCVector3  Lhs,  FLWCVector3  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float3 )Threshold;
}
bool3  LWCEqualsApprox( float3  Lhs,  FLWCVector3  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float3 )Threshold;
}
bool3  LWCEqualsApprox( FLWCVector3  Lhs,  float3  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float3 )Threshold;
}

FLWCVector3  LWCSelect( bool3  S,  FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCVector3  LWCSelect( bool3  S,  float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( select_internal(S,( float3 )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCVector3  LWCSelect( bool3  S,  FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( select_internal(S, ((Lhs).Tile) ,( float3 )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCVector3  LWCNegate( FLWCVector3  V) { return  MakeLWCVector3 (- ((V).Tile) , -V.Offset); }

float3  LWCFrac( FLWCVector3  V)
{
	float3  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector3  LWCFloor( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector3  LWCCeil( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector3  LWCRound( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector3  LWCTrunc( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , trunc(VN.Offset)); }


float3  LWCSign( FLWCVector3  V) { return  float3 (sign(LWCToFloat(V))); }
float3  LWCSaturate( FLWCVector3  V) { return saturate(LWCToFloat(V)); }
float3  LWCClampScalar( FLWCVector3  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector3  LWCMultiply( FLWCVector3  Lhs,  FLWCVector3  Rhs)
{
	return  MakeLWCVector3 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3  LWCMultiply( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector3  LWCMultiply( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector3  LWCDivide( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3  LWCDivide( FLWCVector3  Lhs,  float3  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3  LWCDivide( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (( float3 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector3  LWCLerp( FLWCVector3  Lhs,  FLWCVector3  Rhs,  float3  S)
{
	return  MakeLWCVector3 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float3  LWCFmod( FLWCVector3  Lhs,  float3  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float3  LWCFmodFloor( FLWCVector3  Lhs,  float3  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float3  LWCFmodFloorPI( FLWCVector3  V)
{
	return LWCFmodFloor(V, PI);

}
float3  LWCFmodFloor2PI( FLWCVector3  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float3  LWCSin( FLWCVector3  V) { return sin(LWCFmodFloor2PI(V)); }
float3  LWCCos( FLWCVector3  V) { return cos(LWCFmodFloor2PI(V)); }
float3  LWCTan( FLWCVector3  V) { return tan(LWCFmodFloorPI(V)); }
float3  LWCASin( FLWCVector3  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float3  LWCACos( FLWCVector3  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float3  LWCATan( FLWCVector3  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float3  LWCSmoothStep( FLWCVector3  Lhs,  FLWCVector3  Rhs,  FLWCVector3  S)
{
	float3  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector3  LWCMin( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMin( float3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMin( FLWCVector3  Lhs,  float3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( float3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( FLWCVector3  Lhs,  float3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector3  LWCAbs( FLWCVector3  V) { return LWCSelect(LWCLess(V, ( float3 )0), LWCNegate(V), V); }

float3  LWCStep( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float3 )1.0f,( float3 )0.0f) ; }
float3  LWCStep( FLWCVector3  Lhs,  float3  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float3 )1.0f,( float3 )0.0f) ; }
float3  LWCStep( float3  Lhs,  FLWCVector3  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float3 )1.0f,( float3 )0.0f) ; }


FLWCVector3  LWCSquareScaled( FLWCVector3  V)
{
	float3  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector3 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 397 "/Engine/Private/LargeWorldCoordinates.ush"
#line 406 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector4  LWCNormalizeTile( FLWCVector4  V)
{
	float4  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector4 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector4  LWCMakeIntTile( FLWCVector4  V)
{
	float4  IntTile = floor(V.Tile);
	return  MakeLWCVector4 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float4  LWCSqrtUnscaled( FLWCVector4  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCRsqrtUnscaled( FLWCVector4  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCRcpUnscaled( FLWCVector4  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCSqrtScaled( FLWCVector4  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float4  LWCRsqrtScaled( FLWCVector4  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4  LWCRcpScaled( FLWCVector4  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4  LWCSqrt( FLWCVector4  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float4  LWCRsqrt( FLWCVector4  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float4  LWCRcp( FLWCVector4  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool4 LWCGreater( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool4 LWCGreater( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool4 LWCGreater( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool4 LWCGreaterEqual( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool4 LWCGreaterEqual( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool4 LWCGreaterEqual( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool4 LWCLess( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool4 LWCLess( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool4 LWCLess( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool4 LWCLessEqual( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool4 LWCLessEqual( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool4 LWCLessEqual( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float4  LWCDdx( FLWCVector4  V) { return ( float4 )0; }
float4  LWCDdy( FLWCVector4  V) { return ( float4 )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector4  LWCAdd( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector4  LWCAdd( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector4  LWCAdd( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector4  LWCSubtract( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector4  LWCSubtract( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector4  LWCSubtract( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool4  LWCEquals( FLWCVector4  Lhs,  FLWCVector4  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool4  LWCEquals( float4  Lhs,  FLWCVector4  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool4  LWCEquals( FLWCVector4  Lhs,  float4  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool4  LWCEqualsApprox( FLWCVector4  Lhs,  FLWCVector4  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float4 )Threshold;
}
bool4  LWCEqualsApprox( float4  Lhs,  FLWCVector4  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float4 )Threshold;
}
bool4  LWCEqualsApprox( FLWCVector4  Lhs,  float4  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float4 )Threshold;
}

FLWCVector4  LWCSelect( bool4  S,  FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCVector4  LWCSelect( bool4  S,  float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( select_internal(S,( float4 )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCVector4  LWCSelect( bool4  S,  FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( select_internal(S, ((Lhs).Tile) ,( float4 )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCVector4  LWCNegate( FLWCVector4  V) { return  MakeLWCVector4 (- ((V).Tile) , -V.Offset); }

float4  LWCFrac( FLWCVector4  V)
{
	float4  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector4  LWCFloor( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector4  LWCCeil( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector4  LWCRound( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector4  LWCTrunc( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , trunc(VN.Offset)); }


float4  LWCSign( FLWCVector4  V) { return  float4 (sign(LWCToFloat(V))); }
float4  LWCSaturate( FLWCVector4  V) { return saturate(LWCToFloat(V)); }
float4  LWCClampScalar( FLWCVector4  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector4  LWCMultiply( FLWCVector4  Lhs,  FLWCVector4  Rhs)
{
	return  MakeLWCVector4 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4  LWCMultiply( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector4  LWCMultiply( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector4  LWCDivide( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4  LWCDivide( FLWCVector4  Lhs,  float4  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4  LWCDivide( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (( float4 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector4  LWCLerp( FLWCVector4  Lhs,  FLWCVector4  Rhs,  float4  S)
{
	return  MakeLWCVector4 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float4  LWCFmod( FLWCVector4  Lhs,  float4  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float4  LWCFmodFloor( FLWCVector4  Lhs,  float4  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float4  LWCFmodFloorPI( FLWCVector4  V)
{
	return LWCFmodFloor(V, PI);

}
float4  LWCFmodFloor2PI( FLWCVector4  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float4  LWCSin( FLWCVector4  V) { return sin(LWCFmodFloor2PI(V)); }
float4  LWCCos( FLWCVector4  V) { return cos(LWCFmodFloor2PI(V)); }
float4  LWCTan( FLWCVector4  V) { return tan(LWCFmodFloorPI(V)); }
float4  LWCASin( FLWCVector4  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float4  LWCACos( FLWCVector4  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float4  LWCATan( FLWCVector4  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float4  LWCSmoothStep( FLWCVector4  Lhs,  FLWCVector4  Rhs,  FLWCVector4  S)
{
	float4  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector4  LWCMin( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMin( float4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMin( FLWCVector4  Lhs,  float4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( float4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( FLWCVector4  Lhs,  float4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector4  LWCAbs( FLWCVector4  V) { return LWCSelect(LWCLess(V, ( float4 )0), LWCNegate(V), V); }

float4  LWCStep( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float4 )1.0f,( float4 )0.0f) ; }
float4  LWCStep( FLWCVector4  Lhs,  float4  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float4 )1.0f,( float4 )0.0f) ; }
float4  LWCStep( float4  Lhs,  FLWCVector4  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float4 )1.0f,( float4 )0.0f) ; }


FLWCVector4  LWCSquareScaled( FLWCVector4  V)
{
	float4  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector4 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 407 "/Engine/Private/LargeWorldCoordinates.ush"






FLWCScalar LWCMakeRelativeToTile(FLWCScalar V, float NewTile) { return MakeLWCScalar(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCScalar(NewTile, (float)0.0f)))); }
FLWCVector2 LWCMakeRelativeToTile(FLWCVector2 V, float2 NewTile) { return MakeLWCVector2(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector2(NewTile, (float2)0.0f)))); }
FLWCVector3 LWCMakeRelativeToTile(FLWCVector3 V, float3 NewTile) { return MakeLWCVector3(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector3(NewTile, (float3)0.0f)))); }
FLWCVector4 LWCMakeRelativeToTile(FLWCVector4 V, float4 NewTile) { return MakeLWCVector4(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector4(NewTile, (float4)0.0f)))); }
FLWCMatrix LWCMakeRelativeToTile(FLWCMatrix M, float3 NewTile)
{
	LWCSetOrigin(M, LWCMakeRelativeToTile(LWCGetOrigin(M), NewTile));
	return M;
}

FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent(V, 0) ,  LWCGetComponent(V, 1) ); }
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent(V, 0) ,  LWCGetComponent(V, 1) ),  LWCGetComponent(V, 2) ); }
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent(V, 0) ,  LWCGetComponent(V, 1) ),  LWCGetComponent(V, 2) ),  LWCGetComponent(V, 3) ); }

FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }


FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	return LWCAdd(X2, Y2);
}

FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent(V, 2) );
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent(V, 2) );
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent(V, 3) );
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}



FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }

float LWCNormalize(FLWCScalar V) { return 1.0f; }
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
#line 202 "/Engine/Private/Common.ush"
#line 203 "/Engine/Private/Common.ush"
#line 1 "InstancedStereo.ush"
#line 10 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 11 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 12 "/Engine/Private/InstancedStereo.ush"
#line 15 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float SeparateWaterMainDirLightLuminance;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
	void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.TranslatedWorldToSubpixelClip = View.TranslatedWorldToSubpixelClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.MatrixTilePosition = View.MatrixTilePosition;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View.RelativePreViewTranslation;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.SeparateWaterMainDirLightLuminance = View.SeparateWaterMainDirLightLuminance;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = View.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = View.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipWorldToUVScale = View.GlobalDistanceFieldMipWorldToUVScale;
	Result.GlobalDistanceFieldMipWorldToUVBias = View.GlobalDistanceFieldMipWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = View.InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FinalizeViewState(Result);
	return Result;
}
ViewState GetInstancedView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = InstancedView.TranslatedWorldToClip;
	Result.TranslatedWorldToSubpixelClip = InstancedView.TranslatedWorldToSubpixelClip;
	Result.RelativeWorldToClip = InstancedView.RelativeWorldToClip;
	Result.ClipToRelativeWorld = InstancedView.ClipToRelativeWorld;
	Result.TranslatedWorldToView = InstancedView.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = InstancedView.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = InstancedView.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = InstancedView.CameraViewToTranslatedWorld;
	Result.ViewToClip = InstancedView.ViewToClip;
	Result.ViewToClipNoAA = InstancedView.ViewToClipNoAA;
	Result.ClipToView = InstancedView.ClipToView;
	Result.ClipToTranslatedWorld = InstancedView.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = InstancedView.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = InstancedView.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = InstancedView.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = InstancedView.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = InstancedView.ViewTilePosition;
	Result.MatrixTilePosition = InstancedView.MatrixTilePosition;
	Result.ViewForward = InstancedView.ViewForward;
	Result.ViewUp = InstancedView.ViewUp;
	Result.ViewRight = InstancedView.ViewRight;
	Result.HMDViewNoRollUp = InstancedView.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = InstancedView.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = InstancedView.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = InstancedView.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = InstancedView.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = InstancedView.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = InstancedView.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = InstancedView.RelativePreViewTranslation;
	Result.PrevViewToClip = InstancedView.PrevViewToClip;
	Result.PrevClipToView = InstancedView.PrevClipToView;
	Result.PrevTranslatedWorldToClip = InstancedView.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = InstancedView.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = InstancedView.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = InstancedView.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = InstancedView.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = InstancedView.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = InstancedView.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = InstancedView.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = InstancedView.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = InstancedView.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = InstancedView.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = InstancedView.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = InstancedView.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = InstancedView.TemporalAAJitter;
	Result.GlobalClippingPlane = InstancedView.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = InstancedView.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = InstancedView.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = InstancedView.ViewRectMin;
	Result.ViewSizeAndInvSize = InstancedView.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = InstancedView.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = InstancedView.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = InstancedView.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = InstancedView.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = InstancedView.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = InstancedView.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = InstancedView.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = InstancedView.NumSceneColorMSAASamples;
	Result.SeparateWaterMainDirLightLuminance = InstancedView.SeparateWaterMainDirLightLuminance;
	Result.PreExposure = InstancedView.PreExposure;
	Result.OneOverPreExposure = InstancedView.OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView.SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = InstancedView.PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView.PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = InstancedView.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = InstancedView.CullingSign;
	Result.NearPlane = InstancedView.NearPlane;
	Result.GameTime = InstancedView.GameTime;
	Result.RealTime = InstancedView.RealTime;
	Result.DeltaTime = InstancedView.DeltaTime;
	Result.MaterialTextureMipBias = InstancedView.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView.MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView.Random;
	Result.FrameNumber = InstancedView.FrameNumber;
	Result.StateFrameIndexMod8 = InstancedView.StateFrameIndexMod8;
	Result.StateFrameIndex = InstancedView.StateFrameIndex;
	Result.DebugViewModeMask = InstancedView.DebugViewModeMask;
	Result.CameraCut = InstancedView.CameraCut;
	Result.UnlitViewmodeMask = InstancedView.UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView.DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView.TemporalAAParams;
	Result.CircleDOFParams = InstancedView.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = InstancedView.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = InstancedView.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = InstancedView.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = InstancedView.DemosaicVposOffset;
	Result.DecalDepthBias = InstancedView.DecalDepthBias;
	Result.IndirectLightingColorScale = InstancedView.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = InstancedView.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = InstancedView.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = InstancedView.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = InstancedView.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = InstancedView.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = InstancedView.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = InstancedView.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = InstancedView.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = InstancedView.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = InstancedView.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = InstancedView.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = InstancedView.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = InstancedView.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = InstancedView.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = InstancedView.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = InstancedView.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = InstancedView.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = InstancedView.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = InstancedView.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = InstancedView.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = InstancedView.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = InstancedView.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = InstancedView.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = InstancedView.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = InstancedView.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = InstancedView.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView.MobilePreviewMode;
	Result.HMDEyePaddingOffset = InstancedView.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = InstancedView.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = InstancedView.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = InstancedView.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = InstancedView.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipWorldToUVScale = InstancedView.GlobalDistanceFieldMipWorldToUVScale;
	Result.GlobalDistanceFieldMipWorldToUVBias = InstancedView.GlobalDistanceFieldMipWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = InstancedView.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = InstancedView.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = InstancedView.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = InstancedView.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = InstancedView.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = InstancedView.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = InstancedView.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = InstancedView.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = InstancedView.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = InstancedView.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = InstancedView.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = InstancedView.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = InstancedView.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = InstancedView.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = InstancedView.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = InstancedView.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = InstancedView.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = InstancedView.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = InstancedView.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = InstancedView.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = InstancedView.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = InstancedView.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = InstancedView.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = InstancedView.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = InstancedView.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = InstancedView.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = InstancedView.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = InstancedView.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = InstancedView.FarShadowStaticMeshLODBias;
	Result.MinRoughness = InstancedView.MinRoughness;
	Result.HairRenderInfo = InstancedView.HairRenderInfo;
	Result.EnableSkyLight = InstancedView.EnableSkyLight;
	Result.HairRenderInfoBits = InstancedView.HairRenderInfoBits;
	Result.HairComponents = InstancedView.HairComponents;
	Result.bSubsurfacePostprocessEnabled = InstancedView.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = InstancedView.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = InstancedView.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = InstancedView.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = InstancedView.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = InstancedView.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = InstancedView.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = InstancedView.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = InstancedView.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = InstancedView.PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = InstancedView.InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = InstancedView.GPUSceneViewId;
	Result.ViewResolutionFraction = InstancedView.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = InstancedView.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FinalizeViewState(Result);
	return Result;
}
#line 16 "/Engine/Private/InstancedStereo.ush"

void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}



static ViewState ResolvedView = (ViewState)0.0f;

ViewState ResolveView()
{
	return GetPrimaryView();
}
#line 61 "/Engine/Private/InstancedStereo.ush"
bool IsInstancedStereo()
{



	return false;

}

uint GetEyeIndex(uint InstanceId)
{



	return 0;

}

uint GetInstanceId(uint InstanceId)
{



	return InstanceId;

}
#line 204 "/Engine/Private/Common.ush"
#line 205 "/Engine/Private/Common.ush"
#line 1 "Definitions.usf"
#line 206 "/Engine/Private/Common.ush"
#line 207 "/Engine/Private/Common.ush"
#line 1 "AssertionMacros.ush"
#line 208 "/Engine/Private/Common.ush"
#line 246 "/Engine/Private/Common.ush"
static float GlobalTextureMipBias = 0;
static float GlobalRayCone_TexArea = 0;
float ComputeRayConeLod(Texture2D Tex)
{






    return  0.0f ;

}

float ClampToHalfFloatRange(float X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



float4  Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 274 "/Engine/Private/Common.ush"
}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
#line 282 "/Engine/Private/Common.ush"
}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{

	return Tex.SampleLevel(Sampler, UV.Value, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
#line 290 "/Engine/Private/Common.ush"
}
float  Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias)  .a ;
#line 298 "/Engine/Private/Common.ush"
}
float4  Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 306 "/Engine/Private/Common.ush"
}
float4  TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 314 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 322 "/Engine/Private/Common.ush"
}
float4  Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + MipBias + GlobalTextureMipBias);
#line 338 "/Engine/Private/Common.ush"
}
float4  Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 354 "/Engine/Private/Common.ush"
}
float4  Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float  TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV,  float  Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
float4  TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 374 "/Engine/Private/Common.ush"
}
float4  TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSample( Texture2D  Tex, SamplerState Sampler, float2 UV)
{




		return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
#line 390 "/Engine/Private/Common.ush"
}
float4  TextureExternalSampleGrad( Texture2D  Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSampleLevel( Texture2D  Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




float4  Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{



	return Texture1DSample(Tex, Sampler, UV);

}
float4  Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Texture2DSample(Tex, Sampler, UV);

}
float4  Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Texture3DSample(Tex, Sampler, UV);

}
float4  TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return TextureCubeSample(Tex, Sampler, UV);

}
float4  TextureExternalSample_Decal( Texture2D  Tex, SamplerState Sampler, float2 UV)
{



	return TextureExternalSample(Tex, Sampler, UV);

}

float4  Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 455 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}
#line 482 "/Engine/Private/Common.ush"
float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float2 uvCurFrame = uv + curframe;
	float2 uvNextFrame = uv + nextframe;
#line 502 "/Engine/Private/Common.ush"
	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0:
		sampleA = Tex.SampleLevel(TexSampler, uvCurFrame, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uvNextFrame, miplevel);
		break;
	case 1:
		sampleA = Texture2DSample(Tex, TexSampler, uvCurFrame);
		sampleB = Texture2DSample(Tex, TexSampler, uvNextFrame);
		break;
	case 2:
		sampleA = Tex.SampleGrad(TexSampler, uvCurFrame, InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uvNextFrame, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}


float4  TextureCubeArraySample(TextureCubeArray Tex, SamplerState Sampler, float4 UV)
{
	return Tex.Sample(Sampler, UV);
}

float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

float4  TextureCubeArraySampleBias(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 542 "/Engine/Private/Common.ush"
}

float4  TextureCubeArraySampleGrad(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex,  float  Mip)
{
	return TextureCubeArraySampleLevel(Tex, Sampler, float4(UV, ArrayIndex), Mip);
}
#line 585 "/Engine/Private/Common.ush"
float  Luminance(  float3  LinearColor )
{
	return dot( LinearColor,  float3 ( 0.3, 0.59, 0.11 ) );
}

float length2(float2 v)
{
	return dot(v, v);
}
float length2(float3 v)
{
	return dot(v, v);
}
float length2(float4 v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;
#line 610 "/Engine/Private/Common.ush"
}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;
#line 619 "/Engine/Private/Common.ush"
}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;
#line 628 "/Engine/Private/Common.ush"
}




float  ClampedPow( float  X, float  Y)
{
	return pow(max(abs(X), 0.000001f ),Y);
}
float2  ClampedPow( float2  X, float2  Y)
{
	return pow(max(abs(X), float2 ( 0.000001f , 0.000001f )),Y);
}
float3  ClampedPow( float3  X, float3  Y)
{
	return pow(max(abs(X), float3 ( 0.000001f , 0.000001f , 0.000001f )),Y);
}
float4  ClampedPow( float4  X, float4  Y)
{
	return pow(max(abs(X), float4 ( 0.000001f , 0.000001f , 0.000001f , 0.000001f )),Y);
}


float  PositiveClampedPow( float  Base,  float  Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}
float2  PositiveClampedPow( float2  Base,  float2  Exponent)
{
	return  float2 (PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y));
}
float3  PositiveClampedPow( float3  Base,  float3  Exponent)
{
	return  float3 (PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z));
}
float4  PositiveClampedPow( float4  Base,  float4  Exponent)
{
	return  float4 (PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw));
}

float DDX(float Input)
{

	return 0;
#line 675 "/Engine/Private/Common.ush"
}

float2 DDX(float2 Input)
{

	return 0;
#line 684 "/Engine/Private/Common.ush"
}

float3 DDX(float3 Input)
{

	return 0;
#line 693 "/Engine/Private/Common.ush"
}

float4 DDX(float4 Input)
{

	return 0;
#line 702 "/Engine/Private/Common.ush"
}

float DDY(float Input)
{

	return 0;
#line 711 "/Engine/Private/Common.ush"
}

float2 DDY(float2 Input)
{

	return 0;
#line 720 "/Engine/Private/Common.ush"
}

float3 DDY(float3 Input)
{

	return 0;
#line 729 "/Engine/Private/Common.ush"
}

float4 DDY(float4 Input)
{

	return 0;
#line 738 "/Engine/Private/Common.ush"
}
#line 740 "/Engine/Private/Common.ush"
#line 1 "FastMath.ush"
#line 9 "/Engine/Private/FastMath.ush"
#line 1 "FastMathThirdParty.ush"
#line 42 "/Engine/Private/FastMathThirdParty.ush"
float rsqrtFast( float x )
{
	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
}




float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}




float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}





float rcpFastNR1( float x )
{
	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}

int4 fastClamp(int4 x, int4 Min, int4 Max)
{




	return clamp(x, Min, Max);

}

int3 fastClamp(int3 x, int3 Min, int3 Max)
{




	return clamp(x, Min, Max);

}

int2 fastClamp(int2 x, int2 Min, int2 Max)
{




	return clamp(x, Min, Max);

}

int fastClamp(int x, int Min, int Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX)
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}





float atanFastPos( float x )
{
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float2 atanFast( float2 x )
{
	return float2( atanFast(x.x), atanFast(x.y) );
}

float3 atanFast( float3 x )
{
	return float3( atanFast(x.x), atanFast(x.y), atanFast(x.z) );
}

float4 atanFast( float4 x )
{
	return float4( atanFast(x.x), atanFast(x.y), atanFast(x.z), atanFast(x.w) );
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;


	t0 = + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}

float2 atan2Fast( float2 y, float2 x )
{
	return float2( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y) );
}

float3 atan2Fast( float3 y, float3 x )
{
	return float3( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z) );
}

float4 atan2Fast( float4 y, float4 x )
{
	return float4( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z), atan2Fast(y.w, x.w) );
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;



	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{

	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x80000000) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line 10 "/Engine/Private/FastMath.ush"



float FastExp(float x) { return exp2(1.442695f * x); }
float2 FastExp(float2 x) { return exp2(1.442695f * x); }
float3 FastExp(float3 x) { return exp2(1.442695f * x); }
float4 FastExp(float4 x) { return exp2(1.442695f * x); }




float FastLog(float x) { return log2(0.693147f * x); }
float2 FastLog(float2 x) { return log2(0.693147f * x); }
float3 FastLog(float3 x) { return log2(0.693147f * x); }
float4 FastLog(float4 x) { return log2(0.693147f * x); }
#line 741 "/Engine/Private/Common.ush"
#line 1 "Random.ush"
#line 12 "/Engine/Private/Random.ush"
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);


	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{

	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}
#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed /  4093 );
	s = frac(s * s *  4093 );
	s = frac(s * s *  4093 );
	return s;
}








uint3 Rand3DPCG16(int3 p)
{

	uint3 v = uint3(p);




	v = v * 1664525u + 1013904223u;
#line 94 "/Engine/Private/Random.ush"
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	return v >> 16u;
}






uint3 Rand3DPCG32(int3 p)
{

	uint3 v = uint3(p);


	v = v * 1664525u + 1013904223u;


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	v ^= v >> 16u;


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}








uint4 Rand4DPCG32(int4 p)
{

	uint4 v = uint4(p);


	v = v * 1664525u + 1013904223u;


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;


	v ^= (v >> 16u);


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}
#line 174 "/Engine/Private/Random.ush"
void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);


	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
#line 215 "/Engine/Private/Random.ush"
uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{

	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };

	uint y = v[0];
	uint z = v[1];
	uint sum = 0;

	[unroll]  for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v, bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{

	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;



	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;


	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
#line 403 "/Engine/Private/Random.ush"
float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{

	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;



	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][0] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][0] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][1] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][1] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][2] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][2] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][3] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][3] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);


	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);

	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;
	if (bTiling)
	{
		OffsetB = iv1.z * ZShear;
	}


	float ts = 1 / 128.0f;


	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;


	float2 TexA1 = TexA0 + ts;
	float2 TexB1 = TexB0 + ts;
	if (bTiling)
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}



	float3 A = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;

	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{

	float Extent = 16;



	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);


	float3 uvw = frac(xyz);


	float3 p0 = xyz - uvw;


	float3 f = PerlinRamp(float4(uvw, 0)).xyz;

	float3 p = p0 + f;

	float4 NoiseSample = Texture3DSampleLevel(View.PerlinNoise3DTexture, View.PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);



	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{

	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;



	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}



	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}


	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v), fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);


	float4 mindist = float4(0,0,0,100);
	float3 p, offset;


	if (Quality == 3)
	{
		[unroll(3)]  for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			[unroll(3)]  for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}


	else
	{
		[unroll(2)]  for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			[unroll(2)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(2)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					if (Quality == 2)
					{

						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}


	if (Quality >= 4)
	{
		[unroll(2)]  for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			[unroll(2)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(2)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{

					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}


	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos);
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1);

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b =
		  min(max(0, RG), max(0, RB))
		+ min(max(0, -RG), max(0, GB))
		+ min(max(0, -RB), max(0, -GB));

	ret.a =
		  min(max(0, -RG), max(0, -RB))
		+ min(max(0, RG), max(0, -GB))
		+ min(max(0, RB), max(0, GB));

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;


	float3 p = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);


	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;

	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);


	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop]  for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}
#line 742 "/Engine/Private/Common.ush"
#line 747 "/Engine/Private/Common.ush"
float  PhongShadingPow( float  X,  float  Y)
{
#line 765 "/Engine/Private/Common.ush"
	return ClampedPow(X, Y);
}
#line 787 "/Engine/Private/Common.ush"
Texture2D LightAttenuationTexture;
SamplerState LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));

	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));

	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));

	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));

	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFF8000,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));

	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));

	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float ConvertTangentSnormToUnorm8(float Input)
{
	float Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float ConvertTangentSnormToUnorm16(float Input)
{
	float Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}






uint PackUnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, 0.0, 1.0) * 65535.0));
	return (sv.x | (sv.y << 16u));
}

uint PackSnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, -1.0, 1.0) * 32767.0) + 32767.0);
	return (sv.x | (sv.y << 16u));
}

float2 UnpackUnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = (p & 0xffff) * rcp(65535.0f);
	Ret.y = (p >> 16u) * rcp(65535.0f);
	return Ret;
}

float2 UnpackSnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = clamp((float(p & 0xffff) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	Ret.y = clamp((float(p >> 16u) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	return Ret;
}

float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


float  AtanFast(  float  x )
{

	float3  A = x < 1 ?  float3 ( x, 0, 1 ) :  float3 ( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


float  EncodeLightAttenuation( float  InColor)
{


	return sqrt(InColor);
}


float4  EncodeLightAttenuation( float4  InColor)
{
	return sqrt(InColor);
}


float  DecodeLightAttenuation( float  InColor)
{
	return Square(InColor);
}


float4  DecodeLightAttenuation( float4  InColor)
{
	return Square(InColor);
}


float4  RGBTEncode( float3  Color)
{
	float4  RGBT;
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

float3  RGBTDecode( float4  RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



float4  RGBMEncode(  float3  Color )
{
	Color *= 1.0 / 64.0;

	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

float4  RGBMEncodeFast(  float3  Color )
{

	float4  rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *=  float4 ( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

float3  RGBMDecode(  float4  rgbm,  float  MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

float3  RGBMDecode(  float4  rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

float4  RGBTEncode8BPC( float3  Color,  float  Range)
{
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	float4  RGBT;
	RGBT.a = (Range + 1) / Range * Max / (1 + Max);


	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

float3  RGBTDecode8BPC( float4  RGBT,  float  Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}
#line 1179 "/Engine/Private/Common.ush"
float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;



	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return DecodeLightAttenuation(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{

	return DeviceZ * View.InvDeviceZToWorldZTransform[0] + View.InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}


bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip[3][3] >= 1.0f;
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection(View.ViewToClip))
	{

		return SceneDepth * View.ViewToClip[2][2] + View.ViewToClip[3][2];
	}
	else
	{

		return 1.0f / ((SceneDepth + View.InvDeviceZToWorldZTransform[3]) * View.InvDeviceZToWorldZTransform[2]);
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View.BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition,  GetPrimaryView() .PreViewTranslation);
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{



	float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * View.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

void SvPositionToResolvedScreenPositionDeriv(float4 SvPosition, float2 PPZ_DDX_DDY, float2 W_DDX_DDY, inout float4 ScreenPosition, inout float4 ScreenPositionDDX, inout float4 ScreenPositionDDY)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float4 NDCPos = float4((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z, 1.0f);
	float4 NDCPosDDX = float4(ResolvedView.ViewSizeAndInvSize.z * 2.0f, 0.0f, PPZ_DDX_DDY.x, 0.0f);
	float4 NDCPosDDY = float4(ResolvedView.ViewSizeAndInvSize.w * 2.0f, 0.0f, PPZ_DDX_DDY.y, 0.0f);

	ScreenPosition = NDCPos * SvPosition.w;
	ScreenPositionDDX = NDCPos * W_DDX_DDY.x + NDCPosDDX * SvPosition.w;
	ScreenPositionDDY = NDCPos * W_DDX_DDY.y + NDCPosDDY * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{

	float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;

	return PixelPos.xy * View.ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View.BufferSizeAndInvSize.xy - View.ViewRectMin.xy;
	return PixelPos.xy * View.ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View.ViewSizeAndInvSize.xy;
	return (PixelPos + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x = ViewportUV.x * View.ScreenToViewSpace.x + View.ScreenToViewSpace.z;
	ProjViewPos.y = ViewportUV.y * View.ScreenToViewSpace.y + View.ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}
#line 1349 "/Engine/Private/Common.ush"
float2  ScreenAlignedPosition( float4 ScreenPosition )
{
	return  float2 (ScreenPositionToBufferUV(ScreenPosition));
}
#line 1357 "/Engine/Private/Common.ush"
float2  ScreenAlignedUV(  float2  UV )
{
	return (UV* float2 (2,-2) +  float2 (-1,1))*View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
}
#line 1365 "/Engine/Private/Common.ush"
float2  GetViewportCoordinates( float2  InFragmentCoordinates)
{
	return InFragmentCoordinates;
}
#line 1373 "/Engine/Private/Common.ush"
float4  UnpackNormalMap(  float4  TextureSample )
{



		float2  NormalXY = TextureSample.rg;


	NormalXY = NormalXY *  float2 (2.0f,2.0f) -  float2 (1.0f,1.0f);
	float  NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return  float4 ( NormalXY.xy, NormalZ, 1.0f );
}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{

	float4  MaskConst =  float4 (Channel == 0, Channel == 1, Channel == 2, Channel == 3);


	const float WidthConst = 1.0f;
	float InvWidthConst = 1 / WidthConst;
#line 1417 "/Engine/Private/Common.ush"
	float Result;
	{

		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));


		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y));
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{

	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



float  MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;

	[loop]  for(uint i = 0; i < Levels; ++i)
	{

		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{

		Out = Out * 0.5f + 0.5f;
	}


	return lerp(OutputMin, OutputMax, Out);
}





float4  MaterialExpressionVectorNoise( float3  Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);


	switch (Function)
	{
	case 0:
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1:
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2:
		result = Jacobian[0];
		break;
	case 3:
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default:
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}
#line 1544 "/Engine/Private/Common.ush"
float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);


	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;

	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;

	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);

	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;

	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));

	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	return saturate(BoxIntersections);
}


float  ComputeDistanceFromBoxToPoint( float3  Mins,  float3  Maxs,  float3  InPoint)
{
	float3  DistancesToMin =  select_internal(InPoint < Mins,abs(InPoint - Mins), float (0.0)) ;
	float3  DistancesToMax =  select_internal(InPoint > Maxs,abs(InPoint - Maxs), float (0.0)) ;


	float  Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


float  ComputeSquaredDistanceFromBoxToPoint( float3  BoxCenter,  float3  BoxExtent,  float3  InPoint)
{
	float3  AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}
#line 1613 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;


	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


float3  TransformTangentVectorToWorld( float3x3  TangentToWorld,  float3  InTangentVector)
{


	return mul(InTangentVector, TangentToWorld);
}


float3  TransformWorldVectorToTangent( float3x3  TangentToWorld,  float3  InWorldVector)
{


	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{

	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


float  GetBoxPushout( float3  Normal, float3  Extent)
{
	return dot(abs(Normal * Extent),  float3 (1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}
#line 1692 "/Engine/Private/Common.ush"
struct FScreenVertexOutput
{
	noperspective float2 UV : TEXCOORD0;
	float4 Position : SV_POSITION;
};




float4  EncodeVelocityToTexture(float3 V)
{

		V.xy = sign(V.xy) * sqrt(abs(V.xy)) * (2.0 / sqrt(2.0));




	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;


		uint Vz = asuint(V.z);

		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float((Vz >> 0) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
#line 1724 "/Engine/Private/Common.ush"
	return EncodedV;

}

float3 DecodeVelocityFromTexture( float4  InEncodedV)
{



	float4 EncodedV = InEncodedV;

	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;


		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
#line 1747 "/Engine/Private/Common.ush"
		V.xy = (V.xy * abs(V.xy)) * 0.5;


	return V;
}


bool GetGIReplaceState()
{



	return false;

}


bool GetNaniteReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}

bool GetPathTracingQualitySwitch()
{



	return false;

}

bool GetLightmassReplaceState()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}

struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};






void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters.PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters.PosScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters.UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters.UVScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters.PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters.PosScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}
#line 1864 "/Engine/Private/Common.ush"
float SafeSaturate(float In) { return saturate(In);}
float2 SafeSaturate(float2 In) { return saturate(In);}
float3 SafeSaturate(float3 In) { return saturate(In);}
float4 SafeSaturate(float4 In) { return saturate(In);}
#line 1893 "/Engine/Private/Common.ush"
bool IsFinite(float In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool IsPositiveFinite(float In) { return asuint(In) < 0x7F800000; }float MakeFinite(float In) { return select_internal(!IsFinite(In),0.0,In) ; }float MakePositiveFinite(float In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }
bool2 IsFinite(float2 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool2 IsPositiveFinite(float2 In) { return asuint(In) < 0x7F800000; }float2 MakeFinite(float2 In) { return select_internal(!IsFinite(In),0.0,In) ; }float2 MakePositiveFinite(float2 In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }
bool3 IsFinite(float3 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool3 IsPositiveFinite(float3 In) { return asuint(In) < 0x7F800000; }float3 MakeFinite(float3 In) { return select_internal(!IsFinite(In),0.0,In) ; }float3 MakePositiveFinite(float3 In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }
bool4 IsFinite(float4 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool4 IsPositiveFinite(float4 In) { return asuint(In) < 0x7F800000; }float4 MakeFinite(float4 In) { return select_internal(!IsFinite(In),0.0,In) ; }float4 MakePositiveFinite(float4 In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }





bool GetShadowReplaceState()
{



	return false;

}

bool GetReflectionCapturePassSwitchState()
{
	return View.RenderingReflectionCaptureMask > 0.0f;
}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) *  (1.0f/128.0f) ;
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return reversebits(Bitfield) >> (32 - BitCount);
}


uint2 ZOrder2D(uint Index, const uint SizeLog2)
{
	uint2 Coord = 0;

	[unroll]
	for (uint i = 0; i < SizeLog2; i++)
	{
		Coord.x |= ((Index >> (2 * i + 0)) & 0x1) << i;
		Coord.y |= ((Index >> (2 * i + 1)) & 0x1) << i;
	}

	return Coord;
}

uint3 ZOrder3D(uint Index, const uint SizeLog2)
{
    uint3 Coord = 0;

    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Coord.x |= ((Index >> (3 * i + 0)) & 0x1) << i;
        Coord.y |= ((Index >> (3 * i + 1)) & 0x1) << i;
        Coord.z |= ((Index >> (3 * i + 2)) & 0x1) << i;
    }

    return Coord;
}

uint ZOrder3DEncode(uint3 Coord, const uint SizeLog2)
{
    uint Index = 0;

    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Index |= ((Coord.x >> i) & 0x1) << (3 * i + 0);
        Index |= ((Coord.y >> i) & 0x1) << (3 * i + 1);
        Index |= ((Coord.z >> i) & 0x1) << (3 * i + 2);
    }

    return Index;
}



struct FPixelShaderIn
{

	float4 SvPosition;


	uint Coverage;


	bool bIsFrontFace;
};

struct FPixelShaderOut
{

	float4 MRT[8];


	uint StrataOutput[3];


	uint Coverage;


	float Depth;
};
#line 2047 "/Engine/Private/Common.ush"
float4 GatherDepth(Texture2D Texture, float2 UV)
{

	float4 DeviceZ = Texture.GatherRed( D3DStaticBilinearClampedSampler , UV);

	return float4(
		ConvertFromDeviceZ(DeviceZ.x),
		ConvertFromDeviceZ(DeviceZ.y),
		ConvertFromDeviceZ(DeviceZ.z),
		ConvertFromDeviceZ(DeviceZ.w));
}
#line 20 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
#line 14 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
	float MaxGlobalDFAOConeDistance;
#line 51 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	float4 GlobalVolumeCenterAndExtent[ 6 ];
	float4 GlobalVolumeWorldToUVAddAndMul[ 6 ];
	float4 GlobalDistanceFieldMipWorldToUVScale[ 6 ];
	float4 GlobalDistanceFieldMipWorldToUVBias[ 6 ];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	uint GlobalDistanceFieldClipmapSizeInPages;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
#line 90 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
struct FGlobalDistanceFieldPage
{
	uint PageIndex;
	bool bValid;
	bool bCoverage;
};

uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset;





	PageAtlasOffset.x = Page.PageIndex & 0x7F;
	PageAtlasOffset.y = (Page.PageIndex >> 7) & 0x7F;
	PageAtlasOffset.z = Page.PageIndex >> 14;

	return PageAtlasOffset;
}

uint PackGlobalDistanceFieldPage(FGlobalDistanceFieldPage Page)
{
	uint PackedPage =  0xFFFFFFFF ;
	if (Page.bValid)
	{
		PackedPage = Page.PageIndex & 0x00FFFFFF;
		PackedPage |= Page.bCoverage ?  0x80000000  : 0;
	}
	return PackedPage;
}

FGlobalDistanceFieldPage UnpackGlobalDistanceFieldPage(uint PackedPage)
{
	FGlobalDistanceFieldPage Page;
	Page.PageIndex = PackedPage & 0x00FFFFFF;
	Page.bCoverage = PackedPage &  0x80000000 ;
	Page.bValid = PackedPage <  0xFFFFFFFF ;
	return Page;
}

FGlobalDistanceFieldPage GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) * GlobalDistanceFieldClipmapSizeInPages + int3(0, 0, ClipmapIndex * GlobalDistanceFieldClipmapSizeInPages), 0);
	uint PackedPage = GlobalDistanceFieldPageTableTexture.Load(PageTableCoord);
	return UnpackGlobalDistanceFieldPage(PackedPage);
}

void ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page, out float3 OutPageUV, out float3 OutCoveragePageUV)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * GlobalDistanceFieldClipmapSizeInPages);

	float3 PageAtlasCoord = PageAtlasOffset *  8  + VolumePageUV *  ( 8 - 1)  + 0.5f;
	OutPageUV = PageAtlasCoord * GlobalDistanceFieldInvPageAtlasSize;

	float3 CoveragePageAtlasCoord = PageAtlasOffset *  4  + VolumePageUV *  ( 4 - 1)  + 0.5f;
	OutCoveragePageUV = CoveragePageAtlasCoord * GlobalDistanceFieldInvCoverageAtlasSize;
}

float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * GlobalDistanceFieldClipmapSizeInPages);
	float3 PageAtlasCoord = PageAtlasOffset *  8  + VolumePageUV *  ( 8 - 1)  + 0.5f;
	float3 PageUV = PageAtlasCoord * GlobalDistanceFieldInvPageAtlasSize;
	return PageUV;
}

float3 ComputeGlobalDistanceFieldCoveragePageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * GlobalDistanceFieldClipmapSizeInPages);
	float3 CoveragePageAtlasCoord = PageAtlasOffset *  4  + VolumePageUV *  ( 4 - 1)  + 0.5f;
	float3 CoveragePageUV = CoveragePageAtlasCoord * GlobalDistanceFieldInvCoverageAtlasSize;
	return CoveragePageUV;
}

float EncodeGlobalDistanceFieldPageDistance(float Distance, float ClipmapInfluenceRange)
{
	return saturate(Distance / (2.0f * ClipmapInfluenceRange) + 0.5f);
}

float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

float3 ComputeGlobalUV(float3 WorldPosition, uint ClipmapIndex)
{

	float4 WorldToUVAddAndMul = GlobalVolumeWorldToUVAddAndMul[ClipmapIndex];
	float3 UV = frac(WorldPosition * WorldToUVAddAndMul.www + WorldToUVAddAndMul.xyz);
	UV = frac(UV);
	return UV;
}

float3 ComputeGlobalMipUV(float3 WorldPosition, uint ClipmapIndex)
{
	float3 MipUV = saturate(WorldPosition * GlobalDistanceFieldMipWorldToUVScale[ClipmapIndex].xyz + GlobalDistanceFieldMipWorldToUVBias[ClipmapIndex].xyz);


	float MipUVMinZ = GlobalDistanceFieldMipWorldToUVScale[ClipmapIndex].w;
	float MipUVMaxZ = GlobalDistanceFieldMipWorldToUVBias[ClipmapIndex].w;
	MipUV.z = clamp(MipUV.z, MipUVMinZ, MipUVMaxZ);

	return MipUV;
}

float GetDistanceToNearestSurfaceGlobal(float3 WorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex < NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[ClipmapIndex].xyz, GlobalVolumeCenterAndExtent[ClipmapIndex].www, WorldPosition);
		const float ClipmapVoxelExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w * GlobalVolumeTexelSize;
		const float ClipmapInfluenceRange = 2.0f *  4  * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);

			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler , PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

float SampleGlobalDistanceField(float3 WorldPosition, float MaxDistance, int MinClipmapIndex)
{
	float Distance = MaxDistance;

	for (uint ClipmapIndex = MinClipmapIndex; Distance <= MaxDistance && ClipmapIndex < NumGlobalSDFClipmaps; ++ClipmapIndex)
	{
		const float ClipmapInfluenceRange =  4  * 2.0f * GlobalVolumeCenterAndExtent[ClipmapIndex].w * GlobalVolumeTexelSize;

		float3 ClipmapVolumeUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
		FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

		if (Page.bValid)
		{
			float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

			float DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler , PageUV, 0).x;

			if (DistanceFieldValue < 1.0f)
			{
				Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
				break;
			}
		}
	}

	return Distance;
}

float GlobalDistanceFieldSampleClipmap(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float DistanceFieldValue = 1.0f;


	ClipmapVolumeUV = frac(ClipmapVolumeUV);

	FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
	if (Page.bValid)
	{
		float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);
		DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler , PageUV, 0).x;
	}

	return DistanceFieldValue;
}

float3 GlobalDistanceFieldPageCentralDiff(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float3 TexelOffset = 0.5f * GlobalVolumeTexelSize;

	float R = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(+TexelOffset.x, 0, 0), ClipmapIndex);
	float L = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(-TexelOffset.x, 0, 0), ClipmapIndex);
	float F = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, +TexelOffset.y, 0), ClipmapIndex);
	float B = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, -TexelOffset.y, 0), ClipmapIndex);
	float U = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, +TexelOffset.z), ClipmapIndex);
	float D = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, -TexelOffset.z), ClipmapIndex);

	return float3(R - L, F - B, U - D);
}

float3 ComputeGlobalDistanceFieldNormal(float3 SampleWorldPosition, uint ClipmapIndex, float3 FallbackNormal)
{
	float3 ClipmapVolumeUV = ComputeGlobalUV(SampleWorldPosition, ClipmapIndex);
	float3 DistanceFieldGradient = GlobalDistanceFieldPageCentralDiff(ClipmapVolumeUV, ClipmapIndex);
	float DistanceFieldGradientLength = length(DistanceFieldGradient);
	float3 DistanceFieldNormal = DistanceFieldGradientLength > 0.001f ? DistanceFieldGradient / DistanceFieldGradientLength : FallbackNormal;
	return DistanceFieldNormal;
}



float3 GetDistanceFieldGradientGlobal(float3 WorldPosition)
{
	float3 Gradient = float3(0, 0, 0.001f);

	for (uint ClipmapIndex = 0; ClipmapIndex < NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		const float ClipmapVoxelExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w * GlobalVolumeTexelSize;
		const float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[ClipmapIndex].xyz, GlobalVolumeCenterAndExtent[ClipmapIndex].www, WorldPosition);

		if (DistanceFromClipmap >= ClipmapVoxelExtent)
		{
			const float3 ClipmapVolumeUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler , PageUV, 0).x;


				if (DistanceFieldValue < 0.9f)
				{
					float3 PageCentralDiff = GlobalDistanceFieldPageCentralDiff(ClipmapVolumeUV, ClipmapIndex);

					const float ClipmapInfluenceRange =  4  * 2.0f * ClipmapVoxelExtent;
					const float PageDistanceDecodeFactor = 2.0f * ClipmapInfluenceRange;
					float ClipmapExtent = GlobalVolumeCenterAndExtent[ClipmapIndex].w;


					const float BackwardsCompatibilityFactor = 128.0f * GlobalVolumeTexelSize;
					Gradient = PageDistanceDecodeFactor * PageCentralDiff / (ClipmapExtent * BackwardsCompatibilityFactor);

					break;
				}
			}
		}
	}

	return Gradient;
}

float CalculateDistanceFieldApproxAO(float3 WorldPosition, float3 WorldNormal, uint NumSteps, float StepDistance, float StepScale, float DistanceBias, float MaxDistance)
{

	int MinClipmapIndex = -1;

	for (uint ClipmapIndex = 0; ClipmapIndex < NumGlobalSDFClipmaps; ++ClipmapIndex)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(GlobalVolumeCenterAndExtent[ClipmapIndex].xyz, GlobalVolumeCenterAndExtent[ClipmapIndex].www, WorldPosition);
		if (DistanceFromClipmap > MaxDistance)
		{
			MinClipmapIndex = ClipmapIndex;
			break;
		}
	}

	if (MinClipmapIndex < 0)
	{
		return 1.0f;
	}

	float Occlusion = 0.0f;
	float W = 0.5f;
	float TotalW = 0.0f;

	for (uint StepIndex = 0; StepIndex < NumSteps; ++StepIndex)
	{
		const float CurrentDistance = StepDistance + DistanceBias;
		const float Dist = max(0.0f, SampleGlobalDistanceField(WorldPosition + WorldNormal * CurrentDistance, CurrentDistance, MinClipmapIndex));

		Occlusion += W * Dist / CurrentDistance;
		TotalW += W;
		W *= 0.5f;

		StepDistance *= StepScale;
	}

	return saturate(Occlusion / TotalW);
}
#line 21 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 24 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	const static float TWO_PI = 3.1415926535897932f*2.0f;




float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }

bool NiagaraAll(bool2 b) { return all(b); }
bool NiagaraAll(bool3 b) { return all(b); }
bool NiagaraAll(bool4 b) { return all(b); }
bool NiagaraAny(bool2 b) { return any(b); }
bool NiagaraAny(bool3 b) { return any(b); }
bool NiagaraAny(bool4 b) { return any(b); }
#line 82 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	uint3 DispatchThreadIdBounds;
	uint3 DispatchThreadIdToLinear;

	static uint GLinearThreadId;
	static uint3 GDispatchThreadId;
	static uint3 GGroupThreadId;
	static uint GEmitterTickCounter;
	static uint GRandomSeedOffset = 0;
#line 92 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/SceneTexturesCommon.ush"
#line 41 "/Engine/Private/SceneTexturesCommon.ush"
float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct.SceneColorTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).rgb;

}

float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(SceneTexturesStruct.SceneColorTexture,  SceneTexturesStruct.PointClampSampler ,ScreenUV);

}


float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r);

}


float4 CalcSceneColorAndDepth( float2 ScreenUV )
{
	return float4(CalcSceneColor(ScreenUV), CalcSceneDepth(ScreenUV));
}


float LookupDeviceZ( float2 ScreenUV )
{




	return Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r;

}


float LookupDeviceZ(uint2 PixelPos)
{



	return SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelPos, 0)).r;

}


float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelPos, 0)).r;


	return ConvertFromDeviceZ(DeviceZ);

}


float4 GatherSceneDepth(float2 UV, float2 InvBufferSize)
{



	return GatherDepth(SceneTexturesStruct.SceneDepthTexture, UV);

}


float CalcSceneCustomDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.CustomDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r);

}

uint CalcSceneCustomStencil(uint2 PixelPos)
{



	return SceneTexturesStruct.CustomStencilTexture.Load(uint3(PixelPos, 0))  .g ;

}

float CalcSceneAO(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct.ScreenSpaceAOTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r;

}
#line 93 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 96 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "NiagaraPhysicsCommon.ush"
#line 12 "/Plugin/FX/Niagara/Private/NiagaraPhysicsCommon.ush"
groupshared float3 SharedNodePosition[ 64 ];
groupshared float4 SharedNodeOrientation[ 64 ];

groupshared float SharedInverseMass[ 64 ];
groupshared float SharedInverseInertia[ 64 ];

groupshared float3 SharedPreviousPosition[ 64 ];
groupshared float4 SharedPreviousOrientation[ 64 ];
#line 97 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

	uint EmitterTickCounter;

	float4 Modulo(float4 x, float4 y){ return fmod(x,y); }
	float3 Modulo(float3 x, float3 y){ return fmod(x,y); }
	float2 Modulo(float2 x, float2 y){ return fmod(x,y); }
	float Modulo(float x, float y){ return fmod(x,y); }


	FLWCVector3 WorldPositionFromSceneDepth(float2 ScreenPosition, float SceneDepth)
	{
		FLWCVector4 HomogeneousWorldPosition = LWCMultiply(float4(ScreenPosition * SceneDepth, SceneDepth, 1),  GetPrimaryView() .ScreenToWorld);
		FLWCVector3 WorldPosition = MakeLWCVector3( ((HomogeneousWorldPosition).Tile) .xyz, HomogeneousWorldPosition.Offset.xyz);
		FLWCScalar Scale = MakeLWCScalar( ((HomogeneousWorldPosition).Tile) .w, HomogeneousWorldPosition.Offset.w);
		return LWCDivide(WorldPosition, LWCToFloat(Scale));
	}





	float NiagaraInternalNoise(uint u, uint v, uint s)
	{
		uint Seed = (u * 1664525u + v) + s + GRandomSeedOffset;
		GRandomSeedOffset += Seed;
		return float(Rand3DPCG32(int3(u,v,Seed)).x) / 4294967296.0f;
	}




	int4 EmitterSpawnInfoOffsets[ (( 8 + 3) / 4) ];
	float4 EmitterSpawnInfoParams[ 8 ];

	static int GInterpSpawnIndex;
	static float Emitter_SpawnInterval;
	static float Emitter_InterpSpawnStartDt;
	static int Emitter_SpawnGroup;

	static int Engine_ExecutionCount;
	static int GGPUExecIndex;

	static uint GSpawnStartInstance;
	uint NumSpawnedInstances;

	void SetupExecIndexForGPU()
	{
		GGPUExecIndex = GLinearThreadId;
		Engine_ExecutionCount = GSpawnStartInstance;
	}

	void SetupExecIndexAndSpawnInfoForGPU()
	{
		GGPUExecIndex = GLinearThreadId - GSpawnStartInstance;

		int SpawnInfoIndex = 0;
		[unroll]
		for (int i = 0; i <  (( 8 + 3) / 4) ; ++i)
		{


			int4 CompareResults = GGPUExecIndex >= EmitterSpawnInfoOffsets[i];
			CompareResults = CompareResults & int4(1, 1, 1, 1);
			SpawnInfoIndex += CompareResults.x + CompareResults.y + CompareResults.z + CompareResults.w;
		}

		Emitter_SpawnInterval = EmitterSpawnInfoParams[SpawnInfoIndex].x;
		Emitter_InterpSpawnStartDt = EmitterSpawnInfoParams[SpawnInfoIndex].y;
		Emitter_SpawnGroup = asint(EmitterSpawnInfoParams[SpawnInfoIndex].z);

		int GroupSpawnStartIndex = asint(EmitterSpawnInfoParams[SpawnInfoIndex].w);
		GGPUExecIndex = GGPUExecIndex - GroupSpawnStartIndex;
		if ( SpawnInfoIndex == ( 8  - 1) )
		{
			Engine_ExecutionCount = int(NumSpawnedInstances) - GroupSpawnStartIndex;
		}
		else
		{
			int NextGroupSpawnStartIndex = asint(EmitterSpawnInfoParams[SpawnInfoIndex + 1].w);
			Engine_ExecutionCount = NextGroupSpawnStartIndex - GroupSpawnStartIndex;
		}
	}
#line 182 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int ExecIndex()
	{
		return GGPUExecIndex;
	}

	float4 NiagaraGPU_QuatMul(float4 Q1, float4 Q2)
	{
		float4 QOut;
		QOut.x = Q1.w*Q2.x + Q1.x*Q2.w + Q1.y*Q2.z - Q1.z*Q2.y;
		QOut.y = Q1.w*Q2.y - Q1.x*Q2.z + Q1.y*Q2.w + Q1.z*Q2.x;
		QOut.z = Q1.w*Q2.z + Q1.x*Q2.y - Q1.y*Q2.x + Q1.z*Q2.w;
		QOut.w = Q1.w*Q2.w - Q1.x*Q2.x - Q1.y*Q2.y - Q1.z*Q2.z;
		return QOut;
	}
#line 219 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 314 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	static int RandomCounterNonDeterministic = -1;

	float rand(float x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GLinearThreadId, EmitterTickCounter, GLinearThreadId, RandomCounterNonDeterministic).x * x;
	}

	float2 rand(float2 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GLinearThreadId, EmitterTickCounter, GLinearThreadId, RandomCounterNonDeterministic).xy * x;
	}

	float3 rand(float3 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GLinearThreadId, EmitterTickCounter, GLinearThreadId, RandomCounterNonDeterministic).xyz * x;
	}

	float4 rand(float4 x)
	{
		RandomCounterNonDeterministic -= 1;
		return rand4(GLinearThreadId, EmitterTickCounter, GLinearThreadId, RandomCounterNonDeterministic).xyzw * x;
	}


	int rand(int x)
	{
		RandomCounterNonDeterministic -= 1;
		return int(rand4(GLinearThreadId, EmitterTickCounter, GLinearThreadId, RandomCounterNonDeterministic).x * (x+1));
	}
#line 371 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
int hash_single(int a)
{
    int x = (a ^ 61) ^ (a >> 16);
	x += x << 3;
	x ^= x >> 4;
	x *= 0x27d4eb2d;
	x ^= x >> 15;
	return x;
}

int hash(int a, int b)
{
	return hash_single(a) ^ hash_single(b * 31);
}

float hash_float(int a, int b)
{
	return (hash(a, b) & 0x00ffffff) / 16777216.0;
}


float hash_float(float a, int b)
{
	return (hash(a * 16777216.0, b) & 0x00ffffff) / 16777216.0;
}


float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return (int) rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 503 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	uint ComponentBufferSizeRead;
	uint ComponentBufferSizeWrite;
	uint SimStart;
#line 510 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
		Buffer<float> InputFloat;
		Buffer<int> InputInt;
		Buffer< float > InputHalf;

	RWBuffer<int> RWOutputInt;
	RWBuffer<float> RWOutputFloat;
	RWBuffer< float > RWOutputHalf;

	Buffer<float> StaticInputFloat;

	RWBuffer<uint> RWInstanceCounts;
	uint ReadInstanceCountOffset;
	uint WriteInstanceCountOffset;

	Buffer<int> FreeIDList;
	RWBuffer<int> RWIDToIndexTable;





	int4 SimulationStageIterationInfo;
	float SimulationStageNormalizedIterationIndex;


	int SimulationStage_GetInstanceCount() { return SimulationStageIterationInfo.x == -1 ? SimulationStageIterationInfo.y : RWInstanceCounts[SimulationStageIterationInfo.x]; }
	int SimulationStage_GetIterationIndex() { return SimulationStageIterationInfo.z; }
	int SimulationStage_GetNumIterations() { return SimulationStageIterationInfo.w; }
	float SimulationStage_GetNormalizedIterationIndex() { return SimulationStageNormalizedIterationIndex; }


	uint3 ParticleIterationStateInfo;

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;




		int SpawnIndex = GLinearThreadId - GSpawnStartInstance;
		IDIndex = FreeIDList[SpawnIndex];
		IDAcquireTag = EmitterTickCounter;
	}

 	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;


		RWIDToIndexTable[IDIndex] = InstanceIndex;
	}





		groupshared uint GroupSharedIndex[64];
		groupshared uint GroupSharedIndex4[16];
		groupshared uint GroupSharedIndex16[4];
		groupshared uint GroupSharedIndex64;
#line 586 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int AcquireIndex(uniform int DataSetID, bool bDoAcquire)
	{

		int MustBe0[1];
		MustBe0[DataSetID] = 0;


		int PrevIdx = GSpawnStartInstance + NumSpawnedInstances;
#line 617 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			GroupSharedIndex[GGroupThreadId.x] = bDoAcquire ? 1 : 0;
			GroupMemoryBarrierWithGroupSync();


			if ((GGroupThreadId.x & 0x3) == 0)
			{
				const uint Index = GGroupThreadId.x;

				const uint ActiveCount1 = GroupSharedIndex[Index];
				const uint ActiveCount2 = ActiveCount1 + GroupSharedIndex[Index + 1];
				const uint ActiveCount3 = ActiveCount2 + GroupSharedIndex[Index + 2];
				const uint ActiveCount4 = ActiveCount3 + GroupSharedIndex[Index + 3];

				GroupSharedIndex[Index] = 0;
				GroupSharedIndex[Index + 1] = ActiveCount1;
				GroupSharedIndex[Index + 2] = ActiveCount2;
				GroupSharedIndex[Index + 3] = ActiveCount3;
				GroupSharedIndex4[Index / 4] = ActiveCount4;
			}
			GroupMemoryBarrierWithGroupSync();


			if ((GGroupThreadId.x & 0xF) == 0)
			{
				const uint Index = GGroupThreadId.x / 4;

				const uint ActiveCount1 = GroupSharedIndex4[Index];
				const uint ActiveCount2 = ActiveCount1 + GroupSharedIndex4[Index + 1];
				const uint ActiveCount3 = ActiveCount2 + GroupSharedIndex4[Index + 2];
				const uint ActiveCount4 = ActiveCount3 + GroupSharedIndex4[Index + 3];

				GroupSharedIndex4[Index] = 0;
				GroupSharedIndex4[Index + 1] = ActiveCount1;
				GroupSharedIndex4[Index + 2] = ActiveCount2;
				GroupSharedIndex4[Index + 3] = ActiveCount3;
				GroupSharedIndex16[Index / 4] = ActiveCount4;
			}
			GroupMemoryBarrierWithGroupSync();


			if ((GGroupThreadId.x & 0x3F) == 0)
			{
				const uint Index = GGroupThreadId.x / 16;
				uint RetPrevIdx = 0;

				const uint ActiveCount1 = GroupSharedIndex16[Index];
				const uint ActiveCount2 = ActiveCount1 + GroupSharedIndex16[Index + 1];

				const uint ActiveCount3 = ActiveCount2 + GroupSharedIndex16[Index + 2];
				const uint ActiveCount4 = ActiveCount3 + GroupSharedIndex16[Index + 3];


				GroupSharedIndex16[Index] = 0;
				GroupSharedIndex16[Index + 1] = ActiveCount1;

				GroupSharedIndex16[Index + 2] = ActiveCount2;
				GroupSharedIndex16[Index + 3] = ActiveCount3;

				InterlockedAdd(RWInstanceCounts[WriteInstanceCountOffset], ActiveCount4, RetPrevIdx);
#line 679 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
				GroupSharedIndex64 = RetPrevIdx;
			}
			GroupMemoryBarrierWithGroupSync();

			PrevIdx = GroupSharedIndex64 + GroupSharedIndex16[GGroupThreadId.x / 16] + GroupSharedIndex4[GGroupThreadId.x / 4] + GroupSharedIndex[GGroupThreadId.x];
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
		return PrevIdx;
	}
#line 705 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float InputDataFloat(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{



			return InputFloat[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];

	}

	int InputDataInt(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{



			return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];

	}

	bool InputDataBool(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{



			return InputInt[RegisterIdx*ComponentBufferSizeRead + InstanceIdx] == -1;

	}

	float InputDataHalf(int DataSetIndex, int RegisterIdx, int InstanceIdx)
	{



			return InputHalf[RegisterIdx*ComponentBufferSizeRead + InstanceIdx];

	}
#line 745 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value)
	{
		RWOutputFloat[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex] = Value;
	}

	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex] = Value;
	}

	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value)
	{
		RWOutputInt[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex] = Value ? -1 : 0;
	}

	void OutputDataHalf(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value)
	{
		RWOutputHalf[RegisterIndex*ComponentBufferSizeWrite + InstanceIndex] = Value;
	}

	void EnterStatScope(int ID) {}
	void ExitStatScope() {}
#line 772 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{






		if (!bStageKillsParticles)
		{
			return GLinearThreadId;
		}


		return AcquireIndex(DataSetID, bIsValid);
	}



struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};


NiagaraRandInfo MakeRandInfo()
{
	GRandomSeedOffset += 1664525u;

	NiagaraRandInfo RandInfo;
	RandInfo.Seed1 = GLinearThreadId;
	RandInfo.Seed2 = GRandomSeedOffset;
	RandInfo.Seed3 = GEmitterTickCounter;
	return RandInfo;
}

float NiagaraRandomFloat(NiagaraRandInfo RandInfo)
{
	return uint(RandInfo.Seed3) == 0xffffffff ? NiagaraInternalNoise(uint(RandInfo.Seed1), uint(RandInfo.Seed2), uint(RandInfo.Seed3)) : rand(1.0f, uint(RandInfo.Seed1), uint(RandInfo.Seed2), uint(RandInfo.Seed3));
}

int NiagaraRandomInt(NiagaraRandInfo RandInfo, int Range)
{
	float T = NiagaraRandomFloat(RandInfo);
	return int(floor(float(Range) * T));
}

float3 NiagaraRandomBaryCoord(NiagaraRandInfo RandInfo)
{
	float2 r = float2(NiagaraRandomFloat(RandInfo), NiagaraRandomFloat(RandInfo));
	float sqrt0 = sqrt(r.x);
	float sqrt1 = sqrt(r.y);
	return float3(1.0f - sqrt0, sqrt0 * (1.0 - r.y), r.y * sqrt0);
}
#line 832 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"
#line 26 "/Engine/Generated/NiagaraEmitterInstance.ush"
struct NiagaraID
{
	int Index;
	int AcquireTag;
};

	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
	int Engine_QualityLevel;
	int Engine_PaddingInt32_0;
	int Engine_PaddingInt32_1;
	int Engine_PaddingInt32_2;
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
	int PREV_Engine_QualityLevel;
	int PREV_Engine_PaddingInt32_0;
	int PREV_Engine_PaddingInt32_1;
	int PREV_Engine_PaddingInt32_2;
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
	int Engine_System_SignificanceIndex;
	int Engine_System_RandomSeed;
	int Engine_System_PaddingInt32_0;
	int Engine_System_PaddingInt32_1;
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
	int PREV_Engine_System_SignificanceIndex;
	int PREV_Engine_System_RandomSeed;
	int PREV_Engine_System_PaddingInt32_0;
	int PREV_Engine_System_PaddingInt32_1;
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float3 Engine_Owner_Position;
	int Engine_Owner_PaddingInt32_0;
	float3 Engine_Owner_Velocity;
	int Engine_Owner_PaddingInt32_1;
	float3 Engine_Owner_SystemXAxis;
	int Engine_Owner_PaddingInt32_2;
	float3 Engine_Owner_SystemYAxis;
	int Engine_Owner_PaddingInt32_3;
	float3 Engine_Owner_SystemZAxis;
	int Engine_Owner_PaddingInt32_4;
	float3 Engine_Owner_Scale;
	int Engine_Owner_PaddingInt32_5;
	float4 Engine_Owner_LWCTile;
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float3 PREV_Engine_Owner_Position;
	int PREV_Engine_Owner_PaddingInt32_0;
	float3 PREV_Engine_Owner_Velocity;
	int PREV_Engine_Owner_PaddingInt32_1;
	float3 PREV_Engine_Owner_SystemXAxis;
	int PREV_Engine_Owner_PaddingInt32_2;
	float3 PREV_Engine_Owner_SystemYAxis;
	int PREV_Engine_Owner_PaddingInt32_3;
	float3 PREV_Engine_Owner_SystemZAxis;
	int PREV_Engine_Owner_PaddingInt32_4;
	float3 PREV_Engine_Owner_Scale;
	int PREV_Engine_Owner_PaddingInt32_5;
	float4 PREV_Engine_Owner_LWCTile;
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_InstanceSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_InstanceSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
cbuffer FNiagaraExternalParameters
{
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DMeshRadiusScale;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_MiddlePositionOfNeighbors;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DSphereCenterScale;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_MiddleRotationOfNeighbors;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DArrowScale;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_WorldSpaceCollisionCenter;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DPointPositionScale;
	int Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_NumSeparationParticlesAtRadius;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DPointPosition;
	float4 Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_CrabScale;
	float Constants_Emitter_InitializeParticle_LifetimeMin;
	float Constants_Emitter_InitializeParticle_LifetimeMax;
	float Constants_Emitter_InitializeParticle_UniformSpriteSize;
	float Constants_Emitter_InitializeParticle_MeshUniformScale;
	float4 Constants_Emitter_InitializeParticle_PositionOffset;
	float Emitter_DistanceTraveled;
	float Constants_Emitter_CrabsInitiate_GrabMinScale;
	float Constants_Emitter_CrabsInitiate_GrabRandomScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DRandomOrientationColor;
	float4 Constants_Emitter_CrabsInitiate_AS_DRandomOrientationScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DRandomOrientation;
	float4 Constants_Emitter_CrabsInitiate_AS_DSeparationOrientationColor;
	float4 Constants_Emitter_CrabsInitiate_AS_DSeparationOrientationScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DSeparationOrientation;
	float4 Constants_Emitter_CrabsInitiate_AS_DCohesionOrientationColor;
	float4 Constants_Emitter_CrabsInitiate_AS_DCohesionOrientationScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DCohesionOrientation;
	float4 Constants_Emitter_CrabsInitiate_AS_DTargetOrientationColor;
	float4 Constants_Emitter_CrabsInitiate_AS_DTargetOrientationScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DTargetOrientation;
	float4 Constants_Emitter_CrabsInitiate_AS_DObstacleOrientationColor;
	float4 Constants_Emitter_CrabsInitiate_AS_DObstacleOrientationScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DObstacleOrientation;
	float4 Constants_Emitter_CrabsInitiate_AS_DEscapeOrientationColor;
	float4 Constants_Emitter_CrabsInitiate_AS_DEscapeOrientationScale;
	float4 Constants_Emitter_CrabsInitiate_AS_DEscapeOrientation;
	float Constants_Emitter_CrabsInitiate_AS_CrabLife;
	float Constants_Emitter_CrabsInitiate_Radius;
	float Constants_Emitter_CrabsInitiate_SeparationRadius;
	int Constants_Emitter_ShapeLocation_RandomSeed;
	float Constants_Emitter_ShapeLocation_SurfaceOnlyBandThickness;
	float4 Constants_Emitter_ShapeLocation_BoxMidpoint;
	float4 Constants_Emitter_ShapeLocation_BoxSize;
	float4 Constants_Emitter_ShapeLocation_NonUniformScale;
	float4 Constants_Emitter_ShapeLocation_YawASC47PitchASC47Roll;
	float4 Constants_Emitter_ShapeLocation_RotationAxis;
	float Constants_Emitter_ShapeLocation_RotationAngle;
	float4 Constants_Emitter_ShapeLocation_AdditionalYawASC47PitchASC47Roll;
	int Constants_Emitter_ShapeLocation_SpawnGroupMask;
	float4 Constants_Emitter_ConstrainVectorToCone_ConeAxis;
	float4 Constants_Emitter_ConstrainVectorToCone_VECTOR_VAR;
	float Constants_Emitter_ConstrainVectorToCone_MaxAngle;
	float4 Constants_Emitter_ConstrainVectorToCone_FallbackOffsetVector;
	int Emitter_ExecutionState;
	int System_ExecutionState;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float4 Constants_Emitter_RandomRangeLinearColor001_Minimum;
	float4 Constants_Emitter_RandomRangeLinearColor001_Maximum;
	int Constants_Emitter_RandomRangeLinearColor001_RandomSeed;
	int Constants_Emitter_RandomRangeLinearColor_RandomSeed;
	float4 Constants_Emitter_Color_ScaleColor;
	float Constants_Emitter_Color_ScaleAlpha;
	float Emitter_AlphaScale;
	float4 NPC_FX_CrabCollection_PlayerLocation;
	float Constants_Emitter_AS_CrabUnburyState_RateChange;
	float Constants_Emitter_AS_CrabUnburyState_TimeToIdle;
	float Constants_Emitter_AS_CrabIdleState_MinRangeRandomToMove;
	float Constants_Emitter_AS_CrabIdleState_MaxRangeRandomToMove;
	float Constants_Emitter_AS_CrabMoveState_MinRangeRandomToIdle;
	float Constants_Emitter_AS_CrabMoveState_MaxRangeRandomToIdle;
	float Constants_Emitter_AS_CrabEscapeState_EscapeDistance;
	float Constants_Emitter_AS_CrabBurriedState_RateofChange;
	float Constants_Emitter_AS_CrabBurriedState_DelayTime;
	float Constants_Emitter_AS_SpeedUpdate_RateOfSpeedChange;
	float Constants_Emitter_AS_MovementUpdate_FloatMin;
	float Constants_Emitter_AS_MovementUpdate_FloatMax;
	float Constants_Emitter_AS_MovementUpdate_RotationRate;
	float Constants_Emitter_AS_MovementUpdate_RandomFactor;
	float Constants_Emitter_AS_MovementUpdate_GroupFactor;
	float Constants_Emitter_AS_MovementUpdate_ObstacleFactor;
	float Constants_Emitter_AS_MovementUpdate_SeparationFactor;
	float Constants_Emitter_CrabAnimGraph_SpeedAnimMove;
	float Constants_Emitter_CrabAnimGraph_SpeedAnimIdle;
	float Constants_Emitter_CrabAnimGraph_SpeedAnimBury;
	float Emitter_SpawnRate;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DMeshRadiusScale;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_MiddlePositionOfNeighbors;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DSphereCenterScale;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_MiddleRotationOfNeighbors;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DArrowScale;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_WorldSpaceCollisionCenter;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DPointPositionScale;
	int PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_NumSeparationParticlesAtRadius;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DPointPosition;
	float4 PREV_Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_CrabScale;
	float PREV_Constants_Emitter_InitializeParticle_LifetimeMin;
	float PREV_Constants_Emitter_InitializeParticle_LifetimeMax;
	float PREV_Constants_Emitter_InitializeParticle_UniformSpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_MeshUniformScale;
	float4 PREV_Constants_Emitter_InitializeParticle_PositionOffset;
	float PREV_Emitter_DistanceTraveled;
	float PREV_Constants_Emitter_CrabsInitiate_GrabMinScale;
	float PREV_Constants_Emitter_CrabsInitiate_GrabRandomScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DRandomOrientationColor;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DRandomOrientationScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DRandomOrientation;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DSeparationOrientationColor;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DSeparationOrientationScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DSeparationOrientation;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DCohesionOrientationColor;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DCohesionOrientationScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DCohesionOrientation;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DTargetOrientationColor;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DTargetOrientationScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DTargetOrientation;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DObstacleOrientationColor;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DObstacleOrientationScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DObstacleOrientation;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DEscapeOrientationColor;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DEscapeOrientationScale;
	float4 PREV_Constants_Emitter_CrabsInitiate_AS_DEscapeOrientation;
	float PREV_Constants_Emitter_CrabsInitiate_AS_CrabLife;
	float PREV_Constants_Emitter_CrabsInitiate_Radius;
	float PREV_Constants_Emitter_CrabsInitiate_SeparationRadius;
	int PREV_Constants_Emitter_ShapeLocation_RandomSeed;
	float PREV_Constants_Emitter_ShapeLocation_SurfaceOnlyBandThickness;
	float4 PREV_Constants_Emitter_ShapeLocation_BoxMidpoint;
	float4 PREV_Constants_Emitter_ShapeLocation_BoxSize;
	float4 PREV_Constants_Emitter_ShapeLocation_NonUniformScale;
	float4 PREV_Constants_Emitter_ShapeLocation_YawASC47PitchASC47Roll;
	float4 PREV_Constants_Emitter_ShapeLocation_RotationAxis;
	float PREV_Constants_Emitter_ShapeLocation_RotationAngle;
	float4 PREV_Constants_Emitter_ShapeLocation_AdditionalYawASC47PitchASC47Roll;
	int PREV_Constants_Emitter_ShapeLocation_SpawnGroupMask;
	float4 PREV_Constants_Emitter_ConstrainVectorToCone_ConeAxis;
	float4 PREV_Constants_Emitter_ConstrainVectorToCone_VECTOR_VAR;
	float PREV_Constants_Emitter_ConstrainVectorToCone_MaxAngle;
	float4 PREV_Constants_Emitter_ConstrainVectorToCone_FallbackOffsetVector;
	int PREV_Emitter_ExecutionState;
	int PREV_System_ExecutionState;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float4 PREV_Constants_Emitter_RandomRangeLinearColor001_Minimum;
	float4 PREV_Constants_Emitter_RandomRangeLinearColor001_Maximum;
	int PREV_Constants_Emitter_RandomRangeLinearColor001_RandomSeed;
	int PREV_Constants_Emitter_RandomRangeLinearColor_RandomSeed;
	float4 PREV_Constants_Emitter_Color_ScaleColor;
	float PREV_Constants_Emitter_Color_ScaleAlpha;
	float PREV_Emitter_AlphaScale;
	float4 PREV_NPC_FX_CrabCollection_PlayerLocation;
	float PREV_Constants_Emitter_AS_CrabUnburyState_RateChange;
	float PREV_Constants_Emitter_AS_CrabUnburyState_TimeToIdle;
	float PREV_Constants_Emitter_AS_CrabIdleState_MinRangeRandomToMove;
	float PREV_Constants_Emitter_AS_CrabIdleState_MaxRangeRandomToMove;
	float PREV_Constants_Emitter_AS_CrabMoveState_MinRangeRandomToIdle;
	float PREV_Constants_Emitter_AS_CrabMoveState_MaxRangeRandomToIdle;
	float PREV_Constants_Emitter_AS_CrabEscapeState_EscapeDistance;
	float PREV_Constants_Emitter_AS_CrabBurriedState_RateofChange;
	float PREV_Constants_Emitter_AS_CrabBurriedState_DelayTime;
	float PREV_Constants_Emitter_AS_SpeedUpdate_RateOfSpeedChange;
	float PREV_Constants_Emitter_AS_MovementUpdate_FloatMin;
	float PREV_Constants_Emitter_AS_MovementUpdate_FloatMax;
	float PREV_Constants_Emitter_AS_MovementUpdate_RotationRate;
	float PREV_Constants_Emitter_AS_MovementUpdate_RandomFactor;
	float PREV_Constants_Emitter_AS_MovementUpdate_GroupFactor;
	float PREV_Constants_Emitter_AS_MovementUpdate_ObstacleFactor;
	float PREV_Constants_Emitter_AS_MovementUpdate_SeparationFactor;
	float PREV_Constants_Emitter_CrabAnimGraph_SpeedAnimMove;
	float PREV_Constants_Emitter_CrabAnimGraph_SpeedAnimIdle;
	float PREV_Constants_Emitter_CrabAnimGraph_SpeedAnimBury;
	float PREV_Emitter_SpawnRate;
}

struct FParamMap0_Transient
{
	float3 AdvectionVelocity;
	bool DragIgnoreMass;
	bool FirstFrame;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_System
{
	int ExecutionState;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ShapeLocation
{
	float3 ApplyOwnerScale;
	bool InvertRotationQuaternion;
	int RotationCoordinateSpace;
	float4x4 RotationMatrix;
	float4 RotationQuaternion;
	float3 ShapeOrigin;
	int SurfaceExpansionMode;
};

struct FParamMap0_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles
{
	int NewState;
};

struct FParamMap0_SetVariables_67C60A234E3B58728099B3B2E6302A90
{
	FParamMap0_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles Particles;
};

struct FParamMap0_RandomRangeLinearColor
{
	float4 Maximum;
	float4 Minimum;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	bool LetInfinitelyLivedParticlesDieWhenEmitterDeactivates;
	float Lifetime;
	bool LoopParticlesLifetime;
};

struct FParamMap0_Particles_ShapeLocation
{
	float3 ShapeBitangent;
	float3 ShapeNormal;
	float3 ShapePosition;
	float3 ShapeTangent;
	float3 ShapeVector;
};

struct FParamMap0_Particles_Previous
{
	float3 AS_DArrowScale;
	float4 AS_DCohesionOrientation;
	float3 AS_DCohesionOrientationScale;
	float4 AS_DEscapeOrientation;
	float3 AS_DEscapeOrientationScale;
	float3 AS_DMeshRadiusScale;
	float4 AS_DObstacleOrientation;
	float3 AS_DObstacleOrientationScale;
	float3 AS_DPointPosition;
	float3 AS_DPointPositionScale;
	float4 AS_DRandomOrientation;
	float3 AS_DRandomOrientationScale;
	float4 AS_DSeparationOrientation;
	float3 AS_DSeparationOrientationScale;
	float3 AS_DSphereCenterScale;
	float4 AS_DTargetOrientation;
	float3 AS_DTargetOrientationScale;
	float3 CrabScale;
	float4 MeshOrientation;
	float3 Position;
	float2 SpriteSize;
	float3 Velocity;
};

struct FParamMap0_Particles_Presolve
{
	float3 PhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_Particles_AS_SpeedUpdate_InterpolateOverTime_Float
{
	float MovingAverage;
};

struct FParamMap0_Particles_AS_SpeedUpdate
{
	FParamMap0_Particles_AS_SpeedUpdate_InterpolateOverTime_Float InterpolateOverTime_Float;
};

struct FParamMap0_Particles_AS_MovementUpdate_InterpolateOverTime_Quaternion004
{
	float4 MovingAverage;
};

struct FParamMap0_Particles_AS_MovementUpdate_InterpolateOverTime_Quaternion003
{
	float4 MovingAverage;
};

struct FParamMap0_Particles_AS_MovementUpdate_InterpolateOverTime_Quaternion002
{
	float4 MovingAverage;
};

struct FParamMap0_Particles_AS_MovementUpdate
{
	FParamMap0_Particles_AS_MovementUpdate_InterpolateOverTime_Quaternion002 InterpolateOverTime_Quaternion002;
	FParamMap0_Particles_AS_MovementUpdate_InterpolateOverTime_Quaternion003 InterpolateOverTime_Quaternion003;
	FParamMap0_Particles_AS_MovementUpdate_InterpolateOverTime_Quaternion004 InterpolateOverTime_Quaternion004;
};

struct FParamMap0_Particles_AS_CrabUnburyState_IncrementOverTime
{
	float Counter;
};

struct FParamMap0_Particles_AS_CrabUnburyState
{
	FParamMap0_Particles_AS_CrabUnburyState_IncrementOverTime IncrementOverTime;
};

struct FParamMap0_Particles_AS_CrabMoveState_ChangeStateInTime
{
	float Counter;
};

struct FParamMap0_Particles_AS_CrabMoveState
{
	FParamMap0_Particles_AS_CrabMoveState_ChangeStateInTime ChangeStateInTime;
};

struct FParamMap0_Particles_AS_CrabIdleState_ChangeStateInTime
{
	float Counter;
};

struct FParamMap0_Particles_AS_CrabIdleState
{
	FParamMap0_Particles_AS_CrabIdleState_ChangeStateInTime ChangeStateInTime;
};

struct FParamMap0_Particles_AS_CrabBurriedState_IncrementOverTime
{
	float Counter;
};

struct FParamMap0_Particles_AS_CrabBurriedState
{
	FParamMap0_Particles_AS_CrabBurriedState_IncrementOverTime IncrementOverTime;
};

struct FParamMap0_Particles
{
	float Age;
	float AS_AnimBury;
	float AS_AnimBuryAlpha;
	float AS_AnimIdle;
	float AS_AnimIdleAlpha;
	float AS_AnimMove;
	float AS_AnimMoveAlpha;
	float AS_AnimUnbury;
	float AS_AnimUnburyAlpha;
	FParamMap0_Particles_AS_CrabBurriedState AS_CrabBurriedState;
	FParamMap0_Particles_AS_CrabIdleState AS_CrabIdleState;
	float AS_CrabLife;
	FParamMap0_Particles_AS_CrabMoveState AS_CrabMoveState;
	FParamMap0_Particles_AS_CrabUnburyState AS_CrabUnburyState;
	float3 AS_DArrowScale;
	float4 AS_DCohesionOrientation;
	float4 AS_DCohesionOrientationColor;
	float3 AS_DCohesionOrientationScale;
	float4 AS_DEscapeOrientation;
	float4 AS_DEscapeOrientationColor;
	float3 AS_DEscapeOrientationScale;
	float3 AS_DMeshRadiusScale;
	float4 AS_DObstacleOrientation;
	float4 AS_DObstacleOrientationColor;
	float3 AS_DObstacleOrientationScale;
	float3 AS_DPointPosition;
	float3 AS_DPointPositionScale;
	float4 AS_DRandomOrientation;
	float4 AS_DRandomOrientationColor;
	float3 AS_DRandomOrientationScale;
	float4 AS_DSeparationOrientation;
	float4 AS_DSeparationOrientationColor;
	float3 AS_DSeparationOrientationScale;
	float3 AS_DSphereCenterScale;
	float4 AS_DTargetOrientation;
	float4 AS_DTargetOrientationColor;
	float3 AS_DTargetOrientationScale;
	FParamMap0_Particles_AS_MovementUpdate AS_MovementUpdate;
	bool AS_ObstacleNear;
	FParamMap0_Particles_AS_SpeedUpdate AS_SpeedUpdate;
	bool AS_WantBury;
	float4 Color;
	float CounterBury;
	float CounterIdle;
	float CounterMove;
	float CrabBuryAlpha;
	float3 CrabScale;
	float CurrentSpeed;
	float DistanceToCharacter;
	float DistanceTraveled;
	float4 DynamicMaterialParameter;
	float4 DynamicMaterialParameter1;
	NiagaraID ID;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float3 MiddlePositionOfNeighbors;
	float4 MiddleRotationOfNeighbors;
	float NeighborRadius;
	int NewState;
	float NormalizedAge;
	int NumSeparationParticlesAtRadius;
	float3 Position;
	FParamMap0_Particles_Presolve Presolve;
	FParamMap0_Particles_Previous Previous;
	float RibbonUVDistance;
	float3 Scale;
	bool SeparationActive;
	float SeparationRadius;
	FParamMap0_Particles_ShapeLocation ShapeLocation;
	float2 SpriteSize;
	int State;
	float StateDuration;
	float StateTimeTamp;
	float3 SurfaceNormal;
	float TargetSpeed;
	float TESTFloat;
	int UniqueID;
	float3 Velocity;
	float3 WorldSpaceCollisionCenter;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_ConstrainVectorToCone
{
	bool InvalidVectors;
	float3 VECTOR_VAR;
};

struct FParamMap0_OUTPUT_VAR_AS_CrabUnburyState_IncrementOverTime
{
	float Change;
};

struct FParamMap0_OUTPUT_VAR_AS_CrabUnburyState
{
	FParamMap0_OUTPUT_VAR_AS_CrabUnburyState_IncrementOverTime IncrementOverTime;
};

struct FParamMap0_OUTPUT_VAR_AS_CrabBurriedState_IncrementOverTime
{
	float Change;
};

struct FParamMap0_OUTPUT_VAR_AS_CrabBurriedState
{
	FParamMap0_OUTPUT_VAR_AS_CrabBurriedState_IncrementOverTime IncrementOverTime;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AS_CrabBurriedState AS_CrabBurriedState;
	FParamMap0_OUTPUT_VAR_AS_CrabUnburyState AS_CrabUnburyState;
	FParamMap0_OUTPUT_VAR_ConstrainVectorToCone ConstrainVectorToCone;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_NPC_FX_CrabCollection
{
	float3 PlayerLocation;
};

struct FParamMap0_NPC
{
	FParamMap0_NPC_FX_CrabCollection FX_CrabCollection;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float3 AdvectionVelocity;
	float DeltaTime;
	bool DragIgnoreMass;
	float3 DragVelocity;
	float InverseDeltaTime;
	float InverseMass;
	float Mass;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_Local_ShapeLocation_TransformStack_Rotation
{
	float3 LocalTransformBitangent;
	float3 LocalTransformNormal;
	float3 LocalTransformTangent;
	float3 LocalTransformVector;
};

struct FParamMap0_Local_ShapeLocation
{
	float3 BoxNormal;
	float3 BoxTangent;
	float3 BoxVector;
	float3 InverseScaleFactor;
	float3 OffsetVector;
	float3 ScaleFactor;
	float3 ShapeBitangent;
	float3 ShapeNormal;
	float3 ShapePosition;
	float3 ShapeTangent;
	float3 ShapeVector;
	FParamMap0_Local_ShapeLocation_TransformStack_Rotation TransformStack_Rotation;
};

struct FParamMap0_Local_InitializeParticle
{
	float InitRIbbonDistance;
};

struct FParamMap0_Local
{
	FParamMap0_Local_InitializeParticle InitializeParticle;
	FParamMap0_Local_ShapeLocation ShapeLocation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float MaterialRandom;
	int PositionOffsetCoordinateSpace;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int RandomSeed;
	int SignificanceIndex;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float4 LWCTile;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	int PaddingInt32_3;
	int PaddingInt32_4;
	int PaddingInt32_5;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int InstanceSeed;
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	int QualityLevel;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float AlphaScale;
	float DistanceTraveled;
	int ExecutionState;
	int RandomSeed;
	float SpawnRate;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	float Index1Param1;
	float Index1Param2;
	float Index1Param3;
	float Index1Param4;
	bool Param0WriteEnabled;
	bool Param0WriteEnabled1;
	bool Param1WriteEnabled;
	bool Param1WriteEnabled1;
	bool Param2WriteEnabled;
	bool Param2WriteEnabled1;
	bool Param3WriteEnabled;
	bool Param3WriteEnabled1;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_ColorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_Color
{
	float4 Color;
};

struct FParamMap0_AS_EscapeCalculation
{
	float3 PlayerLocation;
};

struct FParamMap0_Array_ShapeLocation
{
	int ShapeBitangent;
	int ShapeNormal;
	int ShapePosition;
	int ShapeTangent;
	int ShapeVector;
};

struct FParamMap0_Array_Previous
{
	int AS_DArrowScale;
	int AS_DCohesionOrientation;
	int AS_DCohesionOrientationScale;
	int AS_DEscapeOrientation;
	int AS_DEscapeOrientationScale;
	int AS_DMeshRadiusScale;
	int AS_DObstacleOrientation;
	int AS_DObstacleOrientationScale;
	int AS_DPointPosition;
	int AS_DPointPositionScale;
	int AS_DRandomOrientation;
	int AS_DRandomOrientationScale;
	int AS_DSeparationOrientation;
	int AS_DSeparationOrientationScale;
	int AS_DSphereCenterScale;
	int AS_DTargetOrientation;
	int AS_DTargetOrientationScale;
	int CrabScale;
	int MeshOrientation;
	int Position;
	int SpriteSize;
	int Velocity;
};

struct FParamMap0_Array_Presolve
{
	int PhysicsForce;
	int Position;
	int Velocity;
};

struct FParamMap0_Array_AS_SpeedUpdate_InterpolateOverTime_Float
{
	int MovingAverage;
};

struct FParamMap0_Array_AS_SpeedUpdate
{
	FParamMap0_Array_AS_SpeedUpdate_InterpolateOverTime_Float InterpolateOverTime_Float;
};

struct FParamMap0_Array_AS_MovementUpdate_InterpolateOverTime_Quaternion004
{
	int MovingAverage;
};

struct FParamMap0_Array_AS_MovementUpdate_InterpolateOverTime_Quaternion003
{
	int MovingAverage;
};

struct FParamMap0_Array_AS_MovementUpdate_InterpolateOverTime_Quaternion002
{
	int MovingAverage;
};

struct FParamMap0_Array_AS_MovementUpdate
{
	FParamMap0_Array_AS_MovementUpdate_InterpolateOverTime_Quaternion002 InterpolateOverTime_Quaternion002;
	FParamMap0_Array_AS_MovementUpdate_InterpolateOverTime_Quaternion003 InterpolateOverTime_Quaternion003;
	FParamMap0_Array_AS_MovementUpdate_InterpolateOverTime_Quaternion004 InterpolateOverTime_Quaternion004;
};

struct FParamMap0_Array_AS_CrabUnburyState_IncrementOverTime
{
	int Counter;
};

struct FParamMap0_Array_AS_CrabUnburyState
{
	FParamMap0_Array_AS_CrabUnburyState_IncrementOverTime IncrementOverTime;
};

struct FParamMap0_Array_AS_CrabMoveState_ChangeStateInTime
{
	int Counter;
};

struct FParamMap0_Array_AS_CrabMoveState
{
	FParamMap0_Array_AS_CrabMoveState_ChangeStateInTime ChangeStateInTime;
};

struct FParamMap0_Array_AS_CrabIdleState_ChangeStateInTime
{
	int Counter;
};

struct FParamMap0_Array_AS_CrabIdleState
{
	FParamMap0_Array_AS_CrabIdleState_ChangeStateInTime ChangeStateInTime;
};

struct FParamMap0_Array_AS_CrabBurriedState_IncrementOverTime
{
	int Counter;
};

struct FParamMap0_Array_AS_CrabBurriedState
{
	FParamMap0_Array_AS_CrabBurriedState_IncrementOverTime IncrementOverTime;
};

struct FParamMap0_Array
{
	int Age;
	int AS_AnimBury;
	int AS_AnimBuryAlpha;
	int AS_AnimIdle;
	int AS_AnimIdleAlpha;
	int AS_AnimMove;
	int AS_AnimMoveAlpha;
	int AS_AnimUnbury;
	int AS_AnimUnburyAlpha;
	FParamMap0_Array_AS_CrabBurriedState AS_CrabBurriedState;
	FParamMap0_Array_AS_CrabIdleState AS_CrabIdleState;
	int AS_CrabLife;
	FParamMap0_Array_AS_CrabMoveState AS_CrabMoveState;
	FParamMap0_Array_AS_CrabUnburyState AS_CrabUnburyState;
	int AS_DArrowScale;
	int AS_DCohesionOrientation;
	int AS_DCohesionOrientationColor;
	int AS_DCohesionOrientationScale;
	int AS_DEscapeOrientation;
	int AS_DEscapeOrientationColor;
	int AS_DEscapeOrientationScale;
	int AS_DMeshRadiusScale;
	int AS_DObstacleOrientation;
	int AS_DObstacleOrientationColor;
	int AS_DObstacleOrientationScale;
	int AS_DPointPosition;
	int AS_DPointPositionScale;
	int AS_DRandomOrientation;
	int AS_DRandomOrientationColor;
	int AS_DRandomOrientationScale;
	int AS_DSeparationOrientation;
	int AS_DSeparationOrientationColor;
	int AS_DSeparationOrientationScale;
	int AS_DSphereCenterScale;
	int AS_DTargetOrientation;
	int AS_DTargetOrientationColor;
	int AS_DTargetOrientationScale;
	FParamMap0_Array_AS_MovementUpdate AS_MovementUpdate;
	int AS_ObstacleNear;
	FParamMap0_Array_AS_SpeedUpdate AS_SpeedUpdate;
	int AS_WantBury;
	int Color;
	int CounterBury;
	int CounterIdle;
	int CounterMove;
	int CrabBuryAlpha;
	int CrabScale;
	int CurrentSpeed;
	int DistanceToCharacter;
	int DistanceTraveled;
	int DynamicMaterialParameter;
	int DynamicMaterialParameter1;
	int ID;
	int Lifetime;
	int Mass;
	int MaterialRandom;
	int MeshOrientation;
	int MiddlePositionOfNeighbors;
	int MiddleRotationOfNeighbors;
	int NeighborRadius;
	int NewState;
	int NormalizedAge;
	int NumSeparationParticlesAtRadius;
	int Position;
	FParamMap0_Array_Presolve Presolve;
	FParamMap0_Array_Previous Previous;
	int RibbonUVDistance;
	int Scale;
	int SeparationActive;
	int SeparationRadius;
	FParamMap0_Array_ShapeLocation ShapeLocation;
	int SpriteSize;
	int State;
	int StateDuration;
	int StateTimeTamp;
	int SurfaceNormal;
	int TargetSpeed;
	int TESTFloat;
	int UniqueID;
	int Velocity;
	int WorldSpaceCollisionCenter;
};

struct FParamMap0
{
	FParamMap0_Array Array;
	FParamMap0_AS_EscapeCalculation AS_EscapeCalculation;
	FParamMap0_Color Color;
	FParamMap0_ColorFromCurve ColorFromCurve;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_NPC NPC;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_RandomRangeLinearColor RandomRangeLinearColor;
	FParamMap0_SetVariables_67C60A234E3B58728099B3B2E6302A90 SetVariables_67C60A234E3B58728099B3B2E6302A90;
	FParamMap0_ShapeLocation ShapeLocation;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
};

struct FSimulationContext
{

	FParamMap0 MapSpawn;


	FParamMap0 MapUpdate;

};

static float HackSpawnInterp = 1.0;
void SetVariables_67C60A234E3B58728099B3B2E6302A90_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context);
void NiagaraScript_14261_Particle_Func_(float3 In_Engine_Owner_Position, out float3 Out_SimulationPosition, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void CustomHlsl848CA20B47329CCB8F5FDFB49F631DDD_Func_(float In_Pitch, float In_Roll, float In_Yaw, out float4 Out_RotationQuat);
void NiagaraScript_14255_Func_(float In_Yaw, float In_Pitch, float In_Roll, out float4 Out_Quaternion, inout FSimulationContext Context);
void CrabsInitiate_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14239_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, out bool Out_LocalToWorld, inout FSimulationContext Context);
void NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_(float3 In_Position, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, float4x4 In_Engine_Owner_SystemLocalToWorld, float4x4 In_Engine_Owner_SystemWorldToLocal, float4x4 In_Engine_Owner_SystemLocalToWorldNoScale, float4x4 In_Engine_Owner_SystemWorldToLocalNoScale, out float3 Out_Position, inout FSimulationContext Context);
void QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(float3 In_FieldSamplePosWorld, out float Out_DistanceToNearestSurface, out float3 Out_FieldGradient, out bool Out_IsDistanceFieldValid);
void NiagaraScript_14213_Particle_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_(float3 In_SamplePosition, out float3 Out_NewPosition, out float3 Out_VectortoNearestSurface, out float Out_DistanceToSurface, out bool Out_DistanceFieldIsValid, inout FSimulationContext Context);
void CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_(float3 In_SamplePosition, out float3 Out_NewPosition, out float3 Out_VectortoNearestSurface, out float Out_DistanceToSurface, out bool Out_DistanceFieldIsValid, inout FSimulationContext Context);
void CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_(float3 In_SamplePosition, out float3 Out_NewPosition, out float3 Out_VectortoNearestSurface, out float Out_DistanceToSurface, out bool Out_DistanceFieldIsValid, inout FSimulationContext Context);
void NiagaraScript_14250_Particle_Func_(float4 In_FLOAT4_VAR, int In_TargetChannel, out float Out_NewOutput, inout FSimulationContext Context);
void NiagaraScript_14249_Particle_Func_(float3 In_VECTOR_VAR, float4x4 In_Engine_Owner_SystemWorldToLocal, float4 In_Engine_Owner_LWCTile, out float3 Out_Position, inout FSimulationContext Context);
void NiagaraScript_14253_Particle_Func_(float3 In_Position, float4x4 In_Engine_Owner_SystemLocalToWorld, float4 In_Engine_Owner_LWCTile, out float3 Out_Vector, inout FSimulationContext Context);
void CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_(float3 In_SamplePosition, float In_GradientOffset, out float3 Out_Ouput, out bool Out_ValidNormal, inout FSimulationContext Context);
void CrabsProjectPosition_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float3 In_RangeMin, float3 In_RangeMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float3 Out_RandomValue, out bool Out_IsDeterministic, inout FSimulationContext Context);
void NiagaraScript_14231_Func_(float3 In_VECTOR_VAR, out float3 Out_Result, inout FSimulationContext Context);
void NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_(float3 In_Size, float In_SurfaceThickness, int In_Seed, float3 In_Midpoint, out float3 Out_Output, out float3 Out_Normal, out float3 Out_Tangent, inout FSimulationContext Context);
void ShapeLocation_TransformStack_Rotation_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void ShapeLocation_TransformStack_Rotation_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void ShapeLocation_TransformStack_Rotation_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void ShapeLocation_TransformStack_Rotation_TransformVector004_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void ShapeLocation_TransformStack_Rotation_Emitter_Func_(float3 In_InputVector, int In_RotationCoordinateSpace, float3 In_YawASC47PitchASC47Roll, float3 In_RotationAxis, float In_RotationAngle, float4 In_RotationQuaternion, bool In_InvertRotationQuaternion, float3 In_AdditionalYawASC47PitchASC47Roll, float4x4 In_RotationMatrix, float3 In_InputNormal, float3 In_InputTangent, float3 In_InputBitangent, out float3 Out_TransformedVector, out float3 Out_TransformedNormal, out float3 Out_TransformedTangent, out float3 Out_TransformedBitangent, inout FSimulationContext Context);
void ShapeLocation_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14212_Func_(float In_Angle, float3 In_VectorToRotate, float3 In_RotationAxis, out float3 Out_Vector, inout FSimulationContext Context);
void NiagaraScript_14211_Func_(float3 In_ConeAxis, float3 In_ProposedVector, float In_MaxAngle, float3 In_FallbackOffsetVector, out float3 Out_OutputVector, out bool Out_InvalidInputVectors, inout FSimulationContext Context);
void ConstrainVectorToCone_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14298_Particle_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleColorCurve_Emitter_ColorFromCurve_ColorCurve(float In_X, out float4 Out_Value);
void ColorFromCurve_Emitter_Func_(out float4 Out_Value, inout FSimulationContext Context);
void NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context);
void RandomRangeLinearColor001_Emitter_Func_(out float4 Out_NewOutput001, inout FSimulationContext Context);
void RandomRangeLinearColor_Emitter_Func_(out float4 Out_NewOutput001, inout FSimulationContext Context);
void Color_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14275_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context);
void FastMatrixToQuaternion_FastPathLibrary(float4x4 In_Mat, out float4 Out_Quat);
void NiagaraScript_14245_Func_(float4x4 In_NewInput, out float4 Out_Quat, inout FSimulationContext Context);
void NiagaraScript_14244_Func_(float3 In_XVector, float3 In_YVector, float3 In_ZVector, out float4 Out_Quat, inout FSimulationContext Context);
void NiagaraScript_14272_Particle_XVectorisDominant_true_Func_(float3 In_XAxis, float3 In_ZAxis, out float4 Out_Quat, out float3 Out_X, out float3 Out_Y, out float3 Out_Z, inout FSimulationContext Context);
void AS_EscapeCalculation_Emitter_Func_(inout FSimulationContext Context);
void AS_CrabUnburyState_IncrementOverTime_Emitter_Func_(float In_TickDelta, float In_RateofChange, bool In_Enabled, out float Out_Counter, out float Out_Change, inout FSimulationContext Context);
void AS_CrabUnburyState_Emitter_Func_(inout FSimulationContext Context);
void AS_CrabIdleState_ChangeStateInTime_Emitter_Func_(int In_State, int In_IfState, int In_ThenState, float In_Step, float In_MinRange, float In_MaxRange, out int Out_OutState, out float Out_Counter, inout FSimulationContext Context);
void AS_CrabIdleState_Emitter_Func_(inout FSimulationContext Context);
void AS_CrabMoveState_ChangeStateInTime_Emitter_Func_(int In_State, int In_IfState, int In_ThenState, float In_Step, float In_MinRange, float In_MaxRange, out int Out_OutState, out float Out_Counter, inout FSimulationContext Context);
void AS_CrabMoveState_Emitter_Func_(inout FSimulationContext Context);
void AS_CrabEscapeState_Emitter_Func_(inout FSimulationContext Context);
void AS_CrabBuryState_Emitter_Func_(inout FSimulationContext Context);
void AS_CrabBurriedState_IncrementOverTime_Emitter_Func_(float In_TickDelta, float In_RateofChange, bool In_Enabled, out float Out_Counter, out float Out_Change, inout FSimulationContext Context);
void AS_CrabBurriedState_Emitter_Func_(inout FSimulationContext Context);
void AS_SpeedUpdate_InterpolateOverTime_Float_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float In_InitializationValue, float In_CurrentParameterMapValue, out float Out_Value, inout FSimulationContext Context);
void CustomHlsl04C64086480DA644FCC88485B815E918_Func_(float In_InFloat, out float Out_OutFloat);
void NiagaraScript_14227_Particle_Func_(float In_Value, out float Out_ClampedValue, inout FSimulationContext Context);
void AS_SpeedUpdate_InterpolateOverTime_Float_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float In_TargetValue, float In_InitialValue, out float Out_MovingAverage, inout FSimulationContext Context);
void AS_SpeedUpdate_Emitter_Func_(inout FSimulationContext Context);
void CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_(float4 In_Q, out float3 Out_Vector);
void CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_(float4 In_Q, out float3 Out_Vector);
void CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_(float4 In_Q, out float3 Out_Vector);
void NiagaraScript_14273_Particle_Func_(float4 In_Quat, bool In_NormalizeVectors, out float3 Out_X, out float3 Out_Y, out float3 Out_Z, inout FSimulationContext Context);
void NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context);
void NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_RangeMin, float In_RangeMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomValue, out bool Out_IsDeterministic, inout FSimulationContext Context);
void NiagaraScript_14272_Particle_XVectorisDominant_false_Func_(float3 In_XAxis, float3 In_ZAxis, out float4 Out_Quat, out float3 Out_X, out float3 Out_Y, out float3 Out_Z, inout FSimulationContext Context);
void AS_MovementUpdate_InterpolateOverTime_Quaternion002_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float4 In_InitializationValue, float4 In_CurrentParameterMapValue, out float4 Out_Value, inout FSimulationContext Context);
void NiagaraScript_14271_Func_(float4 In_QuatA, float4 In_QuatB, out float Out_RadiansAngle, inout FSimulationContext Context);
void NiagaraScript_14270_Func_(float In_X, out float Out_SinXoverX, inout FSimulationContext Context);
void NiagaraScript_14269_Func_(float4 In_QuatA, float4 In_QuatB, float In_LerpFactor, out float4 Out_Quaternion, inout FSimulationContext Context);
void AS_MovementUpdate_InterpolateOverTime_Quaternion002_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float4 In_TargetValue, float4 In_InitialValue, out float4 Out_MovingAverage, inout FSimulationContext Context);
void AS_MovementUpdate_InterpolateOverTime_Quaternion003_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float4 In_InitializationValue, float4 In_CurrentParameterMapValue, out float4 Out_Value, inout FSimulationContext Context);
void AS_MovementUpdate_InterpolateOverTime_Quaternion003_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float4 In_TargetValue, float4 In_InitialValue, out float4 Out_MovingAverage, inout FSimulationContext Context);
void AS_MovementUpdate_InterpolateOverTime_Quaternion004_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float4 In_InitializationValue, float4 In_CurrentParameterMapValue, out float4 Out_Value, inout FSimulationContext Context);
void AS_MovementUpdate_InterpolateOverTime_Quaternion004_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float4 In_TargetValue, float4 In_InitialValue, out float4 Out_MovingAverage, inout FSimulationContext Context);
void AS_MovementUpdate_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_14264_Particle_ClampResults_true_Func_(float In_Value, float In_InputMin, float In_InputMax, float In_OutputMin, float In_OutputMax, out float Out_NewOutput, inout FSimulationContext Context);
void NiagaraScript_14265_Particle_ClampResults_true_Func_(float In_Value, float In_InputMin, float In_InputMax, float In_OutputMin, float In_OutputMax, out float Out_NewOutput, inout FSimulationContext Context);
void CrabAnimGraph_Emitter_Func_(inout FSimulationContext Context);
void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();

void SetVariables_67C60A234E3B58728099B3B2E6302A90_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.AS_DMeshRadiusScale = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DMeshRadiusScale.xyz;
	Context.MapSpawn.Particles.MiddlePositionOfNeighbors = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_MiddlePositionOfNeighbors.xyz;
	Context.MapSpawn.Particles.AS_DSphereCenterScale = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DSphereCenterScale.xyz;
	Context.MapSpawn.Particles.MiddleRotationOfNeighbors = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_MiddleRotationOfNeighbors;
	Context.MapSpawn.Particles.AS_DArrowScale = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DArrowScale.xyz;
	Context.MapSpawn.Particles.WorldSpaceCollisionCenter = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_WorldSpaceCollisionCenter.xyz;
	Context.MapSpawn.Particles.AS_DPointPositionScale = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DPointPositionScale.xyz;
	Context.MapSpawn.Particles.NumSeparationParticlesAtRadius = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_NumSeparationParticlesAtRadius;
	Context.MapSpawn.Particles.AS_DPointPosition = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_AS_DPointPosition.xyz;
	Context.MapSpawn.Particles.NewState = Context.MapSpawn.SetVariables_67C60A234E3B58728099B3B2E6302A90.Particles.NewState;
	Context.MapSpawn.Particles.CrabScale = Constants_Emitter_SetVariables_67C60A234E3B58728099B3B2E6302A90_Particles_CrabScale.xyz;
}



void NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant87 = false;
	float Result = In_FloatMax - In_FloatMin;
	float Result1 = rand_float(Result);
	float Result2 = In_FloatMin + Result1;
	Out_RandomFloat = Result2;
	Out_IsDeterministic = Constant87;
}



void NiagaraScript_14261_Particle_Func_(float3 In_Engine_Owner_Position, out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	Out_SimulationPosition = Context.MapSpawn.Engine.Owner.Position;
}



void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.MaterialRandom = Context.MapSpawn.InitializeParticle.MaterialRandom;
	int Constant89 = (0);
	int Constant90 = -1;
	int Constant91 = (0);
	int Constant92 = 0;
	int Constant93 = (0);
	int Constant94 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1;
	NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant89, Constants_Emitter_InitializeParticle_LifetimeMin, Constants_Emitter_InitializeParticle_LifetimeMax, Constant90, Constant91, Constant92, Constant93, Constant94, NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1, NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1, Context);
	Context.MapSpawn.Particles.Lifetime = NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	float Constant95 = 1;
	Context.MapSpawn.Particles.Mass = Constant95;
	float2 Output1;
	Output1.x = Constants_Emitter_InitializeParticle_UniformSpriteSize;
	Output1.y = Constants_Emitter_InitializeParticle_UniformSpriteSize;
	Context.MapSpawn.Particles.SpriteSize = Output1;
	float3 Output11;
	Output11.x = Constants_Emitter_InitializeParticle_MeshUniformScale;
	Output11.y = Constants_Emitter_InitializeParticle_MeshUniformScale;
	Output11.z = Constants_Emitter_InitializeParticle_MeshUniformScale;
	Context.MapSpawn.Particles.Scale = Output11;
	float3 Constant96 = float3(0,0,0);
	float3 NiagaraScript_14261_Particle_Func_Output_SimulationPosition;
	NiagaraScript_14261_Particle_Func_(Constant96, NiagaraScript_14261_Particle_Func_Output_SimulationPosition, Context);
	float Constant97 = 0;
	float3 Result3 = Constants_Emitter_InitializeParticle_PositionOffset.xyz * Constant97;
	float3 Result4 = NiagaraScript_14261_Particle_Func_Output_SimulationPosition + Result3;
	Context.MapSpawn.Particles.Position = Result4;
	Context.MapSpawn.Local.InitializeParticle.InitRIbbonDistance = Context.MapSpawn.Particles.RibbonUVDistance;
}



void CustomHlsl848CA20B47329CCB8F5FDFB49F631DDD_Func_(float In_Pitch, float In_Roll, float In_Yaw, out float4 Out_RotationQuat)
{

	float DEG_TO_RAD = 3.1415927/(180.f);
		float DIVIDE_BY_2 = DEG_TO_RAD/2.f;
		float SP = sin(In_Pitch*DIVIDE_BY_2);
		float SY = sin(In_Yaw*DIVIDE_BY_2);
		float SR = sin(In_Roll*DIVIDE_BY_2);
		float CP = cos(In_Pitch*DIVIDE_BY_2);
		float CY = cos(In_Yaw*DIVIDE_BY_2);
		float CR = cos(In_Roll*DIVIDE_BY_2);

		Out_RotationQuat.x = CR*SP*SY - SR*CP*CY;
		Out_RotationQuat.y = -CR*SP*CY - SR*CP*SY;
		Out_RotationQuat.z = CR*CP*SY - SR*SP*CY;
		Out_RotationQuat.w = CR*CP*CY + SR*SP*SY;

}



void NiagaraScript_14255_Func_(float In_Yaw, float In_Pitch, float In_Roll, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl848CA20B47329CCB8F5FDFB49F631DDD_Func_Output_RotationQuat;
	CustomHlsl848CA20B47329CCB8F5FDFB49F631DDD_Func_(In_Pitch, In_Roll, In_Yaw, CustomHlsl848CA20B47329CCB8F5FDFB49F631DDD_Func_Output_RotationQuat);
	Out_Quaternion = CustomHlsl848CA20B47329CCB8F5FDFB49F631DDD_Func_Output_RotationQuat;
}



void CrabsInitiate_Emitter_Func_(inout FSimulationContext Context)
{
	float Result5 = rand_float(Constants_Emitter_CrabsInitiate_GrabRandomScale);
	float Result6 = Constants_Emitter_CrabsInitiate_GrabMinScale + Result5;
	float Constant98 = 0;
	Context.MapSpawn.Particles.Scale = Result6;
	Context.MapSpawn.Particles.CrabBuryAlpha = Constant98;
	float Constant99 = 0;
	Context.MapSpawn.Particles.AS_DRandomOrientationColor = Constants_Emitter_CrabsInitiate_AS_DRandomOrientationColor;
	Context.MapSpawn.Particles.AS_DRandomOrientationScale = Constants_Emitter_CrabsInitiate_AS_DRandomOrientationScale.xyz;
	Context.MapSpawn.Particles.AS_DRandomOrientation = Constants_Emitter_CrabsInitiate_AS_DRandomOrientation;
	Context.MapSpawn.Particles.AS_DSeparationOrientationColor = Constants_Emitter_CrabsInitiate_AS_DSeparationOrientationColor;
	Context.MapSpawn.Particles.AS_DSeparationOrientationScale = Constants_Emitter_CrabsInitiate_AS_DSeparationOrientationScale.xyz;
	Context.MapSpawn.Particles.AS_DSeparationOrientation = Constants_Emitter_CrabsInitiate_AS_DSeparationOrientation;
	Context.MapSpawn.Particles.AS_DCohesionOrientationColor = Constants_Emitter_CrabsInitiate_AS_DCohesionOrientationColor;
	Context.MapSpawn.Particles.AS_DCohesionOrientationScale = Constants_Emitter_CrabsInitiate_AS_DCohesionOrientationScale.xyz;
	Context.MapSpawn.Particles.AS_DCohesionOrientation = Constants_Emitter_CrabsInitiate_AS_DCohesionOrientation;
	Context.MapSpawn.Particles.AS_DTargetOrientationColor = Constants_Emitter_CrabsInitiate_AS_DTargetOrientationColor;
	Context.MapSpawn.Particles.AS_DTargetOrientationScale = Constants_Emitter_CrabsInitiate_AS_DTargetOrientationScale.xyz;
	Context.MapSpawn.Particles.AS_DTargetOrientation = Constants_Emitter_CrabsInitiate_AS_DTargetOrientation;
	Context.MapSpawn.Particles.AS_DObstacleOrientationColor = Constants_Emitter_CrabsInitiate_AS_DObstacleOrientationColor;
	Context.MapSpawn.Particles.AS_DObstacleOrientationScale = Constants_Emitter_CrabsInitiate_AS_DObstacleOrientationScale.xyz;
	Context.MapSpawn.Particles.AS_DObstacleOrientation = Constants_Emitter_CrabsInitiate_AS_DObstacleOrientation;
	Context.MapSpawn.Particles.AS_DEscapeOrientationColor = Constants_Emitter_CrabsInitiate_AS_DEscapeOrientationColor;
	Context.MapSpawn.Particles.AS_DEscapeOrientationScale = Constants_Emitter_CrabsInitiate_AS_DEscapeOrientationScale.xyz;
	Context.MapSpawn.Particles.AS_DEscapeOrientation = Constants_Emitter_CrabsInitiate_AS_DEscapeOrientation;
	Context.MapSpawn.Particles.AS_CrabLife = Constants_Emitter_CrabsInitiate_AS_CrabLife;
	Context.MapSpawn.Particles.AS_AnimMoveAlpha = Constant99;
	float Constant100 = 360;
	float Result7 = rand_float(Constant100);
	float Constant101 = 0;
	float Constant102 = 0;
	float4 NiagaraScript_14255_Func_Output_Quaternion;
	NiagaraScript_14255_Func_(Result7, Constant101, Constant102, NiagaraScript_14255_Func_Output_Quaternion, Context);
	Context.MapSpawn.Particles.MeshOrientation = NiagaraScript_14255_Func_Output_Quaternion;
	Context.MapSpawn.Particles.AS_DCohesionOrientation = NiagaraScript_14255_Func_Output_Quaternion;
	Context.MapSpawn.Particles.AS_DTargetOrientation = NiagaraScript_14255_Func_Output_Quaternion;
	float Constant103 = 0.2;
	int Constant104 = 0;
	Context.MapSpawn.Particles.StateTimeTamp = Context.MapSpawn.Engine.Time;
	Context.MapSpawn.Particles.StateDuration = Constant103;
	Context.MapSpawn.Particles.State = Constant104;
	float Constant105 = 50;
	float3 Result8 = Context.MapSpawn.Particles.AS_DMeshRadiusScale / Constant105;
	float3 Result9 = Result8 * Constants_Emitter_CrabsInitiate_SeparationRadius;
	Context.MapSpawn.Particles.NeighborRadius = Constants_Emitter_CrabsInitiate_Radius;
	Context.MapSpawn.Particles.SeparationRadius = Constants_Emitter_CrabsInitiate_SeparationRadius;
	Context.MapSpawn.Particles.AS_DMeshRadiusScale = Result9;
}



void NiagaraScript_14239_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, out bool Out_LocalToWorld, inout FSimulationContext Context)
{
	int Constant117 = 0;
	bool Result10 = NiagaraAll(In_SourceSpace == Constant117);
	int Constant118 = 0;
	bool Result11 = NiagaraAll(In_DestinationSpace == Constant118);
	bool Result12 = Result10 && Result11;
	int Constant119 = 1;
	bool Result13 = NiagaraAll(In_SourceSpace == Constant119);
	int Constant120 = 1;
	bool Result14 = NiagaraAll(In_DestinationSpace == Constant120);
	bool Result15 = Result13 && Result14;
	bool Result16 = Result12 || Result15;
	int Constant121 = 2;
	bool Result17 = NiagaraAll(In_SourceSpace == Constant121);
	int Constant122 = 2;
	bool Result18 = NiagaraAll(In_DestinationSpace == Constant122);
	bool Result19 = Result17 && Result18;
	bool Result20 = Result16 || Result19;
	bool Result21 = Result10 && Result18;
	bool Result22 = Result17 && Result11;
	bool Result23 = Result21 || Result22;
	bool Result24 = In_bLocalSpace && Result23;
	bool Result25 = Result20 || Result24;
	bool Result26 = !In_bLocalSpace;
	bool Result27 = Result10 && Result14;
	bool Result28 = Result13 && Result11;
	bool Result29 = Result27 || Result28;
	bool Result30 = Result26 && Result29;
	bool Result31 = Result25 || Result30;
	bool Result32 = In_bLocalSpace && Result27;
	bool Result33 = Result17 && Result14;
	bool Result34 = Result32 || Result33;
	bool Result35 = Result26 && Result22;
	bool Result36 = Result34 || Result35;
	float4x4 Matrix_IfResult;
	if(Result36)
	{
	Matrix_IfResult = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result31;
	Out_OutTransform = Matrix_IfResult;
	Out_LocalToWorld = Result36;
}



void NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_(float3 In_Position, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, float4x4 In_Engine_Owner_SystemLocalToWorld, float4x4 In_Engine_Owner_SystemWorldToLocal, float4x4 In_Engine_Owner_SystemLocalToWorldNoScale, float4x4 In_Engine_Owner_SystemWorldToLocalNoScale, out float3 Out_Position, inout FSimulationContext Context)
{
	float4x4 Constant114 = (float4x4)0;
	float4x4 LocalToWorld_SelectResult = Constant114;
	float4x4 Constant115 = (float4x4)0;
	float4x4 WorldToLocal_SelectResult = Constant115;
	if(In_ApplyScale != 0)
	{
	LocalToWorld_SelectResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	WorldToLocal_SelectResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	if(In_ApplyScale == 0)
	{
	LocalToWorld_SelectResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	WorldToLocal_SelectResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool Constant116 = false;
	bool NiagaraScript_14239_Func_Output_bUseOriginal;
	float4x4 NiagaraScript_14239_Func_Output_OutTransform;
	bool NiagaraScript_14239_Func_Output_LocalToWorld;
	NiagaraScript_14239_Func_(In_SourceSpace, In_DestinationSpace, LocalToWorld_SelectResult, WorldToLocal_SelectResult, Constant116, NiagaraScript_14239_Func_Output_bUseOriginal, NiagaraScript_14239_Func_Output_OutTransform, NiagaraScript_14239_Func_Output_LocalToWorld, Context);
	float3 Result37 = mul(float4(In_Position,1.0),NiagaraScript_14239_Func_Output_OutTransform).xyz;
	float3 Constant123 = float3(0.0, 0.0, 0.0);
	float3 NiagaraPosition_SelectResult1 = Constant123;
	if(NiagaraScript_14239_Func_Output_bUseOriginal != 0)
	{
	NiagaraPosition_SelectResult1 = In_Position;
	}
	if(NiagaraScript_14239_Func_Output_bUseOriginal == 0)
	{
	NiagaraPosition_SelectResult1 = Result37;
	}
	Out_Position = NiagaraPosition_SelectResult1;
}



void NiagaraScript_14213_Particle_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result38 = dot(In_V,In_V);
	float Result39 = In_Threshold * In_Threshold;
	bool Result40 = NiagaraAll(Result38 < Result39);
	float Result41 = length(In_Fallback);
	float Result42 = rsqrt(Result38);
	float3 Result43 = In_V * Result42;
	float Result44 = Reciprocal(Result42);
	float3 Constant126 = float3(0.0, 0.0, 0.0);
	float3 Direction_SelectResult2 = Constant126;
	float Constant127 = (0.0);
	float Length_SelectResult2 = Constant127;
	if(Result40 != 0)
	{
	Direction_SelectResult2 = In_Fallback;
	Length_SelectResult2 = Result41;
	}
	if(Result40 == 0)
	{
	Direction_SelectResult2 = Result43;
	Length_SelectResult2 = Result44;
	}
	Out_Direction = Direction_SelectResult2;
	Out_Length = Length_SelectResult2;
	Out_BelowThreshold = Result40;
}



void CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_(float3 In_SamplePosition, out float3 Out_NewPosition, out float3 Out_VectortoNearestSurface, out float Out_DistanceToSurface, out bool Out_DistanceFieldIsValid, inout FSimulationContext Context)
{
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(In_SamplePosition, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid);
	float3 Constant124 = float3(0,0,0);
	float Constant125 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction;
	float NiagaraScript_14213_Particle_Func_Output_Length;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold;
	NiagaraScript_14213_Particle_Func_(QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient, Constant124, Constant125, NiagaraScript_14213_Particle_Func_Output_Direction, NiagaraScript_14213_Particle_Func_Output_Length, NiagaraScript_14213_Particle_Func_Output_BelowThreshold, Context);
	float Constant128 = -1;
	float3 Result45 = NiagaraScript_14213_Particle_Func_Output_Direction * Constant128;
	float3 Result46 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface * Result45;
	float3 Result47 = In_SamplePosition + Result46;
	float3 Constant129 = float3(0,0,0);
	float Constant130 = 0;
	float3 NewPosition_IfResult;
	float3 VectorToNearestSurface_IfResult;
	float DistanceToSurface_IfResult;
	if(QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid)
	{
	NewPosition_IfResult = Result47;
	VectorToNearestSurface_IfResult = Result45;
	DistanceToSurface_IfResult = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface;
	}
	else
	{
	NewPosition_IfResult = In_SamplePosition;
	VectorToNearestSurface_IfResult = Constant129;
	DistanceToSurface_IfResult = Constant130;
	}
	bool Result48 = !NiagaraScript_14213_Particle_Func_Output_BelowThreshold;
	bool Result49 = Result48 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid;
	Out_NewPosition = NewPosition_IfResult;
	Out_VectortoNearestSurface = VectorToNearestSurface_IfResult;
	Out_DistanceToSurface = DistanceToSurface_IfResult;
	Out_DistanceFieldIsValid = Result49;
}



void CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_(float3 In_SamplePosition, out float3 Out_NewPosition, out float3 Out_VectortoNearestSurface, out float Out_DistanceToSurface, out bool Out_DistanceFieldIsValid, inout FSimulationContext Context)
{
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface1;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient1;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid1;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(In_SamplePosition, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface1, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient1, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid1);
	float3 Constant131 = float3(0,0,0);
	float Constant132 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction1;
	float NiagaraScript_14213_Particle_Func_Output_Length1;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold1;
	NiagaraScript_14213_Particle_Func_(QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient1, Constant131, Constant132, NiagaraScript_14213_Particle_Func_Output_Direction1, NiagaraScript_14213_Particle_Func_Output_Length1, NiagaraScript_14213_Particle_Func_Output_BelowThreshold1, Context);
	float Constant133 = -1;
	float3 Result50 = NiagaraScript_14213_Particle_Func_Output_Direction1 * Constant133;
	float3 Result51 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface1 * Result50;
	float3 Result52 = In_SamplePosition + Result51;
	float3 Constant134 = float3(0,0,0);
	float Constant135 = 0;
	float3 NewPosition_IfResult1;
	float3 VectorToNearestSurface_IfResult1;
	float DistanceToSurface_IfResult1;
	if(QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid1)
	{
	NewPosition_IfResult1 = Result52;
	VectorToNearestSurface_IfResult1 = Result50;
	DistanceToSurface_IfResult1 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface1;
	}
	else
	{
	NewPosition_IfResult1 = In_SamplePosition;
	VectorToNearestSurface_IfResult1 = Constant134;
	DistanceToSurface_IfResult1 = Constant135;
	}
	bool Result53 = !NiagaraScript_14213_Particle_Func_Output_BelowThreshold1;
	bool Result54 = Result53 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid1;
	Out_NewPosition = NewPosition_IfResult1;
	Out_VectortoNearestSurface = VectorToNearestSurface_IfResult1;
	Out_DistanceToSurface = DistanceToSurface_IfResult1;
	Out_DistanceFieldIsValid = Result54;
}



void CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_(float3 In_SamplePosition, out float3 Out_NewPosition, out float3 Out_VectortoNearestSurface, out float Out_DistanceToSurface, out bool Out_DistanceFieldIsValid, inout FSimulationContext Context)
{
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface2;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient2;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid2;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(In_SamplePosition, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface2, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient2, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid2);
	float3 Constant136 = float3(0,0,0);
	float Constant137 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction2;
	float NiagaraScript_14213_Particle_Func_Output_Length2;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold2;
	NiagaraScript_14213_Particle_Func_(QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient2, Constant136, Constant137, NiagaraScript_14213_Particle_Func_Output_Direction2, NiagaraScript_14213_Particle_Func_Output_Length2, NiagaraScript_14213_Particle_Func_Output_BelowThreshold2, Context);
	float Constant138 = -1;
	float3 Result55 = NiagaraScript_14213_Particle_Func_Output_Direction2 * Constant138;
	float3 Result56 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface2 * Result55;
	float3 Result57 = In_SamplePosition + Result56;
	float3 Constant139 = float3(0,0,0);
	float Constant140 = 0;
	float3 NewPosition_IfResult2;
	float3 VectorToNearestSurface_IfResult2;
	float DistanceToSurface_IfResult2;
	if(QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid2)
	{
	NewPosition_IfResult2 = Result57;
	VectorToNearestSurface_IfResult2 = Result55;
	DistanceToSurface_IfResult2 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface2;
	}
	else
	{
	NewPosition_IfResult2 = In_SamplePosition;
	VectorToNearestSurface_IfResult2 = Constant139;
	DistanceToSurface_IfResult2 = Constant140;
	}
	bool Result58 = !NiagaraScript_14213_Particle_Func_Output_BelowThreshold2;
	bool Result59 = Result58 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid2;
	Out_NewPosition = NewPosition_IfResult2;
	Out_VectortoNearestSurface = VectorToNearestSurface_IfResult2;
	Out_DistanceToSurface = DistanceToSurface_IfResult2;
	Out_DistanceFieldIsValid = Result59;
}



void NiagaraScript_14250_Particle_Func_(float4 In_FLOAT4_VAR, int In_TargetChannel, out float Out_NewOutput, inout FSimulationContext Context)
{
	float X;
	float Y;
	float Z;
	float W;
	X = In_FLOAT4_VAR.x;
	Y = In_FLOAT4_VAR.y;
	Z = In_FLOAT4_VAR.z;
	W = In_FLOAT4_VAR.w;
	float Constant144 = (0.0);
	float NiagaraFloat_SelectResult3 = Constant144;
	if(In_TargetChannel == 0)
	{
	NiagaraFloat_SelectResult3 = X;
	}
	if(In_TargetChannel == 1)
	{
	NiagaraFloat_SelectResult3 = Y;
	}
	if(In_TargetChannel == 2)
	{
	NiagaraFloat_SelectResult3 = Z;
	}
	if(In_TargetChannel == 3)
	{
	NiagaraFloat_SelectResult3 = W;
	}
	Out_NewOutput = NiagaraFloat_SelectResult3;
}



void NiagaraScript_14249_Particle_Func_(float3 In_VECTOR_VAR, float4x4 In_Engine_Owner_SystemWorldToLocal, float4 In_Engine_Owner_LWCTile, out float3 Out_Position, inout FSimulationContext Context)
{
	float3 Output13;
	Output13.x = Context.MapSpawn.Engine.Owner.LWCTile.x;
	Output13.y = Context.MapSpawn.Engine.Owner.LWCTile.y;
	Output13.z = Context.MapSpawn.Engine.Owner.LWCTile.z;
	int Constant143 = 3;
	float NiagaraScript_14250_Particle_Func_Output_NewOutput;
	NiagaraScript_14250_Particle_Func_(Context.MapSpawn.Engine.Owner.LWCTile, Constant143, NiagaraScript_14250_Particle_Func_Output_NewOutput, Context);
	float3 Result60 = Output13 * NiagaraScript_14250_Particle_Func_Output_NewOutput;
	float3 Result61 = In_VECTOR_VAR - Result60;
	float3 NiagaraPosition;
	NiagaraPosition.x = Result61.x;
	NiagaraPosition.y = Result61.y;
	NiagaraPosition.z = Result61.z;
	Out_Position = NiagaraPosition;
}



void NiagaraScript_14253_Particle_Func_(float3 In_Position, float4x4 In_Engine_Owner_SystemLocalToWorld, float4 In_Engine_Owner_LWCTile, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output14;
	Output14.x = Context.MapSpawn.Engine.Owner.LWCTile.x;
	Output14.y = Context.MapSpawn.Engine.Owner.LWCTile.y;
	Output14.z = Context.MapSpawn.Engine.Owner.LWCTile.z;
	int Constant156 = 3;
	float NiagaraScript_14250_Particle_Func_Output_NewOutput1;
	NiagaraScript_14250_Particle_Func_(Context.MapSpawn.Engine.Owner.LWCTile, Constant156, NiagaraScript_14250_Particle_Func_Output_NewOutput1, Context);
	float3 Result63 = Output14 * NiagaraScript_14250_Particle_Func_Output_NewOutput1;
	float3 Output15;
	Output15.x = In_Position.x;
	Output15.y = In_Position.y;
	Output15.z = In_Position.z;
	float3 Result64 = Result63 + Output15;
	Out_Vector = Result64;
}



void CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_(float3 In_SamplePosition, float In_GradientOffset, out float3 Out_Ouput, out bool Out_ValidNormal, inout FSimulationContext Context)
{
	float Constant158 = 0;
	float Constant159 = 0;
	float3 Output16;
	Output16.x = In_GradientOffset;
	Output16.y = Constant158;
	Output16.z = Constant159;
	float3 Result65 = In_SamplePosition + Output16;
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface3;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient3;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid3;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(Result65, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface3, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient3, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid3);
	float Constant160 = -1;
	float3 Result66 = Output16 * Constant160;
	float3 Result67 = In_SamplePosition + Result66;
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface4;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient4;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid4;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(Result67, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface4, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient4, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid4);
	float Result68 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface3 - QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface4;
	float Constant161 = 0;
	float Constant162 = 0;
	float3 Output17;
	Output17.x = Constant161;
	Output17.y = In_GradientOffset;
	Output17.z = Constant162;
	float3 Result69 = In_SamplePosition + Output17;
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface5;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient5;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid5;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(Result69, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface5, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient5, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid5);
	float Constant163 = -1;
	float3 Result70 = Output17 * Constant163;
	float3 Result71 = In_SamplePosition + Result70;
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface6;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient6;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid6;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(Result71, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface6, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient6, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid6);
	float Result72 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface5 - QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface6;
	float Constant164 = 0;
	float Constant165 = 0;
	float3 Output18;
	Output18.x = Constant164;
	Output18.y = Constant165;
	Output18.z = In_GradientOffset;
	float3 Result73 = In_SamplePosition + Output18;
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface7;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient7;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid7;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(Result73, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface7, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient7, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid7);
	float Constant166 = -1;
	float3 Result74 = Output18 * Constant166;
	float3 Result75 = In_SamplePosition + Result74;
	float QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface8;
	float3 QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient8;
	bool QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid8;
	QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(Result75, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface8, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_FieldGradient8, QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid8);
	float Result76 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface7 - QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_DistanceToNearestSurface8;
	float3 Output19;
	Output19.x = Result68;
	Output19.y = Result72;
	Output19.z = Result76;
	float3 Constant167 = float3(0,0,0);
	float Constant168 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction3;
	float NiagaraScript_14213_Particle_Func_Output_Length3;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold3;
	NiagaraScript_14213_Particle_Func_(Output19, Constant167, Constant168, NiagaraScript_14213_Particle_Func_Output_Direction3, NiagaraScript_14213_Particle_Func_Output_Length3, NiagaraScript_14213_Particle_Func_Output_BelowThreshold3, Context);
	bool Result77 = QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid3 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid4 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid5 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid6 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid7 && QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDIOutput_IsDistanceFieldValid8;
	bool Result78 = NiagaraScript_14213_Particle_Func_Output_BelowThreshold3 && Result77;
	Out_Ouput = NiagaraScript_14213_Particle_Func_Output_Direction3;
	Out_ValidNormal = Result78;
}



void CrabsProjectPosition_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant106 = 0;
	int Constant107 = 1;
	bool Constant108 = false;
	float4x4 Constant109 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant110 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant111 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant112 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	bool Constant113 = false;
	float3 NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position;
	NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_(Context.MapSpawn.Particles.Position, Constant106, Constant107, Constant108, Constant109, Constant110, Constant111, Constant112, NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position, Context);
	float3 Output12;
	Output12.x = NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position.x;
	Output12.y = NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position.y;
	Output12.z = NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position.z;
	float3 CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_NewPosition;
	float3 CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_VectortoNearestSurface;
	float CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_DistanceToSurface;
	bool CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_DistanceFieldIsValid;
	CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_(Output12, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_NewPosition, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_VectortoNearestSurface, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_DistanceToSurface, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_DistanceFieldIsValid, Context);
	float3 CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_NewPosition;
	float3 CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_VectortoNearestSurface;
	float CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_DistanceToSurface;
	bool CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_DistanceFieldIsValid;
	CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_(CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU_Emitter_Func_Output_NewPosition, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_NewPosition, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_VectortoNearestSurface, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_DistanceToSurface, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_DistanceFieldIsValid, Context);
	float3 CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_NewPosition;
	float3 CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_VectortoNearestSurface;
	float CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_DistanceToSurface;
	bool CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_DistanceFieldIsValid;
	CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_(CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU001_Emitter_Func_Output_NewPosition, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_NewPosition, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_VectortoNearestSurface, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_DistanceToSurface, CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_DistanceFieldIsValid, Context);
	float4x4 Constant141 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4 Constant142 = float4(0,0,0,0);
	float3 NiagaraScript_14249_Particle_Func_Output_Position;
	NiagaraScript_14249_Particle_Func_(CrabsProjectPosition_FindNearestDistanceFieldSurface_GPU002_Emitter_Func_Output_NewPosition, Constant141, Constant142, NiagaraScript_14249_Particle_Func_Output_Position, Context);
	int Constant145 = 1;
	int Constant146 = 0;
	bool Constant147 = false;
	float4x4 Constant148 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant149 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant150 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant151 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	bool Constant152 = false;
	float3 NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position1;
	NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_(NiagaraScript_14249_Particle_Func_Output_Position, Constant145, Constant146, Constant147, Constant148, Constant149, Constant150, Constant151, NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position1, Context);
	float3 Constant153 = float3(0,0,0);
	float3 Result62 = NiagaraScript_14248_Emitter_Localspace_false_Particle_Func_Output_Position1 + Constant153;
	Context.MapSpawn.Particles.Position = Result62;
	float4x4 Constant154 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4 Constant155 = float4(0,0,0,0);
	float3 NiagaraScript_14253_Particle_Func_Output_Vector;
	NiagaraScript_14253_Particle_Func_(Context.MapSpawn.Particles.Position, Constant154, Constant155, NiagaraScript_14253_Particle_Func_Output_Vector, Context);
	float Constant157 = 2;
	float3 CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_Output_Ouput;
	bool CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_Output_ValidNormal;
	CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_(NiagaraScript_14253_Particle_Func_Output_Vector, Constant157, CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_Output_Ouput, CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_Output_ValidNormal, Context);
	Context.MapSpawn.Particles.SurfaceNormal = CrabsProjectPosition_CalculateTheGlobalDistanceFieldSurfaceNormal_GPU_Emitter_Func_Output_Ouput;
}



void NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float3 In_RangeMin, float3 In_RangeMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float3 Out_RandomValue, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant182 = false;
	float3 Result84 = In_RangeMax - In_RangeMin;
	float3 Result85 = rand(Result84);
	float3 Result86 = In_RangeMin + Result85;
	Out_RandomValue = Result86;
	Out_IsDeterministic = Constant182;
}



void NiagaraScript_14231_Func_(float3 In_VECTOR_VAR, out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result90 = abs(In_VECTOR_VAR);
	float X2;
	float Y2;
	float Z2;
	X2 = Result90.x;
	Y2 = Result90.y;
	Z2 = Result90.z;
	bool Result91 = NiagaraAll(X2 > Y2);
	bool Result92 = NiagaraAll(X2 > Z2);
	bool Result93 = Result91 && Result92;
	float3 Constant185 = float3(1,0,0);
	float3 Constant186 = float3(1,1,1);
	float3 Vector_IfResult;
	if(Result93)
	{
	Vector_IfResult = Constant185;
	}
	else
	{
	Vector_IfResult = Constant186;
	}
	bool Result94 = NiagaraAll(Y2 > X2);
	bool Result95 = NiagaraAll(Y2 > Z2);
	bool Result96 = Result94 && Result95;
	float3 Constant187 = float3(0,1,0);
	float3 Constant188 = float3(1,1,1);
	float3 Vector_IfResult1;
	if(Result96)
	{
	Vector_IfResult1 = Constant187;
	}
	else
	{
	Vector_IfResult1 = Constant188;
	}
	float3 Result97 = Vector_IfResult * Vector_IfResult1;
	bool Result98 = NiagaraAll(Z2 > X2);
	bool Result99 = NiagaraAll(Z2 > Y2);
	bool Result100 = Result98 && Result99;
	float3 Constant189 = float3(0,0,1);
	float3 Constant190 = float3(1,1,1);
	float3 Vector_IfResult2;
	if(Result100)
	{
	Vector_IfResult2 = Constant189;
	}
	else
	{
	Vector_IfResult2 = Constant190;
	}
	float3 Result101 = Result97 * Vector_IfResult2;
	float3 Result102 = In_VECTOR_VAR * Result101;
	Out_Result = Result102;
}



void NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_(float3 In_Size, float In_SurfaceThickness, int In_Seed, float3 In_Midpoint, out float3 Out_Output, out float3 Out_Normal, out float3 Out_Tangent, inout FSimulationContext Context)
{
	float3 Result83 = -(In_Midpoint);
	int Constant176 = (0);
	float3 Constant177 = float3(0,0,0);
	int Constant178 = (0);
	int Constant179 = 0;
	int Constant180 = (0);
	int Constant181 = (0);
	float3 NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue;
	bool NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant176, Constant177, In_Size, In_Seed, Constant178, Constant179, Constant180, Constant181, NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue, NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	float3 Result87 = In_Size * Result83 + NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue;
	float3 Result88 = NiagaraScript_14230_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue / In_Size;
	float Constant183 = 2;
	float Constant184 = -1;
	float3 Result89 = Result88 * Constant183 + Constant184;
	float3 NiagaraScript_14231_Func_Output_Result;
	NiagaraScript_14231_Func_(Result89, NiagaraScript_14231_Func_Output_Result, Context);
	float3 Constant191 = float3(0,0,1);
	float Result103 = dot(NiagaraScript_14231_Func_Output_Result,Constant191);
	float Result104 = abs(Result103);
	float Constant192 = 0.999;
	bool Result105 = NiagaraAll(Result104 < Constant192);
	float3 Constant193 = float3(0,1,0);
	float3 Constant194 = float3(0,0,1);
	float3 Constant195 = float3(0.0, 0.0, 0.0);
	float3 Vector3f_SelectResult4 = Constant195;
	if(Result105 != 0)
	{
	Vector3f_SelectResult4 = Constant193;
	}
	if(Result105 == 0)
	{
	Vector3f_SelectResult4 = Constant194;
	}
	float3 Result106 = cross(NiagaraScript_14231_Func_Output_Result,Vector3f_SelectResult4);
	Out_Output = Result87;
	Out_Normal = NiagaraScript_14231_Func_Output_Result;
	Out_Tangent = Result106;
}



void ShapeLocation_TransformStack_Rotation_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant200 = false;
	float4x4 Matrix_IfResult1;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult1 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult1 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_14239_Func_Output_bUseOriginal1;
	float4x4 NiagaraScript_14239_Func_Output_OutTransform1;
	bool NiagaraScript_14239_Func_Output_LocalToWorld1;
	NiagaraScript_14239_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult1, Matrix001_IfResult, Constant200, NiagaraScript_14239_Func_Output_bUseOriginal1, NiagaraScript_14239_Func_Output_OutTransform1, NiagaraScript_14239_Func_Output_LocalToWorld1, Context);
	float3 Result113 = mul(float4(In_InVector,0.0),NiagaraScript_14239_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult3;
	if(NiagaraScript_14239_Func_Output_bUseOriginal1)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result113;
	}
	Out_OutVector = Vector_IfResult3;
}



void ShapeLocation_TransformStack_Rotation_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant203 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_14239_Func_Output_bUseOriginal2;
	float4x4 NiagaraScript_14239_Func_Output_OutTransform2;
	bool NiagaraScript_14239_Func_Output_LocalToWorld2;
	NiagaraScript_14239_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant203, NiagaraScript_14239_Func_Output_bUseOriginal2, NiagaraScript_14239_Func_Output_OutTransform2, NiagaraScript_14239_Func_Output_LocalToWorld2, Context);
	float3 Result114 = mul(float4(In_InVector,0.0),NiagaraScript_14239_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult4;
	if(NiagaraScript_14239_Func_Output_bUseOriginal2)
	{
	Vector_IfResult4 = In_InVector;
	}
	else
	{
	Vector_IfResult4 = Result114;
	}
	Out_OutVector = Vector_IfResult4;
}



void ShapeLocation_TransformStack_Rotation_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant206 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_14239_Func_Output_bUseOriginal3;
	float4x4 NiagaraScript_14239_Func_Output_OutTransform3;
	bool NiagaraScript_14239_Func_Output_LocalToWorld3;
	NiagaraScript_14239_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant206, NiagaraScript_14239_Func_Output_bUseOriginal3, NiagaraScript_14239_Func_Output_OutTransform3, NiagaraScript_14239_Func_Output_LocalToWorld3, Context);
	float3 Result115 = mul(float4(In_InVector,0.0),NiagaraScript_14239_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult5;
	if(NiagaraScript_14239_Func_Output_bUseOriginal3)
	{
	Vector_IfResult5 = In_InVector;
	}
	else
	{
	Vector_IfResult5 = Result115;
	}
	Out_OutVector = Vector_IfResult5;
}



void ShapeLocation_TransformStack_Rotation_TransformVector004_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant209 = false;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_14239_Func_Output_bUseOriginal4;
	float4x4 NiagaraScript_14239_Func_Output_OutTransform4;
	bool NiagaraScript_14239_Func_Output_LocalToWorld4;
	NiagaraScript_14239_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant209, NiagaraScript_14239_Func_Output_bUseOriginal4, NiagaraScript_14239_Func_Output_OutTransform4, NiagaraScript_14239_Func_Output_LocalToWorld4, Context);
	float3 Result116 = mul(float4(In_InVector,0.0),NiagaraScript_14239_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult6;
	if(NiagaraScript_14239_Func_Output_bUseOriginal4)
	{
	Vector_IfResult6 = In_InVector;
	}
	else
	{
	Vector_IfResult6 = Result116;
	}
	Out_OutVector = Vector_IfResult6;
}



void ShapeLocation_TransformStack_Rotation_Emitter_Func_(float3 In_InputVector, int In_RotationCoordinateSpace, float3 In_YawASC47PitchASC47Roll, float3 In_RotationAxis, float In_RotationAngle, float4 In_RotationQuaternion, bool In_InvertRotationQuaternion, float3 In_AdditionalYawASC47PitchASC47Roll, float4x4 In_RotationMatrix, float3 In_InputNormal, float3 In_InputTangent, float3 In_InputBitangent, out float3 Out_TransformedVector, out float3 Out_TransformedNormal, out float3 Out_TransformedTangent, out float3 Out_TransformedBitangent, inout FSimulationContext Context)
{
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformVector = In_InputVector;
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformNormal = In_InputNormal;
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformTangent = In_InputTangent;
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformBitangent = In_InputBitangent;
	int Constant198 = 0;
	bool Constant199 = false;
	float3 ShapeLocation_TransformStack_Rotation_TransformVector002_Emitter_Func_Output_OutVector;
	ShapeLocation_TransformStack_Rotation_TransformVector002_Emitter_Func_(Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformVector, In_RotationCoordinateSpace, Constant198, Constant199, ShapeLocation_TransformStack_Rotation_TransformVector002_Emitter_Func_Output_OutVector, Context);
	int Constant201 = 0;
	bool Constant202 = false;
	float3 ShapeLocation_TransformStack_Rotation_TransformVector001_Emitter_Func_Output_OutVector;
	ShapeLocation_TransformStack_Rotation_TransformVector001_Emitter_Func_(Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformNormal, In_RotationCoordinateSpace, Constant201, Constant202, ShapeLocation_TransformStack_Rotation_TransformVector001_Emitter_Func_Output_OutVector, Context);
	int Constant204 = 0;
	bool Constant205 = false;
	float3 ShapeLocation_TransformStack_Rotation_TransformVector003_Emitter_Func_Output_OutVector;
	ShapeLocation_TransformStack_Rotation_TransformVector003_Emitter_Func_(Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformTangent, In_RotationCoordinateSpace, Constant204, Constant205, ShapeLocation_TransformStack_Rotation_TransformVector003_Emitter_Func_Output_OutVector, Context);
	int Constant207 = 0;
	bool Constant208 = false;
	float3 ShapeLocation_TransformStack_Rotation_TransformVector004_Emitter_Func_Output_OutVector;
	ShapeLocation_TransformStack_Rotation_TransformVector004_Emitter_Func_(Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformBitangent, In_RotationCoordinateSpace, Constant207, Constant208, ShapeLocation_TransformStack_Rotation_TransformVector004_Emitter_Func_Output_OutVector, Context);
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformVector = ShapeLocation_TransformStack_Rotation_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformNormal = ShapeLocation_TransformStack_Rotation_TransformVector001_Emitter_Func_Output_OutVector;
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformTangent = ShapeLocation_TransformStack_Rotation_TransformVector003_Emitter_Func_Output_OutVector;
	Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformBitangent = ShapeLocation_TransformStack_Rotation_TransformVector004_Emitter_Func_Output_OutVector;
	Out_TransformedVector = Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformVector;
	Out_TransformedNormal = Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformNormal;
	Out_TransformedTangent = Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformTangent;
	Out_TransformedBitangent = Context.MapSpawn.Local.ShapeLocation.TransformStack_Rotation.LocalTransformBitangent;
}



void ShapeLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result79 = Constants_Emitter_ShapeLocation_SurfaceOnlyBandThickness * Context.MapSpawn.ShapeLocation.SurfaceExpansionMode + Constants_Emitter_ShapeLocation_BoxSize.xyz;
	float Constant174 = 0;
	float X1;
	float Y1;
	float Z1;
	X1 = Result79.x;
	Y1 = Result79.y;
	Z1 = Result79.z;
	float Result80 = max(max(X1, Y1), Z1);
	float Constant175 = 0.5;
	float Result81 = Result80 * Constant175;
	float Result82 = clamp(Constants_Emitter_ShapeLocation_SurfaceOnlyBandThickness,Constant174,Result81);
	float3 NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Output;
	float3 NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Normal;
	float3 NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Tangent;
	NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_(Result79, Result82, Constants_Emitter_ShapeLocation_RandomSeed, Constants_Emitter_ShapeLocation_BoxMidpoint.xyz, NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Output, NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Normal, NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Tangent, Context);
	Context.MapSpawn.Local.ShapeLocation.BoxVector = NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Output;
	Context.MapSpawn.Local.ShapeLocation.BoxNormal = NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Normal;
	Context.MapSpawn.Local.ShapeLocation.BoxTangent = NiagaraScript_14228_Particle_Particle_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_SurfaceOnly_false_Func_Output_Tangent;
	Context.MapSpawn.Local.ShapeLocation.ShapeVector = Context.MapSpawn.Local.ShapeLocation.BoxVector;
	Context.MapSpawn.Local.ShapeLocation.ShapeNormal = Context.MapSpawn.Local.ShapeLocation.BoxNormal;
	Context.MapSpawn.Local.ShapeLocation.ShapeTangent = Context.MapSpawn.Local.ShapeLocation.BoxTangent;
	float3 Result107 = Constants_Emitter_ShapeLocation_NonUniformScale.xyz * Context.MapSpawn.ShapeLocation.ApplyOwnerScale;
	float3 Result108 = Context.MapSpawn.Local.ShapeLocation.ShapeVector * Result107;
	float3 Result109 = abs(Result107);
	float3 Constant196 = float3(0.0001,0.0001,0.0001);
	float3 Result110 = max(Result109, Constant196);
	float3 Result111 = rcp(Result110);
	Context.MapSpawn.Local.ShapeLocation.ShapeVector = Result108;
	Context.MapSpawn.Local.ShapeLocation.ScaleFactor = Result107;
	Context.MapSpawn.Local.ShapeLocation.InverseScaleFactor = Result111;
	float3 Result112 = Context.MapSpawn.Local.ShapeLocation.ShapeNormal * Constants_Emitter_ShapeLocation_NonUniformScale.xyz * Context.MapSpawn.ShapeLocation.ApplyOwnerScale;
	Context.MapSpawn.Local.ShapeLocation.ShapeNormal = Result112;
	float3 Constant197 = float3(0,0,0);
	Context.MapSpawn.Local.ShapeLocation.OffsetVector = Constant197;
	float3 ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedVector;
	float3 ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedNormal;
	float3 ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedTangent;
	float3 ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedBitangent;
	ShapeLocation_TransformStack_Rotation_Emitter_Func_(Context.MapSpawn.Local.ShapeLocation.ShapeVector, Context.MapSpawn.ShapeLocation.RotationCoordinateSpace, Constants_Emitter_ShapeLocation_YawASC47PitchASC47Roll.xyz, Constants_Emitter_ShapeLocation_RotationAxis.xyz, Constants_Emitter_ShapeLocation_RotationAngle, Context.MapSpawn.ShapeLocation.RotationQuaternion, Context.MapSpawn.ShapeLocation.InvertRotationQuaternion, Constants_Emitter_ShapeLocation_AdditionalYawASC47PitchASC47Roll.xyz, Context.MapSpawn.ShapeLocation.RotationMatrix, Context.MapSpawn.Local.ShapeLocation.ShapeNormal, Context.MapSpawn.Local.ShapeLocation.ShapeTangent, Context.MapSpawn.Local.ShapeLocation.ShapeBitangent, ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedVector, ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedNormal, ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedTangent, ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedBitangent, Context);
	Context.MapSpawn.Local.ShapeLocation.ShapeVector = ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedVector;
	Context.MapSpawn.Local.ShapeLocation.ShapeNormal = ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedNormal;
	Context.MapSpawn.Local.ShapeLocation.ShapeTangent = ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedTangent;
	Context.MapSpawn.Local.ShapeLocation.ShapeBitangent = ShapeLocation_TransformStack_Rotation_Emitter_Func_Output_TransformedBitangent;
	float3 Result117 = Context.MapSpawn.Local.ShapeLocation.ShapeVector + Context.MapSpawn.Local.ShapeLocation.OffsetVector;
	Context.MapSpawn.Local.ShapeLocation.ShapeVector = Result117;
	float3 Result118 = Context.MapSpawn.ShapeLocation.ShapeOrigin + Context.MapSpawn.Local.ShapeLocation.ShapeVector;
	Context.MapSpawn.Local.ShapeLocation.ShapePosition = Result118;
	Context.MapSpawn.Particles.ShapeLocation.ShapeVector = Context.MapSpawn.Local.ShapeLocation.ShapeVector;
	Context.MapSpawn.Particles.ShapeLocation.ShapePosition = Context.MapSpawn.Local.ShapeLocation.ShapePosition;
	Context.MapSpawn.Particles.Position = Context.MapSpawn.Local.ShapeLocation.ShapePosition;
	float3 Result119 = cross(Context.MapSpawn.Local.ShapeLocation.ShapeTangent,Context.MapSpawn.Local.ShapeLocation.ShapeNormal);
	Context.MapSpawn.Particles.ShapeLocation.ShapeNormal = Context.MapSpawn.Local.ShapeLocation.ShapeNormal;
	Context.MapSpawn.Particles.ShapeLocation.ShapeTangent = Result119;
	Context.MapSpawn.Particles.ShapeLocation.ShapeBitangent = Context.MapSpawn.Local.ShapeLocation.ShapeTangent;
}



void NiagaraScript_14212_Func_(float In_Angle, float3 In_VectorToRotate, float3 In_RotationAxis, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Result129 = normalize(In_RotationAxis);
	float X3;
	float Y3;
	float Z3;
	X3 = Result129.x;
	Y3 = Result129.y;
	Z3 = Result129.z;
	float Result130 = X3 * X3;
	float Constant222 = 1;
	float Result131 = cos(In_Angle*(TWO_PI/Constant222));
	float Result132 = 1 - Result131;
	float Result133 = Result130 * Result132;
	float Result134 = Result133 + Result131;
	float X4;
	float Y4;
	float Z4;
	X4 = In_VectorToRotate.x;
	Y4 = In_VectorToRotate.y;
	Z4 = In_VectorToRotate.z;
	float Result135 = Result134 * X4;
	float Result136 = X3 * Y3;
	float Result137 = Result136 * Result132;
	float Constant223 = 1;
	float Result138 = sin(In_Angle*(TWO_PI/Constant223));
	float Result139 = Z3 * Result138;
	float Result140 = Result137 - Result139;
	float Result141 = Result140 * Y4;
	float Result142 = Result135 + Result141;
	float Result143 = Z3 * X3;
	float Result144 = Result143 * Result132;
	float Result145 = Y3 * Result138;
	float Result146 = Result144 + Result145;
	float Result147 = Result146 * Z4;
	float Result148 = Result142 + Result147;
	float Result149 = Result132 * Result136;
	float Result150 = Result149 + Result139;
	float Result151 = Result150 * X4;
	float Result152 = Y3 * Y3;
	float Result153 = Result132 * Result152;
	float Result154 = Result153 + Result131;
	float Result155 = Result154 * Y4;
	float Result156 = Result151 + Result155;
	float Result157 = Y3 * Z3;
	float Result158 = Result132 * Result157;
	float Result159 = X3 * Result138;
	float Result160 = Result158 - Result159;
	float Result161 = Result160 * Z4;
	float Result162 = Result156 + Result161;
	float Result163 = Result132 * Result143;
	float Result164 = Result163 - Result145;
	float Result165 = Result164 * X4;
	float Result166 = Result132 * Result157;
	float Result167 = Result166 + Result159;
	float Result168 = Result167 * Y4;
	float Result169 = Result165 + Result168;
	float Result170 = Z3 * Z3;
	float Result171 = Result132 * Result170;
	float Result172 = Result171 + Result131;
	float Result173 = Result172 * Z4;
	float Result174 = Result169 + Result173;
	float3 Output110;
	Output110.x = Result148;
	Output110.y = Result162;
	Output110.z = Result174;
	Out_Vector = Output110;
}



void NiagaraScript_14211_Func_(float3 In_ConeAxis, float3 In_ProposedVector, float In_MaxAngle, float3 In_FallbackOffsetVector, out float3 Out_OutputVector, out bool Out_InvalidInputVectors, inout FSimulationContext Context)
{
	float3 Constant210 = float3(0,0,0);
	float Constant211 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction4;
	float NiagaraScript_14213_Particle_Func_Output_Length4;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold4;
	NiagaraScript_14213_Particle_Func_(In_ProposedVector, Constant210, Constant211, NiagaraScript_14213_Particle_Func_Output_Direction4, NiagaraScript_14213_Particle_Func_Output_Length4, NiagaraScript_14213_Particle_Func_Output_BelowThreshold4, Context);
	float3 Constant212 = float3(0,0,0);
	float Constant213 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction5;
	float NiagaraScript_14213_Particle_Func_Output_Length5;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold5;
	NiagaraScript_14213_Particle_Func_(In_ConeAxis, Constant212, Constant213, NiagaraScript_14213_Particle_Func_Output_Direction5, NiagaraScript_14213_Particle_Func_Output_Length5, NiagaraScript_14213_Particle_Func_Output_BelowThreshold5, Context);
	float Result120 = dot(NiagaraScript_14213_Particle_Func_Output_Direction4,NiagaraScript_14213_Particle_Func_Output_Direction5);
	float Constant214 = -0.999;
	bool Result121 = NiagaraAll(Result120 < Constant214);
	float3 Result122 = NiagaraScript_14213_Particle_Func_Output_Direction5 + In_FallbackOffsetVector;
	float3 Constant215 = float3(0,0,0);
	float Constant216 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction6;
	float NiagaraScript_14213_Particle_Func_Output_Length6;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold6;
	NiagaraScript_14213_Particle_Func_(Result122, Constant215, Constant216, NiagaraScript_14213_Particle_Func_Output_Direction6, NiagaraScript_14213_Particle_Func_Output_Length6, NiagaraScript_14213_Particle_Func_Output_BelowThreshold6, Context);
	float3 Vector_IfResult7;
	if(Result121)
	{
	Vector_IfResult7 = NiagaraScript_14213_Particle_Func_Output_Direction6;
	}
	else
	{
	Vector_IfResult7 = NiagaraScript_14213_Particle_Func_Output_Direction5;
	}
	float3 Result123 = cross(NiagaraScript_14213_Particle_Func_Output_Direction4,Vector_IfResult7);
	float3 Constant217 = float3(0,0,1);
	float Constant218 = 1e-05;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction7;
	float NiagaraScript_14213_Particle_Func_Output_Length7;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold7;
	NiagaraScript_14213_Particle_Func_(Result123, Constant217, Constant218, NiagaraScript_14213_Particle_Func_Output_Direction7, NiagaraScript_14213_Particle_Func_Output_Length7, NiagaraScript_14213_Particle_Func_Output_BelowThreshold7, Context);
	float Result124 = dot(NiagaraScript_14213_Particle_Func_Output_Direction4,Vector_IfResult7);
	float Constant219 = 1;
	float Result125 = atan2(NiagaraScript_14213_Particle_Func_Output_Length7,Result124)*(Constant219/TWO_PI);
	float Constant220 = 360;
	float Result126 = In_MaxAngle / Constant220;
	float Result127 = min(Result125, Result126);
	float Constant221 = -1;
	float Result128 = Result127 * Constant221;
	float3 NiagaraScript_14212_Func_Output_Vector;
	NiagaraScript_14212_Func_(Result128, Vector_IfResult7, NiagaraScript_14213_Particle_Func_Output_Direction7, NiagaraScript_14212_Func_Output_Vector, Context);
	float3 Result175 = NiagaraScript_14212_Func_Output_Vector * NiagaraScript_14213_Particle_Func_Output_Length4;
	bool Result176 = Result121 || NiagaraScript_14213_Particle_Func_Output_BelowThreshold4 || NiagaraScript_14213_Particle_Func_Output_BelowThreshold5;
	Out_OutputVector = Result175;
	Out_InvalidInputVectors = Result176;
}



void ConstrainVectorToCone_Emitter_Func_(inout FSimulationContext Context)
{
	float3 NiagaraScript_14211_Func_Output_OutputVector;
	bool NiagaraScript_14211_Func_Output_InvalidInputVectors;
	NiagaraScript_14211_Func_(Constants_Emitter_ConstrainVectorToCone_ConeAxis.xyz, Constants_Emitter_ConstrainVectorToCone_VECTOR_VAR.xyz, Constants_Emitter_ConstrainVectorToCone_MaxAngle, Constants_Emitter_ConstrainVectorToCone_FallbackOffsetVector.xyz, NiagaraScript_14211_Func_Output_OutputVector, NiagaraScript_14211_Func_Output_InvalidInputVectors, Context);
	Context.MapSpawn.OUTPUT_VAR.ConstrainVectorToCone.VECTOR_VAR = NiagaraScript_14211_Func_Output_OutputVector;
	Context.MapSpawn.OUTPUT_VAR.ConstrainVectorToCone.InvalidVectors = NiagaraScript_14211_Func_Output_InvalidInputVectors;
}



void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result177 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result177;
	Context.MapUpdate.Transient.FirstFrame = Result177;
	int Constant227 = 0;
	bool Result178 = NiagaraAll(Context.MapUpdate.Emitter.ExecutionState != Constant227);
	int Constant228 = 0;
	bool Result179 = NiagaraAll(Context.MapUpdate.System.ExecutionState != Constant228);
	bool Result180 = Result178 || Result179;
	bool Result181 = Context.MapUpdate.ParticleState.LetInfinitelyLivedParticlesDieWhenEmitterDeactivates && Result180;
	bool Result182 = !Result181;
	bool Result183 = Context.MapUpdate.ParticleState.LoopParticlesLifetime && Result182;
	float Result184 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant229 = 1e-05;
	float Result185 = max(Context.MapUpdate.ParticleState.Lifetime, Constant229);
	float Result186 = ModuloPrecise(Result184, Result185);
	float Age_IfResult;
	if(Result183)
	{
	Age_IfResult = Result186;
	}
	else
	{
	Age_IfResult = Result184;
	}
	float Constant230 = 0.0001;
	float Result187 = Result185 - Constant230;
	bool Result188 = NiagaraAll(Age_IfResult > Result187);
	bool Result189 = Result188 && Result181;
	bool Constant231 = false;
	bool bool_IfResult;
	if(Result189)
	{
	bool_IfResult = Constant231;
	}
	else
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	float Result190 = Age_IfResult / Result185;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Age_IfResult;
	Context.MapUpdate.Particles.NormalizedAge = Result190;
	bool Constant232 = true;
}



void NiagaraScript_14298_Particle_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context)
{
	float3 Result197 = In_Velocity - In_AdvectionVelocity;
	float Result198 = In_Drag * In_InverseMass;
	float Constant240 = (0.0);
	float NiagaraFloat_SelectResult5 = Constant240;
	if(In_IgnoreMass != 0)
	{
	NiagaraFloat_SelectResult5 = In_Drag;
	}
	if(In_IgnoreMass == 0)
	{
	NiagaraFloat_SelectResult5 = Result198;
	}
	float Constant241 = 0;
	float Result199 = max(NiagaraFloat_SelectResult5, Constant241);
	float Result200 = Result199 * In_DeltaTime;
	float Constant242 = 1;
	float Result201 = Result200 + Constant242;
	float3 Result202 = Result197 / Result201;
	float3 Result203 = Result202 + In_AdvectionVelocity;
	Out_Output = Result203;
}



void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	float Constant238 = 1e-05;
	float Result191 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime, Constant238);
	float Result192 = Reciprocal(Result191);
	Context.MapUpdate.Local.SolveForcesAndVelocity.InverseDeltaTime = Result192;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.Particles.Presolve.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Particles.Presolve.Position = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.MapUpdate.Particles.Presolve.PhysicsForce = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce;
	float Constant239 = 1e-06;
	float Result193 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant239);
	float Result194 = Reciprocal(Result193);
	float3 Result195 = Result194 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result195;
	Context.MapUpdate.Local.SolveForcesAndVelocity.InverseMass = Result194;
	float3 Result196 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result196;
	Context.MapUpdate.Local.SolveForcesAndVelocity.AdvectionVelocity = Context.MapUpdate.Transient.AdvectionVelocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Local.SolveForcesAndVelocity.DragIgnoreMass = Context.MapUpdate.Transient.DragIgnoreMass;
	float3 NiagaraScript_14298_Particle_Func_Output_Output;
	NiagaraScript_14298_Particle_Func_(Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity, Context.MapUpdate.Local.SolveForcesAndVelocity.AdvectionVelocity, Context.MapUpdate.Local.SolveForcesAndVelocity.InverseMass, Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag, Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime, Context.MapUpdate.Local.SolveForcesAndVelocity.DragIgnoreMass, NiagaraScript_14298_Particle_Func_Output_Output, Context);
	float3 Result204 = NiagaraScript_14298_Particle_Func_Output_Output - Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = NiagaraScript_14298_Particle_Func_Output_Output;
	Context.MapUpdate.Local.SolveForcesAndVelocity.DragVelocity = Result204;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result205 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime;
	float3 Result206 = Result205 + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result206;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.Particles.Position;
	Velocity_IfResult = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	float3 Constant243 = float3(0,0,0);
	float Constant244 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant243;
	Drag_IfResult = Constant244;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
	float3 Result207 = Context.MapUpdate.Particles.Position - Context.MapUpdate.Particles.Previous.Position;
	float Result208 = length(Result207);
	float Constant245 = 0.3333;
	float Result209 = Result208 * Constant245;
	float Constant246 = 1e+08;
	float Result210 = Modulo(Context.MapUpdate.Particles.DistanceTraveled, Constant246);
	float Result211 = Result209 + Result210;
	Context.MapUpdate.Particles.DistanceTraveled = Result211;

	int Constant247 = 0;

	int Constant248 = 0;

	int Constant249 = 0;
}



void ColorFromCurve_Emitter_Func_(out float4 Out_Value, inout FSimulationContext Context)
{
	float4 SampleColorCurve_Emitter_ColorFromCurve_ColorCurveOutput_Value;
	SampleColorCurve_Emitter_ColorFromCurve_ColorCurve(Context.MapUpdate.ColorFromCurve.CurveIndex, SampleColorCurve_Emitter_ColorFromCurve_ColorCurveOutput_Value);
	Out_Value = SampleColorCurve_Emitter_ColorFromCurve_ColorCurveOutput_Value;
}



void NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant258 = false;
	float Result213 = In_FloatMax - In_FloatMin;
	int Constant259 = 393550916;
	float Result214 = rand_float(Result213, Context.MapUpdate.Particles.UniqueID, Constant259, Context.MapUpdate.Engine.Emitter.InstanceSeed);
	float Result215 = In_FloatMin + Result214;
	Out_RandomFloat = Result215;
	Out_IsDeterministic = Constant258;
}



void RandomRangeLinearColor001_Emitter_Func_(out float4 Out_NewOutput001, inout FSimulationContext Context)
{
	float3 MinVector;
	float MinFloat;
	MinFloat = Constants_Emitter_RandomRangeLinearColor001_Minimum.a;
	MinVector.x = Constants_Emitter_RandomRangeLinearColor001_Minimum.r;
	MinVector.y = Constants_Emitter_RandomRangeLinearColor001_Minimum.g;
	MinVector.z = Constants_Emitter_RandomRangeLinearColor001_Minimum.b;
	float3 MaxVector;
	float MaxFloat;
	MaxFloat = Constants_Emitter_RandomRangeLinearColor001_Maximum.a;
	MaxVector.x = Constants_Emitter_RandomRangeLinearColor001_Maximum.r;
	MaxVector.y = Constants_Emitter_RandomRangeLinearColor001_Maximum.g;
	MaxVector.z = Constants_Emitter_RandomRangeLinearColor001_Maximum.b;
	int Constant250 = (0);
	float Constant251 = 0;
	float Constant252 = 1;
	int Constant253 = 11;
	int Result212 = Constants_Emitter_RandomRangeLinearColor001_RandomSeed + Constant253;
	int Constant254 = (0);
	int Constant255 = 0;
	int Constant256 = (0);
	int Constant257 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant250, Constant251, Constant252, Result212, Constant254, Constant255, Constant256, Constant257, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	float3 Result216 = lerp(MinVector,MaxVector,NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat);
	int Constant260 = (0);
	int Constant261 = 111;
	int Result217 = Constants_Emitter_RandomRangeLinearColor001_RandomSeed + Constant261;
	int Constant262 = (0);
	int Constant263 = 0;
	int Constant264 = (0);
	int Constant265 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant260, MinFloat, MaxFloat, Result217, Constant262, Constant263, Constant264, Constant265, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1, Context);
	float4 LinearColor;
	LinearColor.r = Result216.x;
	LinearColor.g = Result216.y;
	LinearColor.b = Result216.z;
	LinearColor.a = NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	Out_NewOutput001 = LinearColor;
}



void RandomRangeLinearColor_Emitter_Func_(out float4 Out_NewOutput001, inout FSimulationContext Context)
{
	float3 MinVector1;
	float MinFloat1;
	MinFloat1 = Context.MapUpdate.RandomRangeLinearColor.Minimum.a;
	MinVector1.x = Context.MapUpdate.RandomRangeLinearColor.Minimum.r;
	MinVector1.y = Context.MapUpdate.RandomRangeLinearColor.Minimum.g;
	MinVector1.z = Context.MapUpdate.RandomRangeLinearColor.Minimum.b;
	float3 MaxVector1;
	float MaxFloat1;
	MaxFloat1 = Context.MapUpdate.RandomRangeLinearColor.Maximum.a;
	MaxVector1.x = Context.MapUpdate.RandomRangeLinearColor.Maximum.r;
	MaxVector1.y = Context.MapUpdate.RandomRangeLinearColor.Maximum.g;
	MaxVector1.z = Context.MapUpdate.RandomRangeLinearColor.Maximum.b;
	int Constant266 = (0);
	float Constant267 = 0;
	float Constant268 = 1;
	int Constant269 = 11;
	int Result218 = Constants_Emitter_RandomRangeLinearColor_RandomSeed + Constant269;
	int Constant270 = (0);
	int Constant271 = 0;
	int Constant272 = (0);
	int Constant273 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic2;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant266, Constant267, Constant268, Result218, Constant270, Constant271, Constant272, Constant273, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic2, Context);
	float3 Result219 = lerp(MinVector1,MaxVector1,NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2);
	int Constant274 = (0);
	int Constant275 = 111;
	int Result220 = Constants_Emitter_RandomRangeLinearColor_RandomSeed + Constant275;
	int Constant276 = (0);
	int Constant277 = 0;
	int Constant278 = (0);
	int Constant279 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat3;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic3;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant274, MinFloat1, MaxFloat1, Result220, Constant276, Constant277, Constant278, Constant279, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat3, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic3, Context);
	float4 LinearColor1;
	LinearColor1.r = Result219.x;
	LinearColor1.g = Result219.y;
	LinearColor1.b = Result219.z;
	LinearColor1.a = NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat3;
	Out_NewOutput001 = LinearColor1;
}



void Color_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Output0;
	float Output2;
	Output0.x = Context.MapUpdate.Color.Color.r;
	Output0.y = Context.MapUpdate.Color.Color.g;
	Output0.z = Context.MapUpdate.Color.Color.b;
	Output2 = Context.MapUpdate.Color.Color.a;
	float3 Result221 = Output0 * Constants_Emitter_Color_ScaleColor.xyz;
	float Result222 = Output2 * Constants_Emitter_Color_ScaleAlpha;
	float Result223 = Result222 * Context.MapUpdate.Emitter.AlphaScale;
	float4 Output01;
	Output01.g = Result221.y;
	Output01.a = Result223;
	Output01.r = Result221.x;
	Output01.b = Result221.z;
	Context.MapUpdate.Particles.Color = Output01;
}



void NiagaraScript_14275_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Result229 = dot(In_VECTOR_VAR,In_Normal);
	float3 Result230 = Result229 * In_Normal;
	float3 Result231 = In_VECTOR_VAR - Result230;
	Out_Ouput = Result231;
}



void NiagaraScript_14245_Func_(float4x4 In_NewInput, out float4 Out_Quat, inout FSimulationContext Context)
{
	float4 FastMatrixToQuaternion_FastPathLibraryOutput_Quat;
	FastMatrixToQuaternion_FastPathLibrary(In_NewInput, FastMatrixToQuaternion_FastPathLibraryOutput_Quat);
	Out_Quat = FastMatrixToQuaternion_FastPathLibraryOutput_Quat;
}



void NiagaraScript_14244_Func_(float3 In_XVector, float3 In_YVector, float3 In_ZVector, out float4 Out_Quat, inout FSimulationContext Context)
{
	float Constant291 = 0;
	float4 Output113;
	Output113.x = In_XVector.x;
	Output113.y = In_XVector.y;
	Output113.z = In_XVector.z;
	Output113.w = Constant291;
	float Constant292 = 0;
	float4 Output114;
	Output114.x = In_YVector.x;
	Output114.y = In_YVector.y;
	Output114.z = In_YVector.z;
	Output114.w = Constant292;
	float Constant293 = 0;
	float4 Output115;
	Output115.x = In_ZVector.x;
	Output115.y = In_ZVector.y;
	Output115.z = In_ZVector.z;
	Output115.w = Constant293;
	float4 Constant294 = float4(0,0,0,0);
	float4x4 Output116;
	Output116[0] = Output113;
	Output116[1] = Output114;
	Output116[2] = Output115;
	Output116[3] = Constant294;
	float4 NiagaraScript_14245_Func_Output_Quat;
	NiagaraScript_14245_Func_(Output116, NiagaraScript_14245_Func_Output_Quat, Context);
	Out_Quat = NiagaraScript_14245_Func_Output_Quat;
}



void NiagaraScript_14272_Particle_XVectorisDominant_true_Func_(float3 In_XAxis, float3 In_ZAxis, out float4 Out_Quat, out float3 Out_X, out float3 Out_Y, out float3 Out_Z, inout FSimulationContext Context)
{
	float3 Constant287 = float3(1,0,0);
	float Constant288 = 0.01;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction8;
	float NiagaraScript_14213_Particle_Func_Output_Length8;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold8;
	NiagaraScript_14213_Particle_Func_(In_XAxis, Constant287, Constant288, NiagaraScript_14213_Particle_Func_Output_Direction8, NiagaraScript_14213_Particle_Func_Output_Length8, NiagaraScript_14213_Particle_Func_Output_BelowThreshold8, Context);
	float3 Constant289 = float3(0,1,0);
	float Constant290 = 0.01;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction9;
	float NiagaraScript_14213_Particle_Func_Output_Length9;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold9;
	NiagaraScript_14213_Particle_Func_(In_ZAxis, Constant289, Constant290, NiagaraScript_14213_Particle_Func_Output_Direction9, NiagaraScript_14213_Particle_Func_Output_Length9, NiagaraScript_14213_Particle_Func_Output_BelowThreshold9, Context);
	float3 Result232 = cross(NiagaraScript_14213_Particle_Func_Output_Direction9,NiagaraScript_14213_Particle_Func_Output_Direction8);
	float3 Result233 = normalize(Result232);
	float3 Result234 = cross(NiagaraScript_14213_Particle_Func_Output_Direction8,Result233);
	float3 Result235 = normalize(Result234);
	float4 NiagaraScript_14244_Func_Output_Quat;
	NiagaraScript_14244_Func_(NiagaraScript_14213_Particle_Func_Output_Direction8, Result233, Result235, NiagaraScript_14244_Func_Output_Quat, Context);
	Out_Quat = NiagaraScript_14244_Func_Output_Quat;
	Out_X = NiagaraScript_14213_Particle_Func_Output_Direction8;
	Out_Y = Result233;
	Out_Z = Result235;
}



void AS_EscapeCalculation_Emitter_Func_(inout FSimulationContext Context)
{
	float4x4 Constant280 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4 Constant281 = float4(0,0,0,0);
	float3 NiagaraScript_14253_Particle_Func_Output_Vector1;
	NiagaraScript_14253_Particle_Func_(Context.MapUpdate.Particles.Position, Constant280, Constant281, NiagaraScript_14253_Particle_Func_Output_Vector1, Context);
	float X5;
	float Y5;
	float Z5;
	X5 = NiagaraScript_14253_Particle_Func_Output_Vector1.x;
	Y5 = NiagaraScript_14253_Particle_Func_Output_Vector1.y;
	Z5 = NiagaraScript_14253_Particle_Func_Output_Vector1.z;
	float2 Output111;
	Output111.x = X5;
	Output111.y = Y5;
	float X6;
	float Y6;
	float Z6;
	X6 = Context.MapUpdate.AS_EscapeCalculation.PlayerLocation.x;
	Y6 = Context.MapUpdate.AS_EscapeCalculation.PlayerLocation.y;
	Z6 = Context.MapUpdate.AS_EscapeCalculation.PlayerLocation.z;
	float2 Output112;
	Output112.x = X6;
	Output112.y = Y6;
	float2 Result224 = Output111 - Output112;
	float Result225 = length(Result224);
	Context.MapUpdate.Particles.DistanceToCharacter = Result225;
	int Constant282 = 3;
	bool Result226 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant282);
	float4x4 Constant283 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4 Constant284 = float4(0,0,0,0);
	float3 NiagaraScript_14253_Particle_Func_Output_Vector2;
	NiagaraScript_14253_Particle_Func_(Context.MapUpdate.Particles.Position, Constant283, Constant284, NiagaraScript_14253_Particle_Func_Output_Vector2, Context);
	float3 Result227 = NiagaraScript_14253_Particle_Func_Output_Vector2 - Context.MapUpdate.AS_EscapeCalculation.PlayerLocation;
	float3 Result228 = normalize(Result227);
	float3 Constant285 = float3(0,0,1);
	float3 NiagaraScript_14275_Func_Output_Ouput;
	NiagaraScript_14275_Func_(Result228, Constant285, NiagaraScript_14275_Func_Output_Ouput, Context);
	float3 Constant286 = float3(0,0,1);
	float4 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Quat;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_X;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Y;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Z;
	NiagaraScript_14272_Particle_XVectorisDominant_true_Func_(NiagaraScript_14275_Func_Output_Ouput, Constant286, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Quat, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_X, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Y, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Z, Context);
	float4 Constant295 = float4(0.0, 0.0, 0.0, 1.0);
	float4 Quat4f_SelectResult6 = Constant295;
	if(Result226 != 0)
	{
	Quat4f_SelectResult6 = NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Quat;
	}
	if(Result226 == 0)
	{
	Quat4f_SelectResult6 = Context.MapUpdate.Particles.AS_DEscapeOrientation;
	}
	Context.MapUpdate.Particles.AS_DEscapeOrientation = Quat4f_SelectResult6;
}



void AS_CrabUnburyState_IncrementOverTime_Emitter_Func_(float In_TickDelta, float In_RateofChange, bool In_Enabled, out float Out_Counter, out float Out_Change, inout FSimulationContext Context)
{
	float Result236 = In_TickDelta * In_RateofChange;
	float Result237 = Context.MapUpdate.Particles.AS_CrabUnburyState.IncrementOverTime.Counter + Result236;
	float float_IfResult;
	if(In_Enabled)
	{
	float_IfResult = Result237;
	}
	else
	{
	float_IfResult = Context.MapUpdate.Particles.AS_CrabUnburyState.IncrementOverTime.Counter;
	}
	float Constant297 = 0;
	float float_IfResult1;
	if(In_Enabled)
	{
	float_IfResult1 = Result236;
	}
	else
	{
	float_IfResult1 = Constant297;
	}
	Context.MapUpdate.Particles.AS_CrabUnburyState.IncrementOverTime.Counter = float_IfResult;
	Context.MapUpdate.OUTPUT_VAR.AS_CrabUnburyState.IncrementOverTime.Change = float_IfResult1;
	Out_Counter = float_IfResult;
	Out_Change = float_IfResult1;
}



void AS_CrabUnburyState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Constant296 = true;
	float AS_CrabUnburyState_IncrementOverTime_Emitter_Func_Output_Counter;
	float AS_CrabUnburyState_IncrementOverTime_Emitter_Func_Output_Change;
	AS_CrabUnburyState_IncrementOverTime_Emitter_Func_(Context.MapUpdate.Engine.DeltaTime, Constants_Emitter_AS_CrabUnburyState_RateChange, Constant296, AS_CrabUnburyState_IncrementOverTime_Emitter_Func_Output_Counter, AS_CrabUnburyState_IncrementOverTime_Emitter_Func_Output_Change, Context);
	bool Result238 = NiagaraAll(AS_CrabUnburyState_IncrementOverTime_Emitter_Func_Output_Counter > Constants_Emitter_AS_CrabUnburyState_TimeToIdle);
	int Constant298 = 0;
	bool Result239 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant298);
	bool Result240 = Result238 && Result239;
	int Constant299 = 1;
	int Constant300 = (int)0;
	int E_CrabStates_SelectResult7 = Constant300;
	if(Result240 != 0)
	{
	E_CrabStates_SelectResult7 = Constant299;
	}
	if(Result240 == 0)
	{
	E_CrabStates_SelectResult7 = Context.MapUpdate.Particles.NewState;
	}
	Context.MapUpdate.Particles.NewState = E_CrabStates_SelectResult7;
}



void AS_CrabIdleState_ChangeStateInTime_Emitter_Func_(int In_State, int In_IfState, int In_ThenState, float In_Step, float In_MinRange, float In_MaxRange, out int Out_OutState, out float Out_Counter, inout FSimulationContext Context)
{
	bool Result241 = NiagaraAll(In_State == In_IfState);
	float Result242 = Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter + In_Step;
	float Constant304 = 0;
	float Constant305 = (0.0);
	float NiagaraFloat_SelectResult8 = Constant305;
	if(Result241 != 0)
	{
	NiagaraFloat_SelectResult8 = Result242;
	}
	if(Result241 == 0)
	{
	NiagaraFloat_SelectResult8 = Constant304;
	}
	Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter = NiagaraFloat_SelectResult8;
	bool Result243 = NiagaraAll(Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter > In_MaxRange);
	float Constant306 = 0;
	float Constant307 = (0.0);
	float NiagaraFloat_SelectResult9 = Constant307;
	if(Result243 != 0)
	{
	NiagaraFloat_SelectResult9 = Constant306;
	}
	if(Result243 == 0)
	{
	NiagaraFloat_SelectResult9 = Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter;
	}
	Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter = NiagaraFloat_SelectResult9;
	Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter = Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter;
	int Constant308 = (0);
	int Constant309 = -1;
	int Constant310 = (0);
	int Constant311 = 0;
	int Constant312 = (0);
	int Constant313 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat4;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic4;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant308, In_MinRange, In_MaxRange, Constant309, Constant310, Constant311, Constant312, Constant313, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat4, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic4, Context);
	bool Result244 = NiagaraAll(Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter >= NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat4);
	int Constant314 = (int)0;
	int E_CrabStates_SelectResult10 = Constant314;
	if(Result244 != 0)
	{
	E_CrabStates_SelectResult10 = In_ThenState;
	}
	if(Result244 == 0)
	{
	E_CrabStates_SelectResult10 = In_State;
	}
	Out_OutState = E_CrabStates_SelectResult10;
	Out_Counter = Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter;
}



void AS_CrabIdleState_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant301 = 1;
	int Constant302 = 2;
	float Constant303 = 0.1;
	int AS_CrabIdleState_ChangeStateInTime_Emitter_Func_Output_OutState;
	float AS_CrabIdleState_ChangeStateInTime_Emitter_Func_Output_Counter;
	AS_CrabIdleState_ChangeStateInTime_Emitter_Func_(Context.MapUpdate.Particles.NewState, Constant301, Constant302, Constant303, Constants_Emitter_AS_CrabIdleState_MinRangeRandomToMove, Constants_Emitter_AS_CrabIdleState_MaxRangeRandomToMove, AS_CrabIdleState_ChangeStateInTime_Emitter_Func_Output_OutState, AS_CrabIdleState_ChangeStateInTime_Emitter_Func_Output_Counter, Context);
	Context.MapUpdate.Particles.NewState = AS_CrabIdleState_ChangeStateInTime_Emitter_Func_Output_OutState;
	int Constant315 = 1;
	bool Result245 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant315);
	float Constant316 = 0;
	float Constant317 = (0.0);
	float NiagaraFloat_SelectResult11 = Constant317;
	if(Result245 != 0)
	{
	NiagaraFloat_SelectResult11 = Constant316;
	}
	if(Result245 == 0)
	{
	NiagaraFloat_SelectResult11 = Context.MapUpdate.Particles.TargetSpeed;
	}
	Context.MapUpdate.Particles.TargetSpeed = NiagaraFloat_SelectResult11;
}



void AS_CrabMoveState_ChangeStateInTime_Emitter_Func_(int In_State, int In_IfState, int In_ThenState, float In_Step, float In_MinRange, float In_MaxRange, out int Out_OutState, out float Out_Counter, inout FSimulationContext Context)
{
	bool Result246 = NiagaraAll(In_State == In_IfState);
	float Result247 = Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter + In_Step;
	float Constant321 = 0;
	float Constant322 = (0.0);
	float NiagaraFloat_SelectResult12 = Constant322;
	if(Result246 != 0)
	{
	NiagaraFloat_SelectResult12 = Result247;
	}
	if(Result246 == 0)
	{
	NiagaraFloat_SelectResult12 = Constant321;
	}
	Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter = NiagaraFloat_SelectResult12;
	bool Result248 = NiagaraAll(Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter > In_MaxRange);
	float Constant323 = 0;
	float Constant324 = (0.0);
	float NiagaraFloat_SelectResult13 = Constant324;
	if(Result248 != 0)
	{
	NiagaraFloat_SelectResult13 = Constant323;
	}
	if(Result248 == 0)
	{
	NiagaraFloat_SelectResult13 = Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter;
	}
	Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter = NiagaraFloat_SelectResult13;
	Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter = Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter;
	int Constant325 = (0);
	int Constant326 = -1;
	int Constant327 = (0);
	int Constant328 = 0;
	int Constant329 = (0);
	int Constant330 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat5;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic5;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant325, In_MinRange, In_MaxRange, Constant326, Constant327, Constant328, Constant329, Constant330, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat5, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic5, Context);
	bool Result249 = NiagaraAll(Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter >= NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat5);
	int Constant331 = (int)0;
	int E_CrabStates_SelectResult14 = Constant331;
	if(Result249 != 0)
	{
	E_CrabStates_SelectResult14 = In_ThenState;
	}
	if(Result249 == 0)
	{
	E_CrabStates_SelectResult14 = In_State;
	}
	Out_OutState = E_CrabStates_SelectResult14;
	Out_Counter = Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter;
}



void AS_CrabMoveState_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant318 = 2;
	int Constant319 = 1;
	float Constant320 = 0.1;
	int AS_CrabMoveState_ChangeStateInTime_Emitter_Func_Output_OutState;
	float AS_CrabMoveState_ChangeStateInTime_Emitter_Func_Output_Counter;
	AS_CrabMoveState_ChangeStateInTime_Emitter_Func_(Context.MapUpdate.Particles.NewState, Constant318, Constant319, Constant320, Constants_Emitter_AS_CrabMoveState_MinRangeRandomToIdle, Constants_Emitter_AS_CrabMoveState_MaxRangeRandomToIdle, AS_CrabMoveState_ChangeStateInTime_Emitter_Func_Output_OutState, AS_CrabMoveState_ChangeStateInTime_Emitter_Func_Output_Counter, Context);
	Context.MapUpdate.Particles.NewState = AS_CrabMoveState_ChangeStateInTime_Emitter_Func_Output_OutState;
	int Constant332 = 2;
	bool Result250 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant332);
	float Constant333 = 0.5;
	float Constant334 = (0.0);
	float NiagaraFloat_SelectResult15 = Constant334;
	if(Result250 != 0)
	{
	NiagaraFloat_SelectResult15 = Constant333;
	}
	if(Result250 == 0)
	{
	NiagaraFloat_SelectResult15 = Context.MapUpdate.Particles.TargetSpeed;
	}
	Context.MapUpdate.Particles.TargetSpeed = NiagaraFloat_SelectResult15;
}



void AS_CrabEscapeState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result251 = NiagaraAll(Context.MapUpdate.Particles.DistanceToCharacter <= Constants_Emitter_AS_CrabEscapeState_EscapeDistance);
	int Constant335 = 4;
	bool Result252 = NiagaraAll(Context.MapUpdate.Particles.NewState != Constant335);
	bool Result253 = Result251 && Result252;
	int Constant336 = 3;
	int Constant337 = (int)0;
	int E_CrabStates_SelectResult16 = Constant337;
	if(Result253 != 0)
	{
	E_CrabStates_SelectResult16 = Constant336;
	}
	if(Result253 == 0)
	{
	E_CrabStates_SelectResult16 = Context.MapUpdate.Particles.NewState;
	}
	Context.MapUpdate.Particles.NewState = E_CrabStates_SelectResult16;
	int Constant338 = 3;
	bool Result254 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant338);
	bool Result255 = NiagaraAll(Context.MapUpdate.Particles.DistanceToCharacter > Constants_Emitter_AS_CrabEscapeState_EscapeDistance);
	bool Result256 = Result254 && Result255;
	int Constant339 = 2;
	int Constant340 = (int)0;
	int E_CrabStates_SelectResult17 = Constant340;
	if(Result256 != 0)
	{
	E_CrabStates_SelectResult17 = Constant339;
	}
	if(Result256 == 0)
	{
	E_CrabStates_SelectResult17 = Context.MapUpdate.Particles.NewState;
	}
	Context.MapUpdate.Particles.NewState = E_CrabStates_SelectResult17;
	int Constant341 = 3;
	bool Result257 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant341);
	float Constant342 = 3;
	float Constant343 = (0.0);
	float NiagaraFloat_SelectResult18 = Constant343;
	if(Result257 != 0)
	{
	NiagaraFloat_SelectResult18 = Constant342;
	}
	if(Result257 == 0)
	{
	NiagaraFloat_SelectResult18 = Context.MapUpdate.Particles.TargetSpeed;
	}
	Context.MapUpdate.Particles.TargetSpeed = NiagaraFloat_SelectResult18;
}



void AS_CrabBuryState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result258 = NiagaraAll(Context.MapUpdate.Particles.Age > Context.MapUpdate.Particles.AS_CrabLife);
	Context.MapUpdate.Particles.AS_WantBury = Result258;
	int Constant344 = 3;
	bool Result259 = NiagaraAll(Context.MapUpdate.Particles.NewState != Constant344);
	bool Result260 = Result259 && Context.MapUpdate.Particles.AS_WantBury;
	int Constant345 = 4;
	int Constant346 = (int)0;
	int E_CrabStates_SelectResult19 = Constant346;
	if(Result260 != 0)
	{
	E_CrabStates_SelectResult19 = Constant345;
	}
	if(Result260 == 0)
	{
	E_CrabStates_SelectResult19 = Context.MapUpdate.Particles.NewState;
	}
	Context.MapUpdate.Particles.NewState = E_CrabStates_SelectResult19;
	int Constant347 = 4;
	bool Result261 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant347);
	float Constant348 = 0;
	float Constant349 = (0.0);
	float NiagaraFloat_SelectResult20 = Constant349;
	if(Result261 != 0)
	{
	NiagaraFloat_SelectResult20 = Constant348;
	}
	if(Result261 == 0)
	{
	NiagaraFloat_SelectResult20 = Context.MapUpdate.Particles.TargetSpeed;
	}
	Context.MapUpdate.Particles.TargetSpeed = NiagaraFloat_SelectResult20;
}



void AS_CrabBurriedState_IncrementOverTime_Emitter_Func_(float In_TickDelta, float In_RateofChange, bool In_Enabled, out float Out_Counter, out float Out_Change, inout FSimulationContext Context)
{
	float Result263 = In_TickDelta * In_RateofChange;
	float Result264 = Context.MapUpdate.Particles.AS_CrabBurriedState.IncrementOverTime.Counter + Result263;
	float float_IfResult2;
	if(In_Enabled)
	{
	float_IfResult2 = Result264;
	}
	else
	{
	float_IfResult2 = Context.MapUpdate.Particles.AS_CrabBurriedState.IncrementOverTime.Counter;
	}
	float Constant351 = 0;
	float float_IfResult3;
	if(In_Enabled)
	{
	float_IfResult3 = Result263;
	}
	else
	{
	float_IfResult3 = Constant351;
	}
	Context.MapUpdate.Particles.AS_CrabBurriedState.IncrementOverTime.Counter = float_IfResult2;
	Context.MapUpdate.OUTPUT_VAR.AS_CrabBurriedState.IncrementOverTime.Change = float_IfResult3;
	Out_Counter = float_IfResult2;
	Out_Change = float_IfResult3;
}



void AS_CrabBurriedState_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant350 = 4;
	bool Result262 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant350);
	float AS_CrabBurriedState_IncrementOverTime_Emitter_Func_Output_Counter;
	float AS_CrabBurriedState_IncrementOverTime_Emitter_Func_Output_Change;
	AS_CrabBurriedState_IncrementOverTime_Emitter_Func_(Context.MapUpdate.Engine.DeltaTime, Constants_Emitter_AS_CrabBurriedState_RateofChange, Result262, AS_CrabBurriedState_IncrementOverTime_Emitter_Func_Output_Counter, AS_CrabBurriedState_IncrementOverTime_Emitter_Func_Output_Change, Context);
	bool Result265 = NiagaraAll(AS_CrabBurriedState_IncrementOverTime_Emitter_Func_Output_Counter > Constants_Emitter_AS_CrabBurriedState_DelayTime);
	int Constant352 = 5;
	int Constant353 = (int)0;
	int E_CrabStates_SelectResult21 = Constant353;
	if(Result265 != 0)
	{
	E_CrabStates_SelectResult21 = Constant352;
	}
	if(Result265 == 0)
	{
	E_CrabStates_SelectResult21 = Context.MapUpdate.Particles.NewState;
	}
	Context.MapUpdate.Particles.NewState = E_CrabStates_SelectResult21;
	int Constant354 = 5;
	bool Result266 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant354);
	bool Result267 = !Result266;
	Context.MapUpdate.DataInstance.Alive = Result267;
}



void AS_SpeedUpdate_InterpolateOverTime_Float_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float In_InitializationValue, float In_CurrentParameterMapValue, out float Out_Value, inout FSimulationContext Context)
{
	float NiagaraNumeric_IfResult;
	if(In_IsFirstFrame)
	{
	NiagaraNumeric_IfResult = In_InitializationValue;
	}
	else
	{
	NiagaraNumeric_IfResult = In_CurrentParameterMapValue;
	}
	Out_Value = NiagaraNumeric_IfResult;
}



void CustomHlsl04C64086480DA644FCC88485B815E918_Func_(float In_InFloat, out float Out_OutFloat)
{

Out_OutFloat = saturate (In_InFloat);
}



void NiagaraScript_14227_Particle_Func_(float In_Value, out float Out_ClampedValue, inout FSimulationContext Context)
{
	float CustomHlsl04C64086480DA644FCC88485B815E918_Func_Output_OutFloat;
	CustomHlsl04C64086480DA644FCC88485B815E918_Func_(In_Value, CustomHlsl04C64086480DA644FCC88485B815E918_Func_Output_OutFloat);
	Out_ClampedValue = CustomHlsl04C64086480DA644FCC88485B815E918_Func_Output_OutFloat;
}



void AS_SpeedUpdate_InterpolateOverTime_Float_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float In_TargetValue, float In_InitialValue, out float Out_MovingAverage, inout FSimulationContext Context)
{
	float AS_SpeedUpdate_InterpolateOverTime_Float_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	AS_SpeedUpdate_InterpolateOverTime_Float_FN_FirstFrame_Numeric_Emitter_Func_(Context.MapUpdate.Transient.FirstFrame, In_InitialValue, Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage, AS_SpeedUpdate_InterpolateOverTime_Float_FN_FirstFrame_Numeric_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage = AS_SpeedUpdate_InterpolateOverTime_Float_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	float Result268 = In_RateOfChange * In_DeltaTime;
	float NiagaraScript_14227_Particle_Func_Output_ClampedValue;
	NiagaraScript_14227_Particle_Func_(Result268, NiagaraScript_14227_Particle_Func_Output_ClampedValue, Context);
	float Result269 = lerp(Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage,In_TargetValue,NiagaraScript_14227_Particle_Func_Output_ClampedValue);
	Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage = Result269;
	Out_MovingAverage = Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage;
}



void AS_SpeedUpdate_Emitter_Func_(inout FSimulationContext Context)
{
	float AS_SpeedUpdate_InterpolateOverTime_Float_Emitter_Func_Output_MovingAverage;
	AS_SpeedUpdate_InterpolateOverTime_Float_Emitter_Func_(Constants_Emitter_AS_SpeedUpdate_RateOfSpeedChange, Context.MapUpdate.Engine.DeltaTime, Context.MapUpdate.Particles.TargetSpeed, Context.MapUpdate.Particles.CurrentSpeed, AS_SpeedUpdate_InterpolateOverTime_Float_Emitter_Func_Output_MovingAverage, Context);
	Context.MapUpdate.Particles.CurrentSpeed = AS_SpeedUpdate_InterpolateOverTime_Float_Emitter_Func_Output_MovingAverage;
}



void CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_(float4 In_Q, out float3 Out_Vector)
{

const float y2 = In_Q.y + In_Q.y;
	const float z2 = In_Q.z + In_Q.z;
	const float xy = In_Q.x * y2;
	const float xz = In_Q.x * z2;
	const float yy = In_Q.y * y2;
	const float zz = In_Q.z * z2;
	const float wy = In_Q.w * y2;
	const float wz = In_Q.w * z2;

	Out_Vector = float3( (1.0f - (yy + zz)), (xy + wz), (xz - wy) );

}



void CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_(float4 In_Q, out float3 Out_Vector)
{

const float x2 = In_Q.x + In_Q.x;
	const float y2 = In_Q.y + In_Q.y;
	const float z2 = In_Q.z + In_Q.z;
	const float xx = In_Q.x * x2;
	const float xy = In_Q.x * y2;
	const float yz = In_Q.y * z2;
	const float zz = In_Q.z * z2;
	const float wx = In_Q.w * x2;
	const float wz = In_Q.w * z2;

	Out_Vector = float3( (xy - wz), (1.0f - (xx + zz)), (yz + wx) );

}



void CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_(float4 In_Q, out float3 Out_Vector)
{

const float x2 = In_Q.x + In_Q.x;
	const float y2 = In_Q.y + In_Q.y;
	const float z2 = In_Q.z + In_Q.z;
	const float xx = In_Q.x * x2;
	const float xz = In_Q.x * z2;
	const float yy = In_Q.y * y2;
	const float yz = In_Q.y * z2;
	const float wx = In_Q.w * x2;
	const float wy = In_Q.w * y2;

	Out_Vector = float3( (xz + wy), (yz - wx), (1.0f - (xx + yy)) );

}



void NiagaraScript_14273_Particle_Func_(float4 In_Quat, bool In_NormalizeVectors, out float3 Out_X, out float3 Out_Y, out float3 Out_Z, inout FSimulationContext Context)
{
	float3 CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_Output_Vector;
	CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_(In_Quat, CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_Output_Vector);
	float3 Result270 = normalize(CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_Output_Vector);
	float3 CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_Output_Vector;
	CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_(In_Quat, CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_Output_Vector);
	float3 Result271 = normalize(CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_Output_Vector);
	float3 CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_Output_Vector;
	CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_(In_Quat, CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_Output_Vector);
	float3 Result272 = normalize(CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_Output_Vector);
	float3 Constant357 = float3(0.0, 0.0, 0.0);
	float3 X_SelectResult22 = Constant357;
	float3 Constant358 = float3(0.0, 0.0, 0.0);
	float3 Y_SelectResult22 = Constant358;
	float3 Constant359 = float3(0.0, 0.0, 0.0);
	float3 Z_SelectResult22 = Constant359;
	if(In_NormalizeVectors != 0)
	{
	X_SelectResult22 = Result270;
	Y_SelectResult22 = Result271;
	Z_SelectResult22 = Result272;
	}
	if(In_NormalizeVectors == 0)
	{
	X_SelectResult22 = CustomHlslE68FC95648C2508BDF7473AA6E9D6CE9_Func_Output_Vector;
	Y_SelectResult22 = CustomHlslAFADD99E47C5F1DF07EC57AD3D2113FF_Func_Output_Vector;
	Z_SelectResult22 = CustomHlsl8E29B0BD4AD2F4F79ED623A6E2C56BF5_Func_Output_Vector;
	}
	Out_X = X_SelectResult22;
	Out_Y = Y_SelectResult22;
	Out_Z = Z_SelectResult22;
}



void NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant367 = false;
	float Result273 = In_FloatMax - In_FloatMin;
	float Result274 = rand_float(Result273);
	float Result275 = In_FloatMin + Result274;
	Out_RandomFloat = Result275;
	Out_IsDeterministic = Constant367;
}



void NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_RangeMin, float In_RangeMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomValue, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant374 = false;
	float Result277 = In_RangeMax - In_RangeMin;
	float Result278 = rand(Result277);
	float Result279 = In_RangeMin + Result278;
	Out_RandomValue = Result279;
	Out_IsDeterministic = Constant374;
}



void NiagaraScript_14272_Particle_XVectorisDominant_false_Func_(float3 In_XAxis, float3 In_ZAxis, out float4 Out_Quat, out float3 Out_X, out float3 Out_Y, out float3 Out_Z, inout FSimulationContext Context)
{
	float3 Constant376 = float3(0,1,0);
	float Constant377 = 0.01;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction10;
	float NiagaraScript_14213_Particle_Func_Output_Length10;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold10;
	NiagaraScript_14213_Particle_Func_(In_ZAxis, Constant376, Constant377, NiagaraScript_14213_Particle_Func_Output_Direction10, NiagaraScript_14213_Particle_Func_Output_Length10, NiagaraScript_14213_Particle_Func_Output_BelowThreshold10, Context);
	float3 Constant378 = float3(1,0,0);
	float Constant379 = 0.01;
	float3 NiagaraScript_14213_Particle_Func_Output_Direction11;
	float NiagaraScript_14213_Particle_Func_Output_Length11;
	bool NiagaraScript_14213_Particle_Func_Output_BelowThreshold11;
	NiagaraScript_14213_Particle_Func_(In_XAxis, Constant378, Constant379, NiagaraScript_14213_Particle_Func_Output_Direction11, NiagaraScript_14213_Particle_Func_Output_Length11, NiagaraScript_14213_Particle_Func_Output_BelowThreshold11, Context);
	float3 Result280 = cross(NiagaraScript_14213_Particle_Func_Output_Direction10,NiagaraScript_14213_Particle_Func_Output_Direction11);
	float3 Result281 = normalize(Result280);
	float3 Result282 = cross(Result281,NiagaraScript_14213_Particle_Func_Output_Direction10);
	float3 Result283 = normalize(Result282);
	float4 NiagaraScript_14244_Func_Output_Quat1;
	NiagaraScript_14244_Func_(Result283, Result281, NiagaraScript_14213_Particle_Func_Output_Direction10, NiagaraScript_14244_Func_Output_Quat1, Context);
	Out_Quat = NiagaraScript_14244_Func_Output_Quat1;
	Out_X = Result283;
	Out_Y = Result281;
	Out_Z = NiagaraScript_14213_Particle_Func_Output_Direction10;
}



void AS_MovementUpdate_InterpolateOverTime_Quaternion002_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float4 In_InitializationValue, float4 In_CurrentParameterMapValue, out float4 Out_Value, inout FSimulationContext Context)
{
	float4 NiagaraNumeric_IfResult1;
	if(In_IsFirstFrame)
	{
	NiagaraNumeric_IfResult1 = In_InitializationValue;
	}
	else
	{
	NiagaraNumeric_IfResult1 = In_CurrentParameterMapValue;
	}
	Out_Value = NiagaraNumeric_IfResult1;
}



void NiagaraScript_14271_Func_(float4 In_QuatA, float4 In_QuatB, out float Out_RadiansAngle, inout FSimulationContext Context)
{
	float4 Result288 = In_QuatA - In_QuatB;
	float Result289 = length(Result288);
	float4 Result290 = In_QuatA + In_QuatB;
	float Result291 = length(Result290);
	float Result292 = atan2(Result289,Result291);
	float Constant381 = 2;
	float Result293 = Result292 * Constant381;
	Out_RadiansAngle = Result293;
}



void NiagaraScript_14270_Func_(float In_X, out float Out_SinXoverX, inout FSimulationContext Context)
{
	float Result296 = In_X * In_X;
	float Constant382 = 1e-06;
	float Output119;
	Output119 = Constant382;
	bool Result297 = NiagaraAll(Result296 < Output119);
	float Constant383 = 1;
	float Result298 = sin(In_X);
	float Result299 = Result298 / In_X;
	float float_IfResult4;
	if(Result297)
	{
	float_IfResult4 = Constant383;
	}
	else
	{
	float_IfResult4 = Result299;
	}
	Out_SinXoverX = float_IfResult4;
}



void NiagaraScript_14269_Func_(float4 In_QuatA, float4 In_QuatB, float In_LerpFactor, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float Result285 = dot(In_QuatA,In_QuatB);
	float Constant380 = 0;
	bool Result286 = NiagaraAll(Result285 > Constant380);
	float4 Result287 = -(In_QuatB);
	float4 Quat_IfResult;
	if(Result286)
	{
	Quat_IfResult = In_QuatB;
	}
	else
	{
	Quat_IfResult = Result287;
	}
	float NiagaraScript_14271_Func_Output_RadiansAngle;
	NiagaraScript_14271_Func_(In_QuatA, Quat_IfResult, NiagaraScript_14271_Func_Output_RadiansAngle, Context);
	float Result294 = 1 - In_LerpFactor;
	float Result295 = NiagaraScript_14271_Func_Output_RadiansAngle * Result294;
	float NiagaraScript_14270_Func_Output_SinXoverX;
	NiagaraScript_14270_Func_(Result295, NiagaraScript_14270_Func_Output_SinXoverX, Context);
	float NiagaraScript_14270_Func_Output_SinXoverX1;
	NiagaraScript_14270_Func_(NiagaraScript_14271_Func_Output_RadiansAngle, NiagaraScript_14270_Func_Output_SinXoverX1, Context);
	float Result300 = NiagaraScript_14270_Func_Output_SinXoverX / NiagaraScript_14270_Func_Output_SinXoverX1;
	float Result301 = Result300 * Result294;
	float4 Result302 = Result301 * In_QuatA;
	float Result303 = NiagaraScript_14271_Func_Output_RadiansAngle * In_LerpFactor;
	float NiagaraScript_14270_Func_Output_SinXoverX2;
	NiagaraScript_14270_Func_(Result303, NiagaraScript_14270_Func_Output_SinXoverX2, Context);
	float Result304 = NiagaraScript_14270_Func_Output_SinXoverX2 / NiagaraScript_14270_Func_Output_SinXoverX1;
	float Result305 = Result304 * In_LerpFactor;
	float4 Result306 = Quat_IfResult * Result305;
	float4 Result307 = Result302 + Result306;
	float4 Result308 = normalize(Result307);
	Out_Quaternion = Result308;
}



void AS_MovementUpdate_InterpolateOverTime_Quaternion002_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float4 In_TargetValue, float4 In_InitialValue, out float4 Out_MovingAverage, inout FSimulationContext Context)
{
	float4 AS_MovementUpdate_InterpolateOverTime_Quaternion002_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	AS_MovementUpdate_InterpolateOverTime_Quaternion002_FN_FirstFrame_Numeric_Emitter_Func_(Context.MapUpdate.Transient.FirstFrame, In_InitialValue, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage, AS_MovementUpdate_InterpolateOverTime_Quaternion002_FN_FirstFrame_Numeric_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage = AS_MovementUpdate_InterpolateOverTime_Quaternion002_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	float Result284 = In_RateOfChange * In_DeltaTime;
	float NiagaraScript_14227_Particle_Func_Output_ClampedValue1;
	NiagaraScript_14227_Particle_Func_(Result284, NiagaraScript_14227_Particle_Func_Output_ClampedValue1, Context);
	float4 NiagaraScript_14269_Func_Output_Quaternion;
	NiagaraScript_14269_Func_(Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage, In_TargetValue, NiagaraScript_14227_Particle_Func_Output_ClampedValue1, NiagaraScript_14269_Func_Output_Quaternion, Context);
	Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage = NiagaraScript_14269_Func_Output_Quaternion;
	Out_MovingAverage = Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage;
}



void AS_MovementUpdate_InterpolateOverTime_Quaternion003_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float4 In_InitializationValue, float4 In_CurrentParameterMapValue, out float4 Out_Value, inout FSimulationContext Context)
{
	float4 NiagaraNumeric_IfResult2;
	if(In_IsFirstFrame)
	{
	NiagaraNumeric_IfResult2 = In_InitializationValue;
	}
	else
	{
	NiagaraNumeric_IfResult2 = In_CurrentParameterMapValue;
	}
	Out_Value = NiagaraNumeric_IfResult2;
}



void AS_MovementUpdate_InterpolateOverTime_Quaternion003_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float4 In_TargetValue, float4 In_InitialValue, out float4 Out_MovingAverage, inout FSimulationContext Context)
{
	float4 AS_MovementUpdate_InterpolateOverTime_Quaternion003_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	AS_MovementUpdate_InterpolateOverTime_Quaternion003_FN_FirstFrame_Numeric_Emitter_Func_(Context.MapUpdate.Transient.FirstFrame, In_InitialValue, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage, AS_MovementUpdate_InterpolateOverTime_Quaternion003_FN_FirstFrame_Numeric_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage = AS_MovementUpdate_InterpolateOverTime_Quaternion003_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	float Result310 = In_RateOfChange * In_DeltaTime;
	float NiagaraScript_14227_Particle_Func_Output_ClampedValue2;
	NiagaraScript_14227_Particle_Func_(Result310, NiagaraScript_14227_Particle_Func_Output_ClampedValue2, Context);
	float4 NiagaraScript_14269_Func_Output_Quaternion5;
	NiagaraScript_14269_Func_(Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage, In_TargetValue, NiagaraScript_14227_Particle_Func_Output_ClampedValue2, NiagaraScript_14269_Func_Output_Quaternion5, Context);
	Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage = NiagaraScript_14269_Func_Output_Quaternion5;
	Out_MovingAverage = Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage;
}



void AS_MovementUpdate_InterpolateOverTime_Quaternion004_FN_FirstFrame_Numeric_Emitter_Func_(bool In_IsFirstFrame, float4 In_InitializationValue, float4 In_CurrentParameterMapValue, out float4 Out_Value, inout FSimulationContext Context)
{
	float4 NiagaraNumeric_IfResult3;
	if(In_IsFirstFrame)
	{
	NiagaraNumeric_IfResult3 = In_InitializationValue;
	}
	else
	{
	NiagaraNumeric_IfResult3 = In_CurrentParameterMapValue;
	}
	Out_Value = NiagaraNumeric_IfResult3;
}



void AS_MovementUpdate_InterpolateOverTime_Quaternion004_Emitter_Func_(float In_RateOfChange, float In_DeltaTime, float4 In_TargetValue, float4 In_InitialValue, out float4 Out_MovingAverage, inout FSimulationContext Context)
{
	float4 AS_MovementUpdate_InterpolateOverTime_Quaternion004_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	AS_MovementUpdate_InterpolateOverTime_Quaternion004_FN_FirstFrame_Numeric_Emitter_Func_(Context.MapUpdate.Transient.FirstFrame, In_InitialValue, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage, AS_MovementUpdate_InterpolateOverTime_Quaternion004_FN_FirstFrame_Numeric_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage = AS_MovementUpdate_InterpolateOverTime_Quaternion004_FN_FirstFrame_Numeric_Emitter_Func_Output_Value;
	float Result311 = In_RateOfChange * In_DeltaTime;
	float NiagaraScript_14227_Particle_Func_Output_ClampedValue3;
	NiagaraScript_14227_Particle_Func_(Result311, NiagaraScript_14227_Particle_Func_Output_ClampedValue3, Context);
	float4 NiagaraScript_14269_Func_Output_Quaternion6;
	NiagaraScript_14269_Func_(Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage, In_TargetValue, NiagaraScript_14227_Particle_Func_Output_ClampedValue3, NiagaraScript_14269_Func_Output_Quaternion6, Context);
	Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage = NiagaraScript_14269_Func_Output_Quaternion6;
	Out_MovingAverage = Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage;
}



void AS_MovementUpdate_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Particles.AS_DRandomOrientation = Context.MapUpdate.Particles.MeshOrientation;
	float Constant355 = 10;
	float Output117;
	Output117 = Constant355;
	bool Constant356 = false;
	float3 NiagaraScript_14273_Particle_Func_Output_X;
	float3 NiagaraScript_14273_Particle_Func_Output_Y;
	float3 NiagaraScript_14273_Particle_Func_Output_Z;
	NiagaraScript_14273_Particle_Func_(Context.MapUpdate.Particles.MeshOrientation, Constant356, NiagaraScript_14273_Particle_Func_Output_X, NiagaraScript_14273_Particle_Func_Output_Y, NiagaraScript_14273_Particle_Func_Output_Z, Context);
	int Constant360 = (0);
	int Constant361 = (0);
	int Constant362 = -1;
	int Constant363 = (0);
	int Constant364 = 0;
	int Constant365 = (0);
	int Constant366 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant361, Constants_Emitter_AS_MovementUpdate_FloatMin, Constants_Emitter_AS_MovementUpdate_FloatMax, Constant362, Constant363, Constant364, Constant365, Constant366, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	float Constant368 = -1;
	float Result276 = NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat * Constant368;
	int Constant369 = -1;
	int Constant370 = (0);
	int Constant371 = 0;
	int Constant372 = (0);
	int Constant373 = (0);
	float NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue;
	bool NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant360, Result276, NiagaraScript_14217_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, Constant369, Constant370, Constant371, Constant372, Constant373, NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue, NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	float X7;
	float Y7;
	X7 = NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue.x;
	Y7 = NiagaraScript_14274_Particle_Particle_ScriptUsage5_EvaluationType_NewEnumerator1_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomValue.y;
	float Constant375 = 0;
	float3 Output118;
	Output118.x = X7;
	Output118.y = Y7;
	Output118.z = Constant375;
	float4 NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Quat;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_X;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Y;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Z;
	NiagaraScript_14272_Particle_XVectorisDominant_false_Func_(NiagaraScript_14273_Particle_Func_Output_X, Output118, NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Quat, NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_X, NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Y, NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Z, Context);
	float4 AS_MovementUpdate_InterpolateOverTime_Quaternion002_Emitter_Func_Output_MovingAverage;
	AS_MovementUpdate_InterpolateOverTime_Quaternion002_Emitter_Func_(Output117, Context.MapUpdate.Engine.DeltaTime, NiagaraScript_14272_Particle_XVectorisDominant_false_Func_Output_Quat, Context.MapUpdate.Particles.AS_DRandomOrientation, AS_MovementUpdate_InterpolateOverTime_Quaternion002_Emitter_Func_Output_MovingAverage, Context);
	Context.MapUpdate.Particles.AS_DRandomOrientation = AS_MovementUpdate_InterpolateOverTime_Quaternion002_Emitter_Func_Output_MovingAverage;
	int Constant384 = 3;
	bool Result309 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant384);
	float4 Constant385 = float4(0.0, 0.0, 0.0, 1.0);
	float4 Quat4f_SelectResult23 = Constant385;
	if(Context.MapUpdate.Particles.AS_ObstacleNear != 0)
	{
	Quat4f_SelectResult23 = Context.MapUpdate.Particles.AS_DObstacleOrientation;
	}
	if(Context.MapUpdate.Particles.AS_ObstacleNear == 0)
	{
	Quat4f_SelectResult23 = Context.MapUpdate.Particles.AS_DEscapeOrientation;
	}
	float4 NiagaraScript_14269_Func_Output_Quaternion1;
	NiagaraScript_14269_Func_(Context.MapUpdate.Particles.AS_DTargetOrientation, Context.MapUpdate.Particles.AS_DRandomOrientation, Constants_Emitter_AS_MovementUpdate_RandomFactor, NiagaraScript_14269_Func_Output_Quaternion1, Context);
	float4 NiagaraScript_14269_Func_Output_Quaternion2;
	NiagaraScript_14269_Func_(Context.MapUpdate.Particles.AS_DTargetOrientation, Context.MapUpdate.Particles.AS_DCohesionOrientation, Constants_Emitter_AS_MovementUpdate_GroupFactor, NiagaraScript_14269_Func_Output_Quaternion2, Context);
	float Constant386 = 0.5;
	float4 NiagaraScript_14269_Func_Output_Quaternion3;
	NiagaraScript_14269_Func_(NiagaraScript_14269_Func_Output_Quaternion1, NiagaraScript_14269_Func_Output_Quaternion2, Constant386, NiagaraScript_14269_Func_Output_Quaternion3, Context);
	float4 Constant387 = float4(0.0, 0.0, 0.0, 1.0);
	float4 Quat4f_SelectResult24 = Constant387;
	if(Context.MapUpdate.Particles.AS_ObstacleNear != 0)
	{
	Quat4f_SelectResult24 = Context.MapUpdate.Particles.AS_DObstacleOrientation;
	}
	if(Context.MapUpdate.Particles.AS_ObstacleNear == 0)
	{
	Quat4f_SelectResult24 = NiagaraScript_14269_Func_Output_Quaternion3;
	}
	float Constant388 = 0.6;
	float4 NiagaraScript_14269_Func_Output_Quaternion4;
	NiagaraScript_14269_Func_(Quat4f_SelectResult24, Context.MapUpdate.Particles.AS_DSeparationOrientation, Constant388, NiagaraScript_14269_Func_Output_Quaternion4, Context);
	float4 Constant389 = float4(0.0, 0.0, 0.0, 1.0);
	float4 Quat4f_SelectResult25 = Constant389;
	if(Context.MapUpdate.Particles.SeparationActive != 0)
	{
	Quat4f_SelectResult25 = NiagaraScript_14269_Func_Output_Quaternion4;
	}
	if(Context.MapUpdate.Particles.SeparationActive == 0)
	{
	Quat4f_SelectResult25 = Quat4f_SelectResult24;
	}
	float4 Constant390 = float4(0.0, 0.0, 0.0, 1.0);
	float4 Quat4f_SelectResult26 = Constant390;
	if(Result309 != 0)
	{
	Quat4f_SelectResult26 = Quat4f_SelectResult23;
	}
	if(Result309 == 0)
	{
	Quat4f_SelectResult26 = Quat4f_SelectResult25;
	}
	bool Constant391 = false;
	float3 NiagaraScript_14273_Particle_Func_Output_X1;
	float3 NiagaraScript_14273_Particle_Func_Output_Y1;
	float3 NiagaraScript_14273_Particle_Func_Output_Z1;
	NiagaraScript_14273_Particle_Func_(Quat4f_SelectResult26, Constant391, NiagaraScript_14273_Particle_Func_Output_X1, NiagaraScript_14273_Particle_Func_Output_Y1, NiagaraScript_14273_Particle_Func_Output_Z1, Context);
	float3 Constant392 = float3(0,0,1);
	float3 NiagaraScript_14275_Func_Output_Ouput1;
	NiagaraScript_14275_Func_(NiagaraScript_14273_Particle_Func_Output_X1, Constant392, NiagaraScript_14275_Func_Output_Ouput1, Context);
	float3 Constant393 = float3(0,0,1);
	float4 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Quat1;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_X1;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Y1;
	float3 NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Z1;
	NiagaraScript_14272_Particle_XVectorisDominant_true_Func_(NiagaraScript_14275_Func_Output_Ouput1, Constant393, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Quat1, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_X1, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Y1, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Z1, Context);
	float4 AS_MovementUpdate_InterpolateOverTime_Quaternion003_Emitter_Func_Output_MovingAverage;
	AS_MovementUpdate_InterpolateOverTime_Quaternion003_Emitter_Func_(Constants_Emitter_AS_MovementUpdate_RotationRate, Context.MapUpdate.Engine.DeltaTime, NiagaraScript_14272_Particle_XVectorisDominant_true_Func_Output_Quat1, Context.MapUpdate.Particles.AS_DTargetOrientation, AS_MovementUpdate_InterpolateOverTime_Quaternion003_Emitter_Func_Output_MovingAverage, Context);
	Context.MapUpdate.Particles.AS_DTargetOrientation = AS_MovementUpdate_InterpolateOverTime_Quaternion003_Emitter_Func_Output_MovingAverage;
	float4 AS_MovementUpdate_InterpolateOverTime_Quaternion004_Emitter_Func_Output_MovingAverage;
	AS_MovementUpdate_InterpolateOverTime_Quaternion004_Emitter_Func_(Constants_Emitter_AS_MovementUpdate_RotationRate, Context.MapUpdate.Engine.DeltaTime, Context.MapUpdate.Particles.AS_DTargetOrientation, Context.MapUpdate.Particles.MeshOrientation, AS_MovementUpdate_InterpolateOverTime_Quaternion004_Emitter_Func_Output_MovingAverage, Context);
	Context.MapUpdate.Particles.MeshOrientation = AS_MovementUpdate_InterpolateOverTime_Quaternion004_Emitter_Func_Output_MovingAverage;
	bool Constant394 = false;
	float3 NiagaraScript_14273_Particle_Func_Output_X2;
	float3 NiagaraScript_14273_Particle_Func_Output_Y2;
	float3 NiagaraScript_14273_Particle_Func_Output_Z2;
	NiagaraScript_14273_Particle_Func_(Context.MapUpdate.Particles.MeshOrientation, Constant394, NiagaraScript_14273_Particle_Func_Output_X2, NiagaraScript_14273_Particle_Func_Output_Y2, NiagaraScript_14273_Particle_Func_Output_Z2, Context);
	float3 Result312 = NiagaraScript_14273_Particle_Func_Output_X2 * Context.MapUpdate.Particles.CurrentSpeed;
	float3 Result313 = Context.MapUpdate.Particles.Position + Result312;
	Context.MapUpdate.Particles.Position = Result313;
}



void NiagaraScript_14264_Particle_ClampResults_true_Func_(float In_Value, float In_InputMin, float In_InputMax, float In_OutputMin, float In_OutputMax, out float Out_NewOutput, inout FSimulationContext Context)
{
	float Result322 = In_Value - In_InputMin;
	float Result323 = In_InputMax - In_InputMin;
	float Result324 = Result322 / Result323;
	float Constant408 = 0;
	float Constant409 = 1;
	float Result325 = clamp(Result324,Constant408,Constant409);
	float Result326 = lerp(In_OutputMin,In_OutputMax,Result325);
	Out_NewOutput = Result326;
}



void NiagaraScript_14265_Particle_ClampResults_true_Func_(float In_Value, float In_InputMin, float In_InputMax, float In_OutputMin, float In_OutputMax, out float Out_NewOutput, inout FSimulationContext Context)
{
	float Result338 = In_Value - In_InputMin;
	float Result339 = In_InputMax - In_InputMin;
	float Result340 = Result338 / Result339;
	float Constant440 = 0;
	float Constant441 = 1;
	float Result341 = clamp(Result340,Constant440,Constant441);
	float Result342 = lerp(In_OutputMin,In_OutputMax,Result341);
	Out_NewOutput = Result342;
}



void CrabAnimGraph_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant395 = 2;
	bool Result314 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant395);
	float Output120;
	Output120 = Result314;
	int Constant396 = 1;
	bool Result315 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant396);
	float Output121;
	Output121 = Result315;
	int Constant397 = 4;
	bool Result316 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant397);
	float Output122;
	Output122 = Result316;
	int Constant398 = 0;
	bool Result317 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant398);
	float Output123;
	Output123 = Result317;
	Context.MapUpdate.Particles.AS_AnimMove = Output120;
	Context.MapUpdate.Particles.AS_AnimIdle = Output121;
	Context.MapUpdate.Particles.AS_AnimBury = Output122;
	Context.MapUpdate.Particles.AS_AnimUnbury = Output123;
	int Constant399 = 2;
	bool Result318 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant399);
	float Result319 = Context.MapUpdate.Engine.DeltaTime * Constants_Emitter_CrabAnimGraph_SpeedAnimMove;
	float Result320 = Context.MapUpdate.Particles.CounterMove + Result319;
	float Constant400 = (0.0);
	float NiagaraFloat_SelectResult27 = Constant400;
	if(Result318 != 0)
	{
	NiagaraFloat_SelectResult27 = Result320;
	}
	if(Result318 == 0)
	{
	NiagaraFloat_SelectResult27 = Context.MapUpdate.Particles.CounterMove;
	}
	Context.MapUpdate.Particles.CounterMove = NiagaraFloat_SelectResult27;
	float Constant401 = 1;
	bool Result321 = NiagaraAll(Context.MapUpdate.Particles.CounterMove >= Constant401);
	float Constant402 = 0;
	float Constant403 = (0.0);
	float NiagaraFloat_SelectResult28 = Constant403;
	if(Result321 != 0)
	{
	NiagaraFloat_SelectResult28 = Constant402;
	}
	if(Result321 == 0)
	{
	NiagaraFloat_SelectResult28 = Context.MapUpdate.Particles.CounterMove;
	}
	Context.MapUpdate.Particles.CounterMove = NiagaraFloat_SelectResult28;
	float Constant404 = 0;
	float Constant405 = 1;
	float Constant406 = 0.025;
	float Constant407 = 1;
	float NiagaraScript_14264_Particle_ClampResults_true_Func_Output_NewOutput;
	NiagaraScript_14264_Particle_ClampResults_true_Func_(Context.MapUpdate.Particles.CounterMove, Constant404, Constant405, Constant406, Constant407, NiagaraScript_14264_Particle_ClampResults_true_Func_Output_NewOutput, Context);
	Context.MapUpdate.Particles.AS_AnimMoveAlpha = NiagaraScript_14264_Particle_ClampResults_true_Func_Output_NewOutput;
	int Constant410 = 1;
	bool Result327 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant410);
	float Result328 = Context.MapUpdate.Engine.DeltaTime * Constants_Emitter_CrabAnimGraph_SpeedAnimIdle;
	float Result329 = Context.MapUpdate.Particles.CounterIdle + Result328;
	float Constant411 = (0.0);
	float NiagaraFloat_SelectResult29 = Constant411;
	if(Result327 != 0)
	{
	NiagaraFloat_SelectResult29 = Result329;
	}
	if(Result327 == 0)
	{
	NiagaraFloat_SelectResult29 = Context.MapUpdate.Particles.CounterIdle;
	}
	Context.MapUpdate.Particles.CounterIdle = NiagaraFloat_SelectResult29;
	float Constant412 = 1;
	bool Result330 = NiagaraAll(Context.MapUpdate.Particles.CounterIdle >= Constant412);
	float Constant413 = 0;
	float Constant414 = (0.0);
	float NiagaraFloat_SelectResult30 = Constant414;
	if(Result330 != 0)
	{
	NiagaraFloat_SelectResult30 = Constant413;
	}
	if(Result330 == 0)
	{
	NiagaraFloat_SelectResult30 = Context.MapUpdate.Particles.CounterIdle;
	}
	Context.MapUpdate.Particles.CounterIdle = NiagaraFloat_SelectResult30;
	Context.MapUpdate.Particles.AS_AnimIdleAlpha = Context.MapUpdate.Particles.CounterIdle;
	int Constant415 = 1;
	bool Result331 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant415);
	float Constant416 = 0;
	int Constant417 = 4;
	bool Result332 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant417);
	int Constant418 = 0;
	bool Result333 = NiagaraAll(Context.MapUpdate.Particles.NewState == Constant418);
	bool Result334 = Result332 || Result333;
	float Result335 = Context.MapUpdate.Engine.DeltaTime * Constants_Emitter_CrabAnimGraph_SpeedAnimBury;
	float Result336 = Context.MapUpdate.Particles.CounterBury + Result335;
	float Constant419 = (0.0);
	float NiagaraFloat_SelectResult31 = Constant419;
	if(Result334 != 0)
	{
	NiagaraFloat_SelectResult31 = Result336;
	}
	if(Result334 == 0)
	{
	NiagaraFloat_SelectResult31 = Context.MapUpdate.Particles.CounterBury;
	}
	float Constant420 = (0.0);
	float NiagaraFloat_SelectResult32 = Constant420;
	if(Result331 != 0)
	{
	NiagaraFloat_SelectResult32 = Constant416;
	}
	if(Result331 == 0)
	{
	NiagaraFloat_SelectResult32 = NiagaraFloat_SelectResult31;
	}
	Context.MapUpdate.Particles.CounterBury = NiagaraFloat_SelectResult32;
	float Constant421 = 1;
	bool Result337 = NiagaraAll(Context.MapUpdate.Particles.CounterBury >= Constant421);
	float Constant422 = 0;
	float Constant423 = (0.0);
	float NiagaraFloat_SelectResult33 = Constant423;
	if(Result337 != 0)
	{
	NiagaraFloat_SelectResult33 = Constant422;
	}
	if(Result337 == 0)
	{
	NiagaraFloat_SelectResult33 = Context.MapUpdate.Particles.CounterBury;
	}
	Context.MapUpdate.Particles.CounterBury = NiagaraFloat_SelectResult33;
	float Constant424 = 0;
	float Constant425 = 1;
	float Constant426 = 1;
	float Constant427 = 0;
	float Constant428 = 0;
	float Constant429 = 0;
	float Constant430 = 0;
	float Constant431 = 0;
	float Constant432 = (0.0);
	float NiagaraFloat_SelectResult34 = Constant432;
	if(Context.MapUpdate.Particles.NewState == 0)
	{
	NiagaraFloat_SelectResult34 = Constant426;
	}
	if(Context.MapUpdate.Particles.NewState == 1)
	{
	NiagaraFloat_SelectResult34 = Constant427;
	}
	if(Context.MapUpdate.Particles.NewState == 2)
	{
	NiagaraFloat_SelectResult34 = Constant428;
	}
	if(Context.MapUpdate.Particles.NewState == 3)
	{
	NiagaraFloat_SelectResult34 = Constant429;
	}
	if(Context.MapUpdate.Particles.NewState == 4)
	{
	NiagaraFloat_SelectResult34 = Constant430;
	}
	if(Context.MapUpdate.Particles.NewState == 5)
	{
	NiagaraFloat_SelectResult34 = Constant431;
	}
	float Constant433 = 0.03;
	float Constant434 = 0;
	float Constant435 = 0;
	float Constant436 = 0;
	float Constant437 = 1;
	float Constant438 = 0;
	float Constant439 = (0.0);
	float NiagaraFloat_SelectResult35 = Constant439;
	if(Context.MapUpdate.Particles.NewState == 0)
	{
	NiagaraFloat_SelectResult35 = Constant433;
	}
	if(Context.MapUpdate.Particles.NewState == 1)
	{
	NiagaraFloat_SelectResult35 = Constant434;
	}
	if(Context.MapUpdate.Particles.NewState == 2)
	{
	NiagaraFloat_SelectResult35 = Constant435;
	}
	if(Context.MapUpdate.Particles.NewState == 3)
	{
	NiagaraFloat_SelectResult35 = Constant436;
	}
	if(Context.MapUpdate.Particles.NewState == 4)
	{
	NiagaraFloat_SelectResult35 = Constant437;
	}
	if(Context.MapUpdate.Particles.NewState == 5)
	{
	NiagaraFloat_SelectResult35 = Constant438;
	}
	float NiagaraScript_14265_Particle_ClampResults_true_Func_Output_NewOutput;
	NiagaraScript_14265_Particle_ClampResults_true_Func_(Context.MapUpdate.Particles.CounterBury, Constant424, Constant425, NiagaraFloat_SelectResult34, NiagaraFloat_SelectResult35, NiagaraScript_14265_Particle_ClampResults_true_Func_Output_NewOutput, Context);
	Context.MapUpdate.Particles.AS_AnimBuryAlpha = NiagaraScript_14265_Particle_ClampResults_true_Func_Output_NewOutput;
	Context.MapUpdate.Particles.AS_AnimUnburyAlpha = NiagaraScript_14265_Particle_ClampResults_true_Func_Output_NewOutput;
	Context.MapUpdate.Particles.TESTFloat = Context.MapUpdate.Particles.CounterBury;
}



void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context)
{
	float X8;
	float Y8;
	float Z7;
	float W1;
	X8 = Context.MapUpdate.Particles.DynamicMaterialParameter.x;
	Y8 = Context.MapUpdate.Particles.DynamicMaterialParameter.y;
	Z7 = Context.MapUpdate.Particles.DynamicMaterialParameter.z;
	W1 = Context.MapUpdate.Particles.DynamicMaterialParameter.w;
	float float_IfResult5;
	if(Context.MapUpdate.DynamicMaterialParameters.Param0WriteEnabled)
	{
	float_IfResult5 = Context.MapUpdate.DynamicMaterialParameters.Index0Param1;
	}
	else
	{
	float_IfResult5 = X8;
	}
	float float_IfResult6;
	if(Context.MapUpdate.DynamicMaterialParameters.Param1WriteEnabled)
	{
	float_IfResult6 = Context.MapUpdate.DynamicMaterialParameters.Index0Param2;
	}
	else
	{
	float_IfResult6 = Y8;
	}
	float float_IfResult7;
	if(Context.MapUpdate.DynamicMaterialParameters.Param2WriteEnabled)
	{
	float_IfResult7 = Context.MapUpdate.DynamicMaterialParameters.Index0Param3;
	}
	else
	{
	float_IfResult7 = Z7;
	}
	float float_IfResult8;
	if(Context.MapUpdate.DynamicMaterialParameters.Param3WriteEnabled)
	{
	float_IfResult8 = Context.MapUpdate.DynamicMaterialParameters.Index0Param4;
	}
	else
	{
	float_IfResult8 = W1;
	}
	float4 Output124;
	Output124.x = float_IfResult5;
	Output124.y = float_IfResult6;
	Output124.z = float_IfResult7;
	Output124.w = float_IfResult8;
	Context.MapUpdate.Particles.DynamicMaterialParameter = Output124;
	float X9;
	float Y9;
	float Z8;
	float W2;
	X9 = Context.MapUpdate.Particles.DynamicMaterialParameter1.x;
	Y9 = Context.MapUpdate.Particles.DynamicMaterialParameter1.y;
	Z8 = Context.MapUpdate.Particles.DynamicMaterialParameter1.z;
	W2 = Context.MapUpdate.Particles.DynamicMaterialParameter1.w;
	float float_IfResult9;
	if(Context.MapUpdate.DynamicMaterialParameters.Param0WriteEnabled1)
	{
	float_IfResult9 = Context.MapUpdate.DynamicMaterialParameters.Index1Param1;
	}
	else
	{
	float_IfResult9 = X9;
	}
	float float_IfResult10;
	if(Context.MapUpdate.DynamicMaterialParameters.Param1WriteEnabled1)
	{
	float_IfResult10 = Context.MapUpdate.DynamicMaterialParameters.Index1Param2;
	}
	else
	{
	float_IfResult10 = Y9;
	}
	float float_IfResult11;
	if(Context.MapUpdate.DynamicMaterialParameters.Param2WriteEnabled1)
	{
	float_IfResult11 = Context.MapUpdate.DynamicMaterialParameters.Index1Param3;
	}
	else
	{
	float_IfResult11 = Z8;
	}
	float float_IfResult12;
	if(Context.MapUpdate.DynamicMaterialParameters.Param3WriteEnabled1)
	{
	float_IfResult12 = Context.MapUpdate.DynamicMaterialParameters.Index1Param4;
	}
	else
	{
	float_IfResult12 = W2;
	}
	float4 Output125;
	Output125.x = float_IfResult9;
	Output125.y = float_IfResult10;
	Output125.z = float_IfResult11;
	Output125.w = float_IfResult12;
	Context.MapUpdate.Particles.DynamicMaterialParameter1 = Output125;
}


float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{

	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position, Engine_Owner_Position, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity, Engine_Owner_Velocity, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis, Engine_Owner_SystemXAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis, Engine_Owner_SystemYAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis, Engine_Owner_SystemZAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale, Engine_Owner_Scale, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LWCTile = lerp(PREV_Engine_Owner_LWCTile, Engine_Owner_LWCTile, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Emitter.DistanceTraveled = lerp(PREV_Emitter_DistanceTraveled, Emitter_DistanceTraveled, SpawnInterp);
	Context.MapSpawn.Emitter.AlphaScale = lerp(PREV_Emitter_AlphaScale, Emitter_AlphaScale, SpawnInterp);
	Context.MapSpawn.NPC.FX_CrabCollection.PlayerLocation = lerp(PREV_NPC_FX_CrabCollection_PlayerLocation.xyz, NPC_FX_CrabCollection_PlayerLocation.xyz, SpawnInterp);
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;

}


void HandlePreviousValuesForSpawn(inout FSimulationContext Context)
{
Context.MapSpawn.Particles.Previous.AS_DArrowScale = Context.MapSpawn.Particles.AS_DArrowScale;

Context.MapSpawn.Particles.Previous.AS_DCohesionOrientation = Context.MapSpawn.Particles.AS_DCohesionOrientation;

Context.MapSpawn.Particles.Previous.AS_DCohesionOrientationScale = Context.MapSpawn.Particles.AS_DCohesionOrientationScale;

Context.MapSpawn.Particles.Previous.AS_DEscapeOrientation = Context.MapSpawn.Particles.AS_DEscapeOrientation;

Context.MapSpawn.Particles.Previous.AS_DEscapeOrientationScale = Context.MapSpawn.Particles.AS_DEscapeOrientationScale;

Context.MapSpawn.Particles.Previous.AS_DMeshRadiusScale = Context.MapSpawn.Particles.AS_DMeshRadiusScale;

Context.MapSpawn.Particles.Previous.AS_DObstacleOrientation = Context.MapSpawn.Particles.AS_DObstacleOrientation;

Context.MapSpawn.Particles.Previous.AS_DObstacleOrientationScale = Context.MapSpawn.Particles.AS_DObstacleOrientationScale;

Context.MapSpawn.Particles.Previous.AS_DPointPosition = Context.MapSpawn.Particles.AS_DPointPosition;

Context.MapSpawn.Particles.Previous.AS_DPointPositionScale = Context.MapSpawn.Particles.AS_DPointPositionScale;

Context.MapSpawn.Particles.Previous.AS_DRandomOrientation = Context.MapSpawn.Particles.AS_DRandomOrientation;

Context.MapSpawn.Particles.Previous.AS_DRandomOrientationScale = Context.MapSpawn.Particles.AS_DRandomOrientationScale;

Context.MapSpawn.Particles.Previous.AS_DSeparationOrientation = Context.MapSpawn.Particles.AS_DSeparationOrientation;

Context.MapSpawn.Particles.Previous.AS_DSeparationOrientationScale = Context.MapSpawn.Particles.AS_DSeparationOrientationScale;

Context.MapSpawn.Particles.Previous.AS_DSphereCenterScale = Context.MapSpawn.Particles.AS_DSphereCenterScale;

Context.MapSpawn.Particles.Previous.AS_DTargetOrientation = Context.MapSpawn.Particles.AS_DTargetOrientation;

Context.MapSpawn.Particles.Previous.AS_DTargetOrientationScale = Context.MapSpawn.Particles.AS_DTargetOrientationScale;

Context.MapSpawn.Particles.Previous.CrabScale = Context.MapSpawn.Particles.CrabScale;

Context.MapSpawn.Particles.Previous.MeshOrientation = Context.MapSpawn.Particles.MeshOrientation;

Context.MapSpawn.Particles.Previous.Position = Context.MapSpawn.Particles.Position;

Context.MapSpawn.Particles.Previous.SpriteSize = Context.MapSpawn.Particles.SpriteSize;

Context.MapSpawn.Particles.Previous.Velocity = Context.MapSpawn.Particles.Velocity;

}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}


void SimulateMapSpawn(inout FSimulationContext Context)
{


	float3 Constant = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DMeshRadiusScale = Constant;
	float3 Constant1 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.MiddlePositionOfNeighbors = Constant1;
	float3 Constant2 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DSphereCenterScale = Constant2;
	float4 Constant3 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.MiddleRotationOfNeighbors = Constant3;
	float3 Constant4 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DArrowScale = Constant4;
	float3 Constant5 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.WorldSpaceCollisionCenter = Constant5;
	float3 Constant6 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DPointPositionScale = Constant6;
	int Constant7 = (0);
	Context.MapSpawn.Particles.NumSeparationParticlesAtRadius = Constant7;
	float3 Constant8 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DPointPosition = Constant8;
	int Constant9 = (int)0;
	Context.MapSpawn.Particles.NewState = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.CrabScale = Constant10;
	float Constant11 = (0.0);
	Context.MapSpawn.Particles.MaterialRandom = Constant11;
	float Constant12 = (0.0);
	Context.MapSpawn.Particles.Lifetime = Constant12;
	float Constant13 = 1;
	Context.MapSpawn.Particles.Mass = Constant13;
	float2 Constant14 = float2(0.0, 0.0);
	Context.MapSpawn.Particles.SpriteSize = Constant14;
	float3 Constant15 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant15;
	float3 Constant16 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Position = Constant16;
	float Constant17 = (0.0);
	Context.MapSpawn.Particles.CrabBuryAlpha = Constant17;
	float4 Constant18 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.AS_DRandomOrientationColor = Constant18;
	float3 Constant19 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DRandomOrientationScale = Constant19;
	float4 Constant20 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.AS_DRandomOrientation = Constant20;
	float4 Constant21 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.AS_DSeparationOrientationColor = Constant21;
	float3 Constant22 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DSeparationOrientationScale = Constant22;
	float4 Constant23 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.AS_DSeparationOrientation = Constant23;
	float4 Constant24 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.AS_DCohesionOrientationColor = Constant24;
	float3 Constant25 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DCohesionOrientationScale = Constant25;
	float4 Constant26 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.AS_DCohesionOrientation = Constant26;
	float4 Constant27 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.AS_DTargetOrientationColor = Constant27;
	float3 Constant28 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DTargetOrientationScale = Constant28;
	float4 Constant29 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.AS_DTargetOrientation = Constant29;
	float4 Constant30 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.AS_DObstacleOrientationColor = Constant30;
	float3 Constant31 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DObstacleOrientationScale = Constant31;
	float4 Constant32 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.AS_DObstacleOrientation = Constant32;
	float4 Constant33 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.AS_DEscapeOrientationColor = Constant33;
	float3 Constant34 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.AS_DEscapeOrientationScale = Constant34;
	float4 Constant35 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.AS_DEscapeOrientation = Constant35;
	float Constant36 = (0.0);
	Context.MapSpawn.Particles.AS_CrabLife = Constant36;
	float Constant37 = (0.0);
	Context.MapSpawn.Particles.AS_AnimMoveAlpha = Constant37;
	float4 Constant38 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.MeshOrientation = Constant38;
	float Constant39 = (0.0);
	Context.MapSpawn.Particles.StateTimeTamp = Constant39;
	float Constant40 = 0.2;
	Context.MapSpawn.Particles.StateDuration = Constant40;
	int Constant41 = 0;
	Context.MapSpawn.Particles.State = Constant41;
	float Constant42 = (0.0);
	Context.MapSpawn.Particles.NeighborRadius = Constant42;
	float Constant43 = (0.0);
	Context.MapSpawn.Particles.SeparationRadius = Constant43;
	float3 Constant44 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.SurfaceNormal = Constant44;
	float Constant45 = 0;
	Context.MapSpawn.Particles.Age = Constant45;
	float Constant46 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant46;
	float3 Constant47 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant47;
	float3 Constant48 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.Velocity = Constant48;
	float3 Constant49 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.Position = Constant49;
	float3 Constant50 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.PhysicsForce = Constant50;
	float3 Constant51 = float3(0,0,0);
	Context.MapSpawn.Particles.Previous.Velocity = Constant51;
	float3 Constant52 = float3(0,0,0);
	Context.MapSpawn.Particles.Previous.Position = Constant52;
	float Constant53 = 0;
	Context.MapSpawn.Particles.DistanceTraveled = Constant53;
	float4 Constant54 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.Color = Constant54;
	float Constant55 = (0.0);
	Context.MapSpawn.Particles.DistanceToCharacter = Constant55;
	float Constant56 = 0;
	Context.MapSpawn.Particles.AS_CrabUnburyState.IncrementOverTime.Counter = Constant56;
	float Constant57 = 0;
	Context.MapSpawn.Particles.AS_CrabIdleState.ChangeStateInTime.Counter = Constant57;
	float Constant58 = 0;
	Context.MapSpawn.Particles.CurrentSpeed = Constant58;
	float Constant59 = 0;
	Context.MapSpawn.Particles.TargetSpeed = Constant59;
	float Constant60 = 0;
	Context.MapSpawn.Particles.AS_CrabMoveState.ChangeStateInTime.Counter = Constant60;
	bool Constant61 = (false);
	Context.MapSpawn.Particles.AS_WantBury = Constant61;
	float Constant62 = 0;
	Context.MapSpawn.Particles.AS_CrabBurriedState.IncrementOverTime.Counter = Constant62;
	bool Constant63 = false;
	Context.MapSpawn.Particles.AS_ObstacleNear = Constant63;
	bool Constant64 = false;
	Context.MapSpawn.Particles.SeparationActive = Constant64;
	float Constant65 = (0.0);
	Context.MapSpawn.Particles.AS_AnimMove = Constant65;
	float Constant66 = (0.0);
	Context.MapSpawn.Particles.AS_AnimIdle = Constant66;
	float Constant67 = (0.0);
	Context.MapSpawn.Particles.AS_AnimBury = Constant67;
	float Constant68 = (0.0);
	Context.MapSpawn.Particles.AS_AnimUnbury = Constant68;
	float Constant69 = 0;
	Context.MapSpawn.Particles.CounterMove = Constant69;
	float Constant70 = 0;
	Context.MapSpawn.Particles.CounterIdle = Constant70;
	float Constant71 = (0.0);
	Context.MapSpawn.Particles.AS_AnimIdleAlpha = Constant71;
	float Constant72 = 0;
	Context.MapSpawn.Particles.CounterBury = Constant72;
	float Constant73 = (0.0);
	Context.MapSpawn.Particles.AS_AnimBuryAlpha = Constant73;
	float Constant74 = (0.0);
	Context.MapSpawn.Particles.AS_AnimUnburyAlpha = Constant74;
	float Constant75 = (0.0);
	Context.MapSpawn.Particles.TESTFloat = Constant75;
	float4 Constant76 = float4(0,0,0,0);
	Context.MapSpawn.Particles.DynamicMaterialParameter = Constant76;
	float4 Constant77 = float4(1,1,1,1);
	Context.MapSpawn.Particles.DynamicMaterialParameter1 = Constant77;

	int Constant78 = 0;
	Context.MapSpawn.SetVariables_67C60A234E3B58728099B3B2E6302A90.Particles.NewState = Constant78;
	EnterStatScope(1 );
	SetVariables_67C60A234E3B58728099B3B2E6302A90_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant79 = (0);
	float Constant80 = 0;
	float Constant81 = 1;
	int Constant82 = -1;
	int Constant83 = (0);
	int Constant84 = 0;
	int Constant85 = (0);
	int Constant86 = (0);
	float NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	bool NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant79, Constant80, Constant81, Constant82, Constant83, Constant84, Constant85, Constant86, NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = NiagaraScript_14217_Particle_Particle_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	int Constant88 = 0;
	Context.MapSpawn.InitializeParticle.PositionOffsetCoordinateSpace = Constant88;
	Context.MapSpawn.Particles.RibbonUVDistance = Context.MapSpawn.Emitter.DistanceTraveled;
	EnterStatScope(2 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(3 );
	CrabsInitiate_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	CrabsProjectPosition_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant169 = 0;
	Context.MapSpawn.ShapeLocation.SurfaceExpansionMode = Constant169;
	Context.MapSpawn.ShapeLocation.ApplyOwnerScale = Context.MapSpawn.Engine.Owner.Scale;
	float3 Constant170 = float3(0,0,0);
	Context.MapSpawn.Local.ShapeLocation.ShapeBitangent = Constant170;
	int Constant171 = 2;
	Context.MapSpawn.ShapeLocation.RotationCoordinateSpace = Constant171;
	Context.MapSpawn.ShapeLocation.RotationQuaternion = Context.MapSpawn.Engine.Owner.Rotation;
	bool Constant172 = false;
	Context.MapSpawn.ShapeLocation.InvertRotationQuaternion = Constant172;
	Context.MapSpawn.ShapeLocation.RotationMatrix = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	bool Constant173 = false;
	Context.MapSpawn.ShapeLocation.ShapeOrigin = Context.MapSpawn.Particles.Position;
	EnterStatScope(5 );
	ShapeLocation_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(6 );
	ConstrainVectorToCone_Emitter_Func_(Context);
	ExitStatScope( );




	HandlePreviousValuesForSpawn(Context);




}


void SimulateMapUpdate(inout FSimulationContext Context)
{

	RandomCounterDeterministic = 0;
	bool Constant224 = true;
	Context.MapUpdate.DataInstance.Alive = Constant224;
	bool Constant225 = false;
	Context.MapUpdate.ParticleState.LoopParticlesLifetime = Constant225;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	bool Constant226 = false;
	Context.MapUpdate.ParticleState.LetInfinitelyLivedParticlesDieWhenEmitterDeactivates = Constant226;
	EnterStatScope(7 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float3 Constant233 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant233;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant234 = float3(0,0,0);
	Context.MapUpdate.Transient.AdvectionVelocity = Constant234;
	float Constant235 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant235;
	bool Constant236 = true;
	Context.MapUpdate.Transient.DragIgnoreMass = Constant236;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.Previous.Velocity;
	bool Constant237 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant237;
	EnterStatScope(8 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.ColorFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float4 ColorFromCurve_Emitter_Func_Output_Value;
	ColorFromCurve_Emitter_Func_(ColorFromCurve_Emitter_Func_Output_Value, Context);
	float4 RandomRangeLinearColor001_Emitter_Func_Output_NewOutput001;
	RandomRangeLinearColor001_Emitter_Func_(RandomRangeLinearColor001_Emitter_Func_Output_NewOutput001, Context);
	Context.MapUpdate.RandomRangeLinearColor.Minimum = ColorFromCurve_Emitter_Func_Output_Value;
	Context.MapUpdate.RandomRangeLinearColor.Maximum = RandomRangeLinearColor001_Emitter_Func_Output_NewOutput001;
	float4 RandomRangeLinearColor_Emitter_Func_Output_NewOutput001;
	RandomRangeLinearColor_Emitter_Func_(RandomRangeLinearColor_Emitter_Func_Output_NewOutput001, Context);
	Context.MapUpdate.Color.Color = RandomRangeLinearColor_Emitter_Func_Output_NewOutput001;
	EnterStatScope(9 );
	Color_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.AS_EscapeCalculation.PlayerLocation = Context.MapUpdate.NPC.FX_CrabCollection.PlayerLocation;
	EnterStatScope(10 );
	AS_EscapeCalculation_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(11 );
	AS_CrabUnburyState_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(12 );
	AS_CrabIdleState_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(13 );
	AS_CrabMoveState_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(14 );
	AS_CrabEscapeState_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(15 );
	AS_CrabBuryState_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(16 );
	AS_CrabBurriedState_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(17 );
	AS_SpeedUpdate_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(18 );
	AS_MovementUpdate_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(19 );
	CrabAnimGraph_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.DynamicMaterialParameters.Index0Param1 = Context.MapUpdate.Particles.AS_AnimMoveAlpha;
	Context.MapUpdate.DynamicMaterialParameters.Index0Param2 = Context.MapUpdate.Particles.AS_AnimIdleAlpha;
	Context.MapUpdate.DynamicMaterialParameters.Index1Param4 = Context.MapUpdate.Particles.AS_AnimBury;
	Context.MapUpdate.DynamicMaterialParameters.Index1Param2 = Context.MapUpdate.Particles.AS_AnimIdle;
	Context.MapUpdate.DynamicMaterialParameters.Index1Param1 = Context.MapUpdate.Particles.AS_AnimMove;
	Context.MapUpdate.DynamicMaterialParameters.Index1Param3 = Context.MapUpdate.Particles.AS_AnimUnbury;
	Context.MapUpdate.DynamicMaterialParameters.Index0Param4 = Context.MapUpdate.Particles.AS_AnimBuryAlpha;
	Context.MapUpdate.DynamicMaterialParameters.Index0Param3 = Context.MapUpdate.Particles.AS_AnimUnburyAlpha;
	bool Constant442 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param0WriteEnabled = Constant442;
	bool Constant443 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param1WriteEnabled = Constant443;
	bool Constant444 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param2WriteEnabled = Constant444;
	bool Constant445 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param3WriteEnabled = Constant445;
	bool Constant446 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param0WriteEnabled1 = Constant446;
	bool Constant447 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param1WriteEnabled1 = Constant447;
	bool Constant448 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param2WriteEnabled1 = Constant448;
	bool Constant449 = true;
	Context.MapUpdate.DynamicMaterialParameters.Param3WriteEnabled1 = Constant449;
	EnterStatScope(20 );
	DynamicMaterialParameters_Emitter_Func_(Context);
	ExitStatScope( );



}
#line 4320 "/Engine/Generated/NiagaraEmitterInstance.ush"
#line 1 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceCollisionQuery.ush"
#line 9 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceCollisionQuery.ush"
float NDICollisionQuery_GetCustomSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.CustomDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r);

}

void NDICollisionQuery_QuerySceneDepthGPU(in float3 In_SamplePos, in float3 In_LWCTile, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	Out_SceneDepth = -1;
	Out_WorldPos = float3(0.0, 0.0, 0.0);
	Out_WorldNormal = float3(0.0, 0.0, 1.0);
	Out_IsInsideView = true;
	FLWCVector3 CameraPos =  GetPrimaryView() .WorldCameraOrigin;
	(CameraPos).Tile = ( ((CameraPos).Tile) - In_LWCTile) ;
	Out_CameraPosWorld = LWCToFloat(CameraPos);

	FLWCVector3 LwcSamplePos = MakeLWCVector3(In_LWCTile, In_SamplePos);
	float4 SamplePosition = float4(LWCToFloat(LWCAdd(LwcSamplePos,  GetPrimaryView() .PreViewTranslation)), 1);
	float4 ClipPosition = mul(SamplePosition, View.TranslatedWorldToClip);
	float2 ScreenPosition = ClipPosition.xy / ClipPosition.w;


	if (all(abs(ScreenPosition.xy) <= float2(1, 1)))
	{

		float2 ScreenUV = ScreenPosition * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
		float SceneDepth = CalcSceneDepth(ScreenUV);
		FLWCVector3 WorldPosition = WorldPositionFromSceneDepth(ScreenPosition.xy, SceneDepth);


		float3 WorldNormal = Texture2DSampleLevel(SceneTexturesStruct.GBufferATexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).xyz * 2.0 - 1.0;
#line 62 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceCollisionQuery.ush"
		(WorldPosition).Tile = ( ((WorldPosition).Tile) - In_LWCTile) ;


		Out_SceneDepth = SceneDepth;
		Out_WorldPos = LWCToFloat(WorldPosition);
		Out_WorldNormal = WorldNormal;
	}
	else
	{
		Out_IsInsideView = false;
	}
}

void NDICollisionQuery_QueryCustomDepthGPU(in float3 In_SamplePos, in float3 In_LWCTile, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	Out_SceneDepth = -1;
	Out_WorldPos = float3(0.0, 0.0, 0.0);
	Out_WorldNormal = float3(0.0, 0.0, 1.0);
	Out_IsInsideView = true;
	FLWCVector3 CameraPos =  GetPrimaryView() .WorldCameraOrigin;
	(CameraPos).Tile = ( ((CameraPos).Tile) - In_LWCTile) ;
	Out_CameraPosWorld = LWCToFloat(CameraPos);

	FLWCVector3 LwcSamplePos = MakeLWCVector3(In_LWCTile, In_SamplePos);
	float4 SamplePosition = float4(LWCToFloat(LWCAdd(LwcSamplePos,  GetPrimaryView() .PreViewTranslation)), 1);
	float4 ClipPosition = mul(SamplePosition, View.TranslatedWorldToClip);
	float2 ScreenPosition = ClipPosition.xy / ClipPosition.w;


	if (all(abs(ScreenPosition.xy) <= float2(1, 1)))
	{

		float2 ScreenUV = ScreenPosition * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
		float SceneDepth = NDICollisionQuery_GetCustomSceneDepth(ScreenUV);
		FLWCVector3 WorldPosition = WorldPositionFromSceneDepth(ScreenPosition.xy, SceneDepth);


		float3 WorldNormal = Texture2DSampleLevel(SceneTexturesStruct.GBufferATexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).xyz * 2.0 - 1.0;
#line 119 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceCollisionQuery.ush"
		(WorldPosition).Tile = ( ((WorldPosition).Tile) - In_LWCTile) ;


		Out_SceneDepth = SceneDepth;
		Out_WorldPos = LWCToFloat(WorldPosition);
		Out_WorldNormal = WorldNormal;
	}
	else
	{
		Out_IsInsideView = false;
	}
}

void NDICollisionQuery_QueryMeshDistanceFieldGPU(in float3 In_SamplePos, in float3 In_LWCTile, out float Out_DistanceToNearestSurface, out float3 Out_FieldGradient, out bool Out_IsDistanceFieldValid)
{

	FLWCVector3 LwcSamplePos = MakeLWCVector3(In_LWCTile, In_SamplePos);
	float3 SamplePosition = LWCToFloat(LwcSamplePos);

	Out_DistanceToNearestSurface = GetDistanceToNearestSurfaceGlobal(SamplePosition);
	Out_FieldGradient = GetDistanceFieldGradientGlobal(SamplePosition);
	Out_IsDistanceFieldValid = (MaxGlobalDFAOConeDistance > 0) && !(Out_DistanceToNearestSurface > 0 && all(Out_FieldGradient == float3(0,0,0.001f)));
#line 146 "/Plugin/FX/Niagara/Private/NiagaraDataInterfaceCollisionQuery.ush"
}
#line 4321 "/Engine/Generated/NiagaraEmitterInstance.ush"


float3 CrabsProjectPosition_DistanceFieldDI_SystemLWCTile;

void QuerySceneDepthGPU_CrabsProjectPosition_DistanceFieldDI(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	NDICollisionQuery_QuerySceneDepthGPU(In_SamplePos, CrabsProjectPosition_DistanceFieldDI_SystemLWCTile, Out_SceneDepth, Out_CameraPosWorld, Out_IsInsideView, Out_WorldPos, Out_WorldNormal);
}

void QueryCustomDepthGPU_CrabsProjectPosition_DistanceFieldDI(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	NDICollisionQuery_QueryCustomDepthGPU(In_SamplePos, CrabsProjectPosition_DistanceFieldDI_SystemLWCTile, Out_SceneDepth, Out_CameraPosWorld, Out_IsInsideView, Out_WorldPos, Out_WorldNormal);
}

void QueryMeshDistanceFieldGPU_CrabsProjectPosition_DistanceFieldDI(in float3 In_SamplePos, out float Out_DistanceToNearestSurface, out float3 Out_FieldGradient, out bool Out_IsDistanceFieldValid)
{
	NDICollisionQuery_QueryMeshDistanceFieldGPU(In_SamplePos, CrabsProjectPosition_DistanceFieldDI_SystemLWCTile, Out_DistanceToNearestSurface, Out_FieldGradient, Out_IsDistanceFieldValid);
}


void IssueAsyncRayTraceGpu_CrabsProjectPosition_DistanceFieldDI_UEImpureCall(int In_QueryID, float3 In_TraceStart, float3 In_TraceEnd, int In_TraceChannel, out bool Out_IsQueryValid)
{
	Out_IsQueryValid = false;
}

void ReserveRayTraceIndex_CrabsProjectPosition_DistanceFieldDI_UEImpureCall(int In_TraceCount, out int Out_StartQueryID, out bool Out_IndicesValid)
{
	Out_StartQueryID = -1;
	Out_IndicesValid = false;
}

void CreateAsyncRayTraceGpu_CrabsProjectPosition_DistanceFieldDI_UEImpureCall(float3 In_TraceStart, float3 In_TraceEnd, int In_TraceChannel, out int Out_QueryID, out bool Out_IsQueryValid)
{
	Out_QueryID = -1;
	Out_IsQueryValid = false;
}

void ReadAsyncRayTraceGpu_CrabsProjectPosition_DistanceFieldDI(int In_PreviousFrameQueryID, out bool Out_CollisionValid, out float Out_CollisionDistance, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal)
{
	Out_CollisionDistance = 0.0f;
	Out_CollisionPosWorld = float3(0.0f, 0.0f, 0.0f);
	Out_CollisionNormal = float3(0.0f, 0.0f, 0.0f);
	Out_CollisionValid = false;
}



float Emitter_ColorFromCurve_ColorCurve_MinTime;
float Emitter_ColorFromCurve_ColorCurve_MaxTime;
float Emitter_ColorFromCurve_ColorCurve_InvTimeRange;
uint Emitter_ColorFromCurve_ColorCurve_CurveLUTNumMinusOne;
uint Emitter_ColorFromCurve_ColorCurve_LUTOffset;
Buffer<float> Emitter_ColorFromCurve_ColorCurve_CurveLUT;

void GetCurveLUTIndices_Emitter_ColorFromCurve_ColorCurve(float Time, out uint IndexA, out uint IndexB, out float Fraction)
{
	float RemappedTime = saturate((Time - Emitter_ColorFromCurve_ColorCurve_MinTime) * Emitter_ColorFromCurve_ColorCurve_InvTimeRange) * float(Emitter_ColorFromCurve_ColorCurve_CurveLUTNumMinusOne);
	IndexA = floor(RemappedTime);
	IndexB = min(IndexA + 1, Emitter_ColorFromCurve_ColorCurve_CurveLUTNumMinusOne);
	Fraction = frac(RemappedTime);
}

float SampleCurveLUT_Emitter_ColorFromCurve_ColorCurve(uint index)
{



	return StaticInputFloat[Emitter_ColorFromCurve_ColorCurve_LUTOffset + index];

}
#line 4409 "/Engine/Generated/NiagaraEmitterInstance.ush"
void SampleColorCurve_Emitter_ColorFromCurve_ColorCurve(float Time, out float4 Value)
{
	uint IndexA, IndexB;
	float Fraction;
	GetCurveLUTIndices_Emitter_ColorFromCurve_ColorCurve(Time, IndexA, IndexB, Fraction);

	IndexA *= 4;
	IndexB *= 4;

	[unroll]
	for ( int i=0; i < 4; ++i )
	{
		Value[i] = lerp(SampleCurveLUT_Emitter_ColorFromCurve_ColorCurve(IndexA + i), SampleCurveLUT_Emitter_ColorFromCurve_ColorCurve(IndexB + i), Fraction);
	}
}


	void FastMatrixToQuaternion_FastPathLibrary(float4x4 Mat, out float4 Quat)
	{
		float tr = Mat[0][0] + Mat[1][1] + Mat[2][2];
		if (tr > 0.0f)
		{
			float InvS = rsqrt(tr + 1.f);
			float s = 0.5f * InvS;

			Quat.x = (Mat[1][2] - Mat[2][1]) * s;
			Quat.y = (Mat[2][0] - Mat[0][2]) * s;
			Quat.z = (Mat[0][1] - Mat[1][0]) * s;
			Quat.w = 0.5f * rcp(InvS);
		}
		else if ( (Mat[0][0] > Mat[1][1]) && (Mat[0][0] > Mat[2][2]) )
		{
			float s = Mat[0][0] - Mat[1][1] - Mat[2][2] + 1.0f;
			float InvS = rsqrt(s);
			s = 0.5f * InvS;

			Quat.x = 0.5f * rcp(InvS);
			Quat.y = (Mat[0][1] + Mat[1][0]) * s;
			Quat.z = (Mat[0][2] + Mat[2][0]) * s;
			Quat.w = (Mat[1][2] - Mat[2][1]) * s;
		}
		else if ( Mat[1][1] > Mat[2][2] )
		{
			float s = Mat[1][1] - Mat[2][2] - Mat[0][0] + 1.0f;
			float InvS = rsqrt(s);
			s = 0.5f * InvS;

			Quat.x = (Mat[1][0] + Mat[0][1]) * s;
			Quat.y = 0.5f * rcp(InvS);
			Quat.z = (Mat[1][2] + Mat[2][1]) * s;
			Quat.w = (Mat[2][0] - Mat[0][2]) * s;

		}
		else
		{
			float s = Mat[2][2] - Mat[0][0] - Mat[1][1] + 1.0f;
			float InvS = rsqrt(s);
			s = 0.5f * InvS;

			Quat.x = (Mat[2][0] + Mat[0][2]) * s;
			Quat.y = (Mat[2][1] + Mat[1][2]) * s;
			Quat.z = 0.5f * rcp(InvS);
			Quat.w = (Mat[0][1] - Mat[1][0]) * s;
		}
	}
void InitConstants(inout FSimulationContext Context)
{

	Context.MapSpawn.Emitter.DistanceTraveled = Emitter_DistanceTraveled;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position;
	Context.MapSpawn.Engine.Time = Engine_Time;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Engine.Owner.LWCTile = Engine_Owner_LWCTile;
	Context.MapSpawn.Engine.Owner.Scale = Engine_Owner_Scale;
	Context.MapSpawn.Engine.Owner.Rotation = Engine_Owner_Rotation;


	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Emitter.ExecutionState = Emitter_ExecutionState;
	Context.MapUpdate.System.ExecutionState = System_ExecutionState;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position;
	Context.MapUpdate.Engine.Emitter.InstanceSeed = Engine_Emitter_InstanceSeed;
	Context.MapUpdate.Emitter.AlphaScale = Emitter_AlphaScale;
	Context.MapUpdate.NPC.FX_CrabCollection.PlayerLocation = NPC_FX_CrabCollection_PlayerLocation.xyz;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapUpdate.Engine.System.RandomSeed = Engine_System_RandomSeed;

}

void InitSpawnVariables(inout FSimulationContext Context)
{

	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.AS_AnimBury = 0.0f;
	Context.MapSpawn.Particles.AS_AnimBuryAlpha = 0.0f;
	Context.MapSpawn.Particles.AS_AnimIdle = 0.0f;
	Context.MapSpawn.Particles.AS_AnimIdleAlpha = 0.0f;
	Context.MapSpawn.Particles.AS_AnimMove = 0.0f;
	Context.MapSpawn.Particles.AS_AnimMoveAlpha = 0.0f;
	Context.MapSpawn.Particles.AS_AnimUnbury = 0.0f;
	Context.MapSpawn.Particles.AS_AnimUnburyAlpha = 0.0f;
	Context.MapSpawn.Particles.AS_CrabBurriedState.IncrementOverTime.Counter = 0.0f;
	Context.MapSpawn.Particles.AS_CrabIdleState.ChangeStateInTime.Counter = 0.0f;
	Context.MapSpawn.Particles.AS_CrabLife = 0.0f;
	Context.MapSpawn.Particles.AS_CrabMoveState.ChangeStateInTime.Counter = 0.0f;
	Context.MapSpawn.Particles.AS_CrabUnburyState.IncrementOverTime.Counter = 0.0f;
	Context.MapSpawn.Particles.AS_DArrowScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DArrowScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DArrowScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientation.x = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientation.y = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientation.z = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientation.w = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationColor.r = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationColor.g = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationColor.b = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationColor.a = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DCohesionOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientation.x = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientation.y = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientation.z = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientation.w = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationColor.r = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationColor.g = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationColor.b = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationColor.a = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DEscapeOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DMeshRadiusScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DMeshRadiusScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DMeshRadiusScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientation.x = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientation.y = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientation.z = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientation.w = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationColor.r = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationColor.g = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationColor.b = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationColor.a = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DObstacleOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DPointPosition.x = 0.0f;
	Context.MapSpawn.Particles.AS_DPointPosition.y = 0.0f;
	Context.MapSpawn.Particles.AS_DPointPosition.z = 0.0f;
	Context.MapSpawn.Particles.AS_DPointPositionScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DPointPositionScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DPointPositionScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientation.x = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientation.y = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientation.z = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientation.w = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationColor.r = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationColor.g = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationColor.b = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationColor.a = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DRandomOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientation.x = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientation.y = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientation.z = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientation.w = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationColor.r = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationColor.g = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationColor.b = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationColor.a = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DSeparationOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DSphereCenterScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DSphereCenterScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DSphereCenterScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientation.x = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientation.y = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientation.z = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientation.w = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationColor.r = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationColor.g = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationColor.b = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationColor.a = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.AS_DTargetOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.x = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.y = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.z = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.w = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.x = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.y = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.z = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.w = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.x = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.y = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.z = 0.0f;
	Context.MapSpawn.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.w = 0.0f;
	Context.MapSpawn.Particles.AS_ObstacleNear = false;
	Context.MapSpawn.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage = 0.0f;
	Context.MapSpawn.Particles.AS_WantBury = false;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.CounterBury = 0.0f;
	Context.MapSpawn.Particles.CounterIdle = 0.0f;
	Context.MapSpawn.Particles.CounterMove = 0.0f;
	Context.MapSpawn.Particles.CrabBuryAlpha = 0.0f;
	Context.MapSpawn.Particles.CrabScale.x = 0.0f;
	Context.MapSpawn.Particles.CrabScale.y = 0.0f;
	Context.MapSpawn.Particles.CrabScale.z = 0.0f;
	Context.MapSpawn.Particles.CurrentSpeed = 0.0f;
	Context.MapSpawn.Particles.DistanceToCharacter = 0.0f;
	Context.MapSpawn.Particles.DistanceTraveled = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.x = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.y = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.z = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter.w = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter1.x = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter1.y = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter1.z = 0.0f;
	Context.MapSpawn.Particles.DynamicMaterialParameter1.w = 0.0f;
	Context.MapSpawn.Particles.ID.Index = 0;
	Context.MapSpawn.Particles.ID.AcquireTag = 0;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.x = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.y = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.z = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.w = 0.0f;
	Context.MapSpawn.Particles.MiddlePositionOfNeighbors.x = 0.0f;
	Context.MapSpawn.Particles.MiddlePositionOfNeighbors.y = 0.0f;
	Context.MapSpawn.Particles.MiddlePositionOfNeighbors.z = 0.0f;
	Context.MapSpawn.Particles.MiddleRotationOfNeighbors.x = 0.0f;
	Context.MapSpawn.Particles.MiddleRotationOfNeighbors.y = 0.0f;
	Context.MapSpawn.Particles.MiddleRotationOfNeighbors.z = 0.0f;
	Context.MapSpawn.Particles.MiddleRotationOfNeighbors.w = 0.0f;
	Context.MapSpawn.Particles.NeighborRadius = 0.0f;
	Context.MapSpawn.Particles.NewState = 0;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.NumSeparationParticlesAtRadius = 0;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DArrowScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DArrowScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DArrowScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DCohesionOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DEscapeOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DMeshRadiusScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DMeshRadiusScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DMeshRadiusScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DObstacleOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DPointPosition.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DPointPosition.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DPointPosition.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DPointPositionScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DPointPositionScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DPointPositionScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DRandomOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSeparationOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSphereCenterScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSphereCenterScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DSphereCenterScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientationScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientationScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.AS_DTargetOrientationScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.CrabScale.x = 0.0f;
	Context.MapSpawn.Particles.Previous.CrabScale.y = 0.0f;
	Context.MapSpawn.Particles.Previous.CrabScale.z = 0.0f;
	Context.MapSpawn.Particles.Previous.MeshOrientation.x = 0.0f;
	Context.MapSpawn.Particles.Previous.MeshOrientation.y = 0.0f;
	Context.MapSpawn.Particles.Previous.MeshOrientation.z = 0.0f;
	Context.MapSpawn.Particles.Previous.MeshOrientation.w = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.x = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.z = 0.0f;
	Context.MapSpawn.Particles.Previous.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Previous.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.RibbonUVDistance = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SeparationActive = false;
	Context.MapSpawn.Particles.SeparationRadius = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeBitangent.x = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeBitangent.y = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeBitangent.z = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeNormal.x = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeNormal.y = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeNormal.z = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapePosition.x = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapePosition.y = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapePosition.z = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeTangent.x = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeTangent.y = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeTangent.z = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeVector.x = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeVector.y = 0.0f;
	Context.MapSpawn.Particles.ShapeLocation.ShapeVector.z = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.State = 0;
	Context.MapSpawn.Particles.StateDuration = 0.0f;
	Context.MapSpawn.Particles.StateTimeTamp = 0.0f;
	Context.MapSpawn.Particles.SurfaceNormal.x = 0.0f;
	Context.MapSpawn.Particles.SurfaceNormal.y = 0.0f;
	Context.MapSpawn.Particles.SurfaceNormal.z = 0.0f;
	Context.MapSpawn.Particles.TargetSpeed = 0.0f;
	Context.MapSpawn.Particles.TESTFloat = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.WorldSpaceCollisionCenter.x = 0.0f;
	Context.MapSpawn.Particles.WorldSpaceCollisionCenter.y = 0.0f;
	Context.MapSpawn.Particles.WorldSpaceCollisionCenter.z = 0.0f;

	Context.MapSpawn.DataInstance.Alive=true;

	int IDIndex, IDAcquireTag;
	AcquireID(0, IDIndex, IDAcquireTag);
	Context.MapSpawn.Particles.ID.Index = IDIndex;
	Context.MapSpawn.Particles.ID.AcquireTag = IDAcquireTag;

}

void LoadUpdateVariables(inout FSimulationContext Context, int InstanceIdx)
{

		Context.MapUpdate.Array.Age = 0;
		Context.MapUpdate.Particles.Age = InputDataFloat(0, 0, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimBury = 1;
		Context.MapUpdate.Particles.AS_AnimBury = InputDataFloat(0, 1, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimBuryAlpha = 2;
		Context.MapUpdate.Particles.AS_AnimBuryAlpha = InputDataFloat(0, 2, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimIdle = 3;
		Context.MapUpdate.Particles.AS_AnimIdle = InputDataFloat(0, 3, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimIdleAlpha = 4;
		Context.MapUpdate.Particles.AS_AnimIdleAlpha = InputDataFloat(0, 4, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimMove = 5;
		Context.MapUpdate.Particles.AS_AnimMove = InputDataFloat(0, 5, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimMoveAlpha = 6;
		Context.MapUpdate.Particles.AS_AnimMoveAlpha = InputDataFloat(0, 6, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimUnbury = 7;
		Context.MapUpdate.Particles.AS_AnimUnbury = InputDataFloat(0, 7, InstanceIdx);
		Context.MapUpdate.Array.AS_AnimUnburyAlpha = 8;
		Context.MapUpdate.Particles.AS_AnimUnburyAlpha = InputDataFloat(0, 8, InstanceIdx);
		Context.MapUpdate.Array.AS_CrabBurriedState.IncrementOverTime.Counter = 9;
		Context.MapUpdate.Particles.AS_CrabBurriedState.IncrementOverTime.Counter = InputDataFloat(0, 9, InstanceIdx);
		Context.MapUpdate.Array.AS_CrabIdleState.ChangeStateInTime.Counter = 10;
		Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter = InputDataFloat(0, 10, InstanceIdx);
		Context.MapUpdate.Array.AS_CrabLife = 11;
		Context.MapUpdate.Particles.AS_CrabLife = InputDataFloat(0, 11, InstanceIdx);
		Context.MapUpdate.Array.AS_CrabMoveState.ChangeStateInTime.Counter = 12;
		Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter = InputDataFloat(0, 12, InstanceIdx);
		Context.MapUpdate.Array.AS_CrabUnburyState.IncrementOverTime.Counter = 13;
		Context.MapUpdate.Particles.AS_CrabUnburyState.IncrementOverTime.Counter = InputDataFloat(0, 13, InstanceIdx);
		Context.MapUpdate.Array.AS_DArrowScale = 14;
		Context.MapUpdate.Particles.AS_DArrowScale.x = InputDataFloat(0, 14, InstanceIdx);
		Context.MapUpdate.Particles.AS_DArrowScale.y = InputDataFloat(0, 15, InstanceIdx);
		Context.MapUpdate.Particles.AS_DArrowScale.z = InputDataFloat(0, 16, InstanceIdx);
		Context.MapUpdate.Array.AS_DCohesionOrientation = 17;
		Context.MapUpdate.Particles.AS_DCohesionOrientation.x = InputDataFloat(0, 17, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientation.y = InputDataFloat(0, 18, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientation.z = InputDataFloat(0, 19, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientation.w = InputDataFloat(0, 20, InstanceIdx);
		Context.MapUpdate.Array.AS_DCohesionOrientationColor = 21;
		Context.MapUpdate.Particles.AS_DCohesionOrientationColor.r = InputDataFloat(0, 21, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientationColor.g = InputDataFloat(0, 22, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientationColor.b = InputDataFloat(0, 23, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientationColor.a = InputDataFloat(0, 24, InstanceIdx);
		Context.MapUpdate.Array.AS_DCohesionOrientationScale = 25;
		Context.MapUpdate.Particles.AS_DCohesionOrientationScale.x = InputDataFloat(0, 25, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientationScale.y = InputDataFloat(0, 26, InstanceIdx);
		Context.MapUpdate.Particles.AS_DCohesionOrientationScale.z = InputDataFloat(0, 27, InstanceIdx);
		Context.MapUpdate.Array.AS_DEscapeOrientation = 28;
		Context.MapUpdate.Particles.AS_DEscapeOrientation.x = InputDataFloat(0, 28, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientation.y = InputDataFloat(0, 29, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientation.z = InputDataFloat(0, 30, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientation.w = InputDataFloat(0, 31, InstanceIdx);
		Context.MapUpdate.Array.AS_DEscapeOrientationColor = 32;
		Context.MapUpdate.Particles.AS_DEscapeOrientationColor.r = InputDataFloat(0, 32, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientationColor.g = InputDataFloat(0, 33, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientationColor.b = InputDataFloat(0, 34, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientationColor.a = InputDataFloat(0, 35, InstanceIdx);
		Context.MapUpdate.Array.AS_DEscapeOrientationScale = 36;
		Context.MapUpdate.Particles.AS_DEscapeOrientationScale.x = InputDataFloat(0, 36, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientationScale.y = InputDataFloat(0, 37, InstanceIdx);
		Context.MapUpdate.Particles.AS_DEscapeOrientationScale.z = InputDataFloat(0, 38, InstanceIdx);
		Context.MapUpdate.Array.AS_DMeshRadiusScale = 39;
		Context.MapUpdate.Particles.AS_DMeshRadiusScale.x = InputDataFloat(0, 39, InstanceIdx);
		Context.MapUpdate.Particles.AS_DMeshRadiusScale.y = InputDataFloat(0, 40, InstanceIdx);
		Context.MapUpdate.Particles.AS_DMeshRadiusScale.z = InputDataFloat(0, 41, InstanceIdx);
		Context.MapUpdate.Array.AS_DObstacleOrientation = 42;
		Context.MapUpdate.Particles.AS_DObstacleOrientation.x = InputDataFloat(0, 42, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientation.y = InputDataFloat(0, 43, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientation.z = InputDataFloat(0, 44, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientation.w = InputDataFloat(0, 45, InstanceIdx);
		Context.MapUpdate.Array.AS_DObstacleOrientationColor = 46;
		Context.MapUpdate.Particles.AS_DObstacleOrientationColor.r = InputDataFloat(0, 46, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientationColor.g = InputDataFloat(0, 47, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientationColor.b = InputDataFloat(0, 48, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientationColor.a = InputDataFloat(0, 49, InstanceIdx);
		Context.MapUpdate.Array.AS_DObstacleOrientationScale = 50;
		Context.MapUpdate.Particles.AS_DObstacleOrientationScale.x = InputDataFloat(0, 50, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientationScale.y = InputDataFloat(0, 51, InstanceIdx);
		Context.MapUpdate.Particles.AS_DObstacleOrientationScale.z = InputDataFloat(0, 52, InstanceIdx);
		Context.MapUpdate.Array.AS_DPointPosition = 53;
		Context.MapUpdate.Particles.AS_DPointPosition.x = InputDataFloat(0, 53, InstanceIdx);
		Context.MapUpdate.Particles.AS_DPointPosition.y = InputDataFloat(0, 54, InstanceIdx);
		Context.MapUpdate.Particles.AS_DPointPosition.z = InputDataFloat(0, 55, InstanceIdx);
		Context.MapUpdate.Array.AS_DPointPositionScale = 56;
		Context.MapUpdate.Particles.AS_DPointPositionScale.x = InputDataFloat(0, 56, InstanceIdx);
		Context.MapUpdate.Particles.AS_DPointPositionScale.y = InputDataFloat(0, 57, InstanceIdx);
		Context.MapUpdate.Particles.AS_DPointPositionScale.z = InputDataFloat(0, 58, InstanceIdx);
		Context.MapUpdate.Array.AS_DRandomOrientation = 59;
		Context.MapUpdate.Particles.AS_DRandomOrientation.x = InputDataFloat(0, 59, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientation.y = InputDataFloat(0, 60, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientation.z = InputDataFloat(0, 61, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientation.w = InputDataFloat(0, 62, InstanceIdx);
		Context.MapUpdate.Array.AS_DRandomOrientationColor = 63;
		Context.MapUpdate.Particles.AS_DRandomOrientationColor.r = InputDataFloat(0, 63, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientationColor.g = InputDataFloat(0, 64, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientationColor.b = InputDataFloat(0, 65, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientationColor.a = InputDataFloat(0, 66, InstanceIdx);
		Context.MapUpdate.Array.AS_DRandomOrientationScale = 67;
		Context.MapUpdate.Particles.AS_DRandomOrientationScale.x = InputDataFloat(0, 67, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientationScale.y = InputDataFloat(0, 68, InstanceIdx);
		Context.MapUpdate.Particles.AS_DRandomOrientationScale.z = InputDataFloat(0, 69, InstanceIdx);
		Context.MapUpdate.Array.AS_DSeparationOrientation = 70;
		Context.MapUpdate.Particles.AS_DSeparationOrientation.x = InputDataFloat(0, 70, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientation.y = InputDataFloat(0, 71, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientation.z = InputDataFloat(0, 72, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientation.w = InputDataFloat(0, 73, InstanceIdx);
		Context.MapUpdate.Array.AS_DSeparationOrientationColor = 74;
		Context.MapUpdate.Particles.AS_DSeparationOrientationColor.r = InputDataFloat(0, 74, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientationColor.g = InputDataFloat(0, 75, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientationColor.b = InputDataFloat(0, 76, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientationColor.a = InputDataFloat(0, 77, InstanceIdx);
		Context.MapUpdate.Array.AS_DSeparationOrientationScale = 78;
		Context.MapUpdate.Particles.AS_DSeparationOrientationScale.x = InputDataFloat(0, 78, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientationScale.y = InputDataFloat(0, 79, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSeparationOrientationScale.z = InputDataFloat(0, 80, InstanceIdx);
		Context.MapUpdate.Array.AS_DSphereCenterScale = 81;
		Context.MapUpdate.Particles.AS_DSphereCenterScale.x = InputDataFloat(0, 81, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSphereCenterScale.y = InputDataFloat(0, 82, InstanceIdx);
		Context.MapUpdate.Particles.AS_DSphereCenterScale.z = InputDataFloat(0, 83, InstanceIdx);
		Context.MapUpdate.Array.AS_DTargetOrientation = 84;
		Context.MapUpdate.Particles.AS_DTargetOrientation.x = InputDataFloat(0, 84, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientation.y = InputDataFloat(0, 85, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientation.z = InputDataFloat(0, 86, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientation.w = InputDataFloat(0, 87, InstanceIdx);
		Context.MapUpdate.Array.AS_DTargetOrientationColor = 88;
		Context.MapUpdate.Particles.AS_DTargetOrientationColor.r = InputDataFloat(0, 88, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientationColor.g = InputDataFloat(0, 89, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientationColor.b = InputDataFloat(0, 90, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientationColor.a = InputDataFloat(0, 91, InstanceIdx);
		Context.MapUpdate.Array.AS_DTargetOrientationScale = 92;
		Context.MapUpdate.Particles.AS_DTargetOrientationScale.x = InputDataFloat(0, 92, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientationScale.y = InputDataFloat(0, 93, InstanceIdx);
		Context.MapUpdate.Particles.AS_DTargetOrientationScale.z = InputDataFloat(0, 94, InstanceIdx);
		Context.MapUpdate.Array.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage = 95;
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.x = InputDataFloat(0, 95, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.y = InputDataFloat(0, 96, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.z = InputDataFloat(0, 97, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.w = InputDataFloat(0, 98, InstanceIdx);
		Context.MapUpdate.Array.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage = 99;
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.x = InputDataFloat(0, 99, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.y = InputDataFloat(0, 100, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.z = InputDataFloat(0, 101, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.w = InputDataFloat(0, 102, InstanceIdx);
		Context.MapUpdate.Array.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage = 103;
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.x = InputDataFloat(0, 103, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.y = InputDataFloat(0, 104, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.z = InputDataFloat(0, 105, InstanceIdx);
		Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.w = InputDataFloat(0, 106, InstanceIdx);
		Context.MapUpdate.Array.AS_ObstacleNear = 0;
		Context.MapUpdate.Particles.AS_ObstacleNear = InputDataBool(0, 0, InstanceIdx);
		Context.MapUpdate.Array.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage = 107;
		Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage = InputDataFloat(0, 107, InstanceIdx);
		Context.MapUpdate.Array.AS_WantBury = 1;
		Context.MapUpdate.Particles.AS_WantBury = InputDataBool(0, 1, InstanceIdx);
		Context.MapUpdate.Array.Color = 108;
		Context.MapUpdate.Particles.Color.r = InputDataFloat(0, 108, InstanceIdx);
		Context.MapUpdate.Particles.Color.g = InputDataFloat(0, 109, InstanceIdx);
		Context.MapUpdate.Particles.Color.b = InputDataFloat(0, 110, InstanceIdx);
		Context.MapUpdate.Particles.Color.a = InputDataFloat(0, 111, InstanceIdx);
		Context.MapUpdate.Array.CounterBury = 112;
		Context.MapUpdate.Particles.CounterBury = InputDataFloat(0, 112, InstanceIdx);
		Context.MapUpdate.Array.CounterIdle = 113;
		Context.MapUpdate.Particles.CounterIdle = InputDataFloat(0, 113, InstanceIdx);
		Context.MapUpdate.Array.CounterMove = 114;
		Context.MapUpdate.Particles.CounterMove = InputDataFloat(0, 114, InstanceIdx);
		Context.MapUpdate.Array.CrabBuryAlpha = 115;
		Context.MapUpdate.Particles.CrabBuryAlpha = InputDataFloat(0, 115, InstanceIdx);
		Context.MapUpdate.Array.CrabScale = 116;
		Context.MapUpdate.Particles.CrabScale.x = InputDataFloat(0, 116, InstanceIdx);
		Context.MapUpdate.Particles.CrabScale.y = InputDataFloat(0, 117, InstanceIdx);
		Context.MapUpdate.Particles.CrabScale.z = InputDataFloat(0, 118, InstanceIdx);
		Context.MapUpdate.Array.CurrentSpeed = 119;
		Context.MapUpdate.Particles.CurrentSpeed = InputDataFloat(0, 119, InstanceIdx);
		Context.MapUpdate.Array.DistanceToCharacter = 120;
		Context.MapUpdate.Particles.DistanceToCharacter = InputDataFloat(0, 120, InstanceIdx);
		Context.MapUpdate.Array.DistanceTraveled = 121;
		Context.MapUpdate.Particles.DistanceTraveled = InputDataFloat(0, 121, InstanceIdx);
		Context.MapUpdate.Array.DynamicMaterialParameter = 122;
		Context.MapUpdate.Particles.DynamicMaterialParameter.x = InputDataFloat(0, 122, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter.y = InputDataFloat(0, 123, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter.z = InputDataFloat(0, 124, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter.w = InputDataFloat(0, 125, InstanceIdx);
		Context.MapUpdate.Array.DynamicMaterialParameter1 = 126;
		Context.MapUpdate.Particles.DynamicMaterialParameter1.x = InputDataFloat(0, 126, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter1.y = InputDataFloat(0, 127, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter1.z = InputDataFloat(0, 128, InstanceIdx);
		Context.MapUpdate.Particles.DynamicMaterialParameter1.w = InputDataFloat(0, 129, InstanceIdx);
		Context.MapUpdate.Array.ID = 2;
		Context.MapUpdate.Particles.ID.Index = InputDataInt(0, 2, InstanceIdx);
		Context.MapUpdate.Particles.ID.AcquireTag = InputDataInt(0, 3, InstanceIdx);
		Context.MapUpdate.Array.Lifetime = 130;
		Context.MapUpdate.Particles.Lifetime = InputDataFloat(0, 130, InstanceIdx);
		Context.MapUpdate.Array.Mass = 131;
		Context.MapUpdate.Particles.Mass = InputDataFloat(0, 131, InstanceIdx);
		Context.MapUpdate.Array.MaterialRandom = 132;
		Context.MapUpdate.Particles.MaterialRandom = InputDataFloat(0, 132, InstanceIdx);
		Context.MapUpdate.Array.MeshOrientation = 133;
		Context.MapUpdate.Particles.MeshOrientation.x = InputDataFloat(0, 133, InstanceIdx);
		Context.MapUpdate.Particles.MeshOrientation.y = InputDataFloat(0, 134, InstanceIdx);
		Context.MapUpdate.Particles.MeshOrientation.z = InputDataFloat(0, 135, InstanceIdx);
		Context.MapUpdate.Particles.MeshOrientation.w = InputDataFloat(0, 136, InstanceIdx);
		Context.MapUpdate.Array.MiddlePositionOfNeighbors = 137;
		Context.MapUpdate.Particles.MiddlePositionOfNeighbors.x = InputDataFloat(0, 137, InstanceIdx);
		Context.MapUpdate.Particles.MiddlePositionOfNeighbors.y = InputDataFloat(0, 138, InstanceIdx);
		Context.MapUpdate.Particles.MiddlePositionOfNeighbors.z = InputDataFloat(0, 139, InstanceIdx);
		Context.MapUpdate.Array.MiddleRotationOfNeighbors = 140;
		Context.MapUpdate.Particles.MiddleRotationOfNeighbors.x = InputDataFloat(0, 140, InstanceIdx);
		Context.MapUpdate.Particles.MiddleRotationOfNeighbors.y = InputDataFloat(0, 141, InstanceIdx);
		Context.MapUpdate.Particles.MiddleRotationOfNeighbors.z = InputDataFloat(0, 142, InstanceIdx);
		Context.MapUpdate.Particles.MiddleRotationOfNeighbors.w = InputDataFloat(0, 143, InstanceIdx);
		Context.MapUpdate.Array.NeighborRadius = 144;
		Context.MapUpdate.Particles.NeighborRadius = InputDataFloat(0, 144, InstanceIdx);
		Context.MapUpdate.Array.NewState = 4;
		Context.MapUpdate.Particles.NewState = InputDataInt(0, 4, InstanceIdx);
		Context.MapUpdate.Array.NormalizedAge = 145;
		Context.MapUpdate.Particles.NormalizedAge = InputDataFloat(0, 145, InstanceIdx);
		Context.MapUpdate.Array.NumSeparationParticlesAtRadius = 5;
		Context.MapUpdate.Particles.NumSeparationParticlesAtRadius = InputDataInt(0, 5, InstanceIdx);
		Context.MapUpdate.Array.Position = 146;
		Context.MapUpdate.Particles.Position.x = InputDataFloat(0, 146, InstanceIdx);
		Context.MapUpdate.Particles.Position.y = InputDataFloat(0, 147, InstanceIdx);
		Context.MapUpdate.Particles.Position.z = InputDataFloat(0, 148, InstanceIdx);
		Context.MapUpdate.Array.Presolve.PhysicsForce = 149;
		Context.MapUpdate.Particles.Presolve.PhysicsForce.x = InputDataFloat(0, 149, InstanceIdx);
		Context.MapUpdate.Particles.Presolve.PhysicsForce.y = InputDataFloat(0, 150, InstanceIdx);
		Context.MapUpdate.Particles.Presolve.PhysicsForce.z = InputDataFloat(0, 151, InstanceIdx);
		Context.MapUpdate.Array.Presolve.Position = 152;
		Context.MapUpdate.Particles.Presolve.Position.x = InputDataFloat(0, 152, InstanceIdx);
		Context.MapUpdate.Particles.Presolve.Position.y = InputDataFloat(0, 153, InstanceIdx);
		Context.MapUpdate.Particles.Presolve.Position.z = InputDataFloat(0, 154, InstanceIdx);
		Context.MapUpdate.Array.Presolve.Velocity = 155;
		Context.MapUpdate.Particles.Presolve.Velocity.x = InputDataFloat(0, 155, InstanceIdx);
		Context.MapUpdate.Particles.Presolve.Velocity.y = InputDataFloat(0, 156, InstanceIdx);
		Context.MapUpdate.Particles.Presolve.Velocity.z = InputDataFloat(0, 157, InstanceIdx);
		Context.MapUpdate.Array.RibbonUVDistance = 230;
		Context.MapUpdate.Particles.RibbonUVDistance = InputDataFloat(0, 230, InstanceIdx);
		Context.MapUpdate.Array.Scale = 231;
		Context.MapUpdate.Particles.Scale.x = InputDataFloat(0, 231, InstanceIdx);
		Context.MapUpdate.Particles.Scale.y = InputDataFloat(0, 232, InstanceIdx);
		Context.MapUpdate.Particles.Scale.z = InputDataFloat(0, 233, InstanceIdx);
		Context.MapUpdate.Array.SeparationActive = 6;
		Context.MapUpdate.Particles.SeparationActive = InputDataBool(0, 6, InstanceIdx);
		Context.MapUpdate.Array.SeparationRadius = 234;
		Context.MapUpdate.Particles.SeparationRadius = InputDataFloat(0, 234, InstanceIdx);
		Context.MapUpdate.Array.ShapeLocation.ShapeBitangent = 235;
		Context.MapUpdate.Particles.ShapeLocation.ShapeBitangent.x = InputDataFloat(0, 235, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeBitangent.y = InputDataFloat(0, 236, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeBitangent.z = InputDataFloat(0, 237, InstanceIdx);
		Context.MapUpdate.Array.ShapeLocation.ShapeNormal = 238;
		Context.MapUpdate.Particles.ShapeLocation.ShapeNormal.x = InputDataFloat(0, 238, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeNormal.y = InputDataFloat(0, 239, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeNormal.z = InputDataFloat(0, 240, InstanceIdx);
		Context.MapUpdate.Array.ShapeLocation.ShapePosition = 241;
		Context.MapUpdate.Particles.ShapeLocation.ShapePosition.x = InputDataFloat(0, 241, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapePosition.y = InputDataFloat(0, 242, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapePosition.z = InputDataFloat(0, 243, InstanceIdx);
		Context.MapUpdate.Array.ShapeLocation.ShapeTangent = 244;
		Context.MapUpdate.Particles.ShapeLocation.ShapeTangent.x = InputDataFloat(0, 244, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeTangent.y = InputDataFloat(0, 245, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeTangent.z = InputDataFloat(0, 246, InstanceIdx);
		Context.MapUpdate.Array.ShapeLocation.ShapeVector = 247;
		Context.MapUpdate.Particles.ShapeLocation.ShapeVector.x = InputDataFloat(0, 247, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeVector.y = InputDataFloat(0, 248, InstanceIdx);
		Context.MapUpdate.Particles.ShapeLocation.ShapeVector.z = InputDataFloat(0, 249, InstanceIdx);
		Context.MapUpdate.Array.SpriteSize = 250;
		Context.MapUpdate.Particles.SpriteSize.x = InputDataFloat(0, 250, InstanceIdx);
		Context.MapUpdate.Particles.SpriteSize.y = InputDataFloat(0, 251, InstanceIdx);
		Context.MapUpdate.Array.State = 7;
		Context.MapUpdate.Particles.State = InputDataInt(0, 7, InstanceIdx);
		Context.MapUpdate.Array.StateDuration = 252;
		Context.MapUpdate.Particles.StateDuration = InputDataFloat(0, 252, InstanceIdx);
		Context.MapUpdate.Array.StateTimeTamp = 253;
		Context.MapUpdate.Particles.StateTimeTamp = InputDataFloat(0, 253, InstanceIdx);
		Context.MapUpdate.Array.SurfaceNormal = 254;
		Context.MapUpdate.Particles.SurfaceNormal.x = InputDataFloat(0, 254, InstanceIdx);
		Context.MapUpdate.Particles.SurfaceNormal.y = InputDataFloat(0, 255, InstanceIdx);
		Context.MapUpdate.Particles.SurfaceNormal.z = InputDataFloat(0, 256, InstanceIdx);
		Context.MapUpdate.Array.TargetSpeed = 257;
		Context.MapUpdate.Particles.TargetSpeed = InputDataFloat(0, 257, InstanceIdx);
		Context.MapUpdate.Array.TESTFloat = 258;
		Context.MapUpdate.Particles.TESTFloat = InputDataFloat(0, 258, InstanceIdx);
		Context.MapUpdate.Array.UniqueID = 8;
		Context.MapUpdate.Particles.UniqueID = InputDataInt(0, 8, InstanceIdx);
		Context.MapUpdate.Array.Velocity = 259;
		Context.MapUpdate.Particles.Velocity.x = InputDataFloat(0, 259, InstanceIdx);
		Context.MapUpdate.Particles.Velocity.y = InputDataFloat(0, 260, InstanceIdx);
		Context.MapUpdate.Particles.Velocity.z = InputDataFloat(0, 261, InstanceIdx);
		Context.MapUpdate.Array.WorldSpaceCollisionCenter = 262;
		Context.MapUpdate.Particles.WorldSpaceCollisionCenter.x = InputDataFloat(0, 262, InstanceIdx);
		Context.MapUpdate.Particles.WorldSpaceCollisionCenter.y = InputDataFloat(0, 263, InstanceIdx);
		Context.MapUpdate.Particles.WorldSpaceCollisionCenter.z = InputDataFloat(0, 264, InstanceIdx);
		Context.MapUpdate.Particles.Previous.AS_DArrowScale = Context.MapUpdate.Particles.AS_DArrowScale;
		Context.MapUpdate.Particles.Previous.AS_DCohesionOrientation = Context.MapUpdate.Particles.AS_DCohesionOrientation;
		Context.MapUpdate.Particles.Previous.AS_DCohesionOrientationScale = Context.MapUpdate.Particles.AS_DCohesionOrientationScale;
		Context.MapUpdate.Particles.Previous.AS_DEscapeOrientation = Context.MapUpdate.Particles.AS_DEscapeOrientation;
		Context.MapUpdate.Particles.Previous.AS_DEscapeOrientationScale = Context.MapUpdate.Particles.AS_DEscapeOrientationScale;
		Context.MapUpdate.Particles.Previous.AS_DMeshRadiusScale = Context.MapUpdate.Particles.AS_DMeshRadiusScale;
		Context.MapUpdate.Particles.Previous.AS_DObstacleOrientation = Context.MapUpdate.Particles.AS_DObstacleOrientation;
		Context.MapUpdate.Particles.Previous.AS_DObstacleOrientationScale = Context.MapUpdate.Particles.AS_DObstacleOrientationScale;
		Context.MapUpdate.Particles.Previous.AS_DPointPosition = Context.MapUpdate.Particles.AS_DPointPosition;
		Context.MapUpdate.Particles.Previous.AS_DPointPositionScale = Context.MapUpdate.Particles.AS_DPointPositionScale;
		Context.MapUpdate.Particles.Previous.AS_DRandomOrientation = Context.MapUpdate.Particles.AS_DRandomOrientation;
		Context.MapUpdate.Particles.Previous.AS_DRandomOrientationScale = Context.MapUpdate.Particles.AS_DRandomOrientationScale;
		Context.MapUpdate.Particles.Previous.AS_DSeparationOrientation = Context.MapUpdate.Particles.AS_DSeparationOrientation;
		Context.MapUpdate.Particles.Previous.AS_DSeparationOrientationScale = Context.MapUpdate.Particles.AS_DSeparationOrientationScale;
		Context.MapUpdate.Particles.Previous.AS_DSphereCenterScale = Context.MapUpdate.Particles.AS_DSphereCenterScale;
		Context.MapUpdate.Particles.Previous.AS_DTargetOrientation = Context.MapUpdate.Particles.AS_DTargetOrientation;
		Context.MapUpdate.Particles.Previous.AS_DTargetOrientationScale = Context.MapUpdate.Particles.AS_DTargetOrientationScale;
		Context.MapUpdate.Particles.Previous.CrabScale = Context.MapUpdate.Particles.CrabScale;
		Context.MapUpdate.Particles.Previous.MeshOrientation = Context.MapUpdate.Particles.MeshOrientation;
		Context.MapUpdate.Particles.Previous.Position = Context.MapUpdate.Particles.Position;
		Context.MapUpdate.Particles.Previous.SpriteSize = Context.MapUpdate.Particles.SpriteSize;
		Context.MapUpdate.Particles.Previous.Velocity = Context.MapUpdate.Particles.Velocity;
		Context.MapUpdate.DataInstance.Alive=true;

}

void ConditionalInterpolateParameters(inout FSimulationContext Context)
{
	InterpolateParameters(Context);
}

void TransferAttributes(inout FSimulationContext Context)
{

		Context.MapUpdate.Particles = Context.MapSpawn.Particles;
		Context.MapUpdate.DataInstance.Alive = true;
		Context.MapUpdate.Particles.Previous.Velocity = Context.MapSpawn.Particles.Velocity;
		Context.MapUpdate.Particles.Previous.Position = Context.MapSpawn.Particles.Position;

}

void StoreUpdateVariables(in FSimulationContext Context, bool bIsValidInstance)
{

		const bool bValid = bIsValidInstance && Context.MapUpdate.DataInstance.Alive;
		const int WriteIndex = OutputIndex(0, true, bValid);
		UpdateID(0, bValid ? Context.MapUpdate.Particles.ID.Index : -1, WriteIndex);
		if (bValid)
		{
			OutputDataFloat(0, 0, WriteIndex, Context.MapUpdate.Particles.Age);
			OutputDataFloat(0, 1, WriteIndex, Context.MapUpdate.Particles.AS_AnimBury);
			OutputDataFloat(0, 2, WriteIndex, Context.MapUpdate.Particles.AS_AnimBuryAlpha);
			OutputDataFloat(0, 3, WriteIndex, Context.MapUpdate.Particles.AS_AnimIdle);
			OutputDataFloat(0, 4, WriteIndex, Context.MapUpdate.Particles.AS_AnimIdleAlpha);
			OutputDataFloat(0, 5, WriteIndex, Context.MapUpdate.Particles.AS_AnimMove);
			OutputDataFloat(0, 6, WriteIndex, Context.MapUpdate.Particles.AS_AnimMoveAlpha);
			OutputDataFloat(0, 7, WriteIndex, Context.MapUpdate.Particles.AS_AnimUnbury);
			OutputDataFloat(0, 8, WriteIndex, Context.MapUpdate.Particles.AS_AnimUnburyAlpha);
			OutputDataFloat(0, 9, WriteIndex, Context.MapUpdate.Particles.AS_CrabBurriedState.IncrementOverTime.Counter);
			OutputDataFloat(0, 10, WriteIndex, Context.MapUpdate.Particles.AS_CrabIdleState.ChangeStateInTime.Counter);
			OutputDataFloat(0, 11, WriteIndex, Context.MapUpdate.Particles.AS_CrabLife);
			OutputDataFloat(0, 12, WriteIndex, Context.MapUpdate.Particles.AS_CrabMoveState.ChangeStateInTime.Counter);
			OutputDataFloat(0, 13, WriteIndex, Context.MapUpdate.Particles.AS_CrabUnburyState.IncrementOverTime.Counter);
			OutputDataFloat(0, 14, WriteIndex, Context.MapUpdate.Particles.AS_DArrowScale.x);
			OutputDataFloat(0, 15, WriteIndex, Context.MapUpdate.Particles.AS_DArrowScale.y);
			OutputDataFloat(0, 16, WriteIndex, Context.MapUpdate.Particles.AS_DArrowScale.z);
			OutputDataFloat(0, 17, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientation.x);
			OutputDataFloat(0, 18, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientation.y);
			OutputDataFloat(0, 19, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientation.z);
			OutputDataFloat(0, 20, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientation.w);
			OutputDataFloat(0, 21, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationColor.r);
			OutputDataFloat(0, 22, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationColor.g);
			OutputDataFloat(0, 23, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationColor.b);
			OutputDataFloat(0, 24, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationColor.a);
			OutputDataFloat(0, 25, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationScale.x);
			OutputDataFloat(0, 26, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationScale.y);
			OutputDataFloat(0, 27, WriteIndex, Context.MapUpdate.Particles.AS_DCohesionOrientationScale.z);
			OutputDataFloat(0, 28, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientation.x);
			OutputDataFloat(0, 29, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientation.y);
			OutputDataFloat(0, 30, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientation.z);
			OutputDataFloat(0, 31, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientation.w);
			OutputDataFloat(0, 32, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationColor.r);
			OutputDataFloat(0, 33, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationColor.g);
			OutputDataFloat(0, 34, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationColor.b);
			OutputDataFloat(0, 35, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationColor.a);
			OutputDataFloat(0, 36, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationScale.x);
			OutputDataFloat(0, 37, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationScale.y);
			OutputDataFloat(0, 38, WriteIndex, Context.MapUpdate.Particles.AS_DEscapeOrientationScale.z);
			OutputDataFloat(0, 39, WriteIndex, Context.MapUpdate.Particles.AS_DMeshRadiusScale.x);
			OutputDataFloat(0, 40, WriteIndex, Context.MapUpdate.Particles.AS_DMeshRadiusScale.y);
			OutputDataFloat(0, 41, WriteIndex, Context.MapUpdate.Particles.AS_DMeshRadiusScale.z);
			OutputDataFloat(0, 42, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientation.x);
			OutputDataFloat(0, 43, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientation.y);
			OutputDataFloat(0, 44, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientation.z);
			OutputDataFloat(0, 45, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientation.w);
			OutputDataFloat(0, 46, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationColor.r);
			OutputDataFloat(0, 47, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationColor.g);
			OutputDataFloat(0, 48, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationColor.b);
			OutputDataFloat(0, 49, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationColor.a);
			OutputDataFloat(0, 50, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationScale.x);
			OutputDataFloat(0, 51, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationScale.y);
			OutputDataFloat(0, 52, WriteIndex, Context.MapUpdate.Particles.AS_DObstacleOrientationScale.z);
			OutputDataFloat(0, 53, WriteIndex, Context.MapUpdate.Particles.AS_DPointPosition.x);
			OutputDataFloat(0, 54, WriteIndex, Context.MapUpdate.Particles.AS_DPointPosition.y);
			OutputDataFloat(0, 55, WriteIndex, Context.MapUpdate.Particles.AS_DPointPosition.z);
			OutputDataFloat(0, 56, WriteIndex, Context.MapUpdate.Particles.AS_DPointPositionScale.x);
			OutputDataFloat(0, 57, WriteIndex, Context.MapUpdate.Particles.AS_DPointPositionScale.y);
			OutputDataFloat(0, 58, WriteIndex, Context.MapUpdate.Particles.AS_DPointPositionScale.z);
			OutputDataFloat(0, 59, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientation.x);
			OutputDataFloat(0, 60, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientation.y);
			OutputDataFloat(0, 61, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientation.z);
			OutputDataFloat(0, 62, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientation.w);
			OutputDataFloat(0, 63, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationColor.r);
			OutputDataFloat(0, 64, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationColor.g);
			OutputDataFloat(0, 65, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationColor.b);
			OutputDataFloat(0, 66, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationColor.a);
			OutputDataFloat(0, 67, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationScale.x);
			OutputDataFloat(0, 68, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationScale.y);
			OutputDataFloat(0, 69, WriteIndex, Context.MapUpdate.Particles.AS_DRandomOrientationScale.z);
			OutputDataFloat(0, 70, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientation.x);
			OutputDataFloat(0, 71, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientation.y);
			OutputDataFloat(0, 72, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientation.z);
			OutputDataFloat(0, 73, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientation.w);
			OutputDataFloat(0, 74, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationColor.r);
			OutputDataFloat(0, 75, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationColor.g);
			OutputDataFloat(0, 76, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationColor.b);
			OutputDataFloat(0, 77, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationColor.a);
			OutputDataFloat(0, 78, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationScale.x);
			OutputDataFloat(0, 79, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationScale.y);
			OutputDataFloat(0, 80, WriteIndex, Context.MapUpdate.Particles.AS_DSeparationOrientationScale.z);
			OutputDataFloat(0, 81, WriteIndex, Context.MapUpdate.Particles.AS_DSphereCenterScale.x);
			OutputDataFloat(0, 82, WriteIndex, Context.MapUpdate.Particles.AS_DSphereCenterScale.y);
			OutputDataFloat(0, 83, WriteIndex, Context.MapUpdate.Particles.AS_DSphereCenterScale.z);
			OutputDataFloat(0, 84, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientation.x);
			OutputDataFloat(0, 85, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientation.y);
			OutputDataFloat(0, 86, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientation.z);
			OutputDataFloat(0, 87, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientation.w);
			OutputDataFloat(0, 88, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationColor.r);
			OutputDataFloat(0, 89, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationColor.g);
			OutputDataFloat(0, 90, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationColor.b);
			OutputDataFloat(0, 91, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationColor.a);
			OutputDataFloat(0, 92, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationScale.x);
			OutputDataFloat(0, 93, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationScale.y);
			OutputDataFloat(0, 94, WriteIndex, Context.MapUpdate.Particles.AS_DTargetOrientationScale.z);
			OutputDataFloat(0, 95, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.x);
			OutputDataFloat(0, 96, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.y);
			OutputDataFloat(0, 97, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.z);
			OutputDataFloat(0, 98, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion002.MovingAverage.w);
			OutputDataFloat(0, 99, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.x);
			OutputDataFloat(0, 100, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.y);
			OutputDataFloat(0, 101, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.z);
			OutputDataFloat(0, 102, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion003.MovingAverage.w);
			OutputDataFloat(0, 103, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.x);
			OutputDataFloat(0, 104, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.y);
			OutputDataFloat(0, 105, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.z);
			OutputDataFloat(0, 106, WriteIndex, Context.MapUpdate.Particles.AS_MovementUpdate.InterpolateOverTime_Quaternion004.MovingAverage.w);
			OutputDataBool(0, 0, WriteIndex, Context.MapUpdate.Particles.AS_ObstacleNear);
			OutputDataFloat(0, 107, WriteIndex, Context.MapUpdate.Particles.AS_SpeedUpdate.InterpolateOverTime_Float.MovingAverage);
			OutputDataBool(0, 1, WriteIndex, Context.MapUpdate.Particles.AS_WantBury);
			OutputDataFloat(0, 108, WriteIndex, Context.MapUpdate.Particles.Color.r);
			OutputDataFloat(0, 109, WriteIndex, Context.MapUpdate.Particles.Color.g);
			OutputDataFloat(0, 110, WriteIndex, Context.MapUpdate.Particles.Color.b);
			OutputDataFloat(0, 111, WriteIndex, Context.MapUpdate.Particles.Color.a);
			OutputDataFloat(0, 112, WriteIndex, Context.MapUpdate.Particles.CounterBury);
			OutputDataFloat(0, 113, WriteIndex, Context.MapUpdate.Particles.CounterIdle);
			OutputDataFloat(0, 114, WriteIndex, Context.MapUpdate.Particles.CounterMove);
			OutputDataFloat(0, 115, WriteIndex, Context.MapUpdate.Particles.CrabBuryAlpha);
			OutputDataFloat(0, 116, WriteIndex, Context.MapUpdate.Particles.CrabScale.x);
			OutputDataFloat(0, 117, WriteIndex, Context.MapUpdate.Particles.CrabScale.y);
			OutputDataFloat(0, 118, WriteIndex, Context.MapUpdate.Particles.CrabScale.z);
			OutputDataFloat(0, 119, WriteIndex, Context.MapUpdate.Particles.CurrentSpeed);
			OutputDataFloat(0, 120, WriteIndex, Context.MapUpdate.Particles.DistanceToCharacter);
			OutputDataFloat(0, 121, WriteIndex, Context.MapUpdate.Particles.DistanceTraveled);
			OutputDataFloat(0, 122, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.x);
			OutputDataFloat(0, 123, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.y);
			OutputDataFloat(0, 124, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.z);
			OutputDataFloat(0, 125, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter.w);
			OutputDataFloat(0, 126, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter1.x);
			OutputDataFloat(0, 127, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter1.y);
			OutputDataFloat(0, 128, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter1.z);
			OutputDataFloat(0, 129, WriteIndex, Context.MapUpdate.Particles.DynamicMaterialParameter1.w);
			OutputDataInt(0, 2, WriteIndex, Context.MapUpdate.Particles.ID.Index);
			OutputDataInt(0, 3, WriteIndex, Context.MapUpdate.Particles.ID.AcquireTag);
			OutputDataFloat(0, 130, WriteIndex, Context.MapUpdate.Particles.Lifetime);
			OutputDataFloat(0, 131, WriteIndex, Context.MapUpdate.Particles.Mass);
			OutputDataFloat(0, 132, WriteIndex, Context.MapUpdate.Particles.MaterialRandom);
			OutputDataFloat(0, 133, WriteIndex, Context.MapUpdate.Particles.MeshOrientation.x);
			OutputDataFloat(0, 134, WriteIndex, Context.MapUpdate.Particles.MeshOrientation.y);
			OutputDataFloat(0, 135, WriteIndex, Context.MapUpdate.Particles.MeshOrientation.z);
			OutputDataFloat(0, 136, WriteIndex, Context.MapUpdate.Particles.MeshOrientation.w);
			OutputDataFloat(0, 137, WriteIndex, Context.MapUpdate.Particles.MiddlePositionOfNeighbors.x);
			OutputDataFloat(0, 138, WriteIndex, Context.MapUpdate.Particles.MiddlePositionOfNeighbors.y);
			OutputDataFloat(0, 139, WriteIndex, Context.MapUpdate.Particles.MiddlePositionOfNeighbors.z);
			OutputDataFloat(0, 140, WriteIndex, Context.MapUpdate.Particles.MiddleRotationOfNeighbors.x);
			OutputDataFloat(0, 141, WriteIndex, Context.MapUpdate.Particles.MiddleRotationOfNeighbors.y);
			OutputDataFloat(0, 142, WriteIndex, Context.MapUpdate.Particles.MiddleRotationOfNeighbors.z);
			OutputDataFloat(0, 143, WriteIndex, Context.MapUpdate.Particles.MiddleRotationOfNeighbors.w);
			OutputDataFloat(0, 144, WriteIndex, Context.MapUpdate.Particles.NeighborRadius);
			OutputDataInt(0, 4, WriteIndex, Context.MapUpdate.Particles.NewState);
			OutputDataFloat(0, 145, WriteIndex, Context.MapUpdate.Particles.NormalizedAge);
			OutputDataInt(0, 5, WriteIndex, Context.MapUpdate.Particles.NumSeparationParticlesAtRadius);
			OutputDataFloat(0, 146, WriteIndex, Context.MapUpdate.Particles.Position.x);
			OutputDataFloat(0, 147, WriteIndex, Context.MapUpdate.Particles.Position.y);
			OutputDataFloat(0, 148, WriteIndex, Context.MapUpdate.Particles.Position.z);
			OutputDataFloat(0, 149, WriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.x);
			OutputDataFloat(0, 150, WriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.y);
			OutputDataFloat(0, 151, WriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.z);
			OutputDataFloat(0, 152, WriteIndex, Context.MapUpdate.Particles.Presolve.Position.x);
			OutputDataFloat(0, 153, WriteIndex, Context.MapUpdate.Particles.Presolve.Position.y);
			OutputDataFloat(0, 154, WriteIndex, Context.MapUpdate.Particles.Presolve.Position.z);
			OutputDataFloat(0, 155, WriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.x);
			OutputDataFloat(0, 156, WriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.y);
			OutputDataFloat(0, 157, WriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.z);
			OutputDataFloat(0, 158, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DArrowScale.x);
			OutputDataFloat(0, 159, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DArrowScale.y);
			OutputDataFloat(0, 160, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DArrowScale.z);
			OutputDataFloat(0, 161, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientation.x);
			OutputDataFloat(0, 162, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientation.y);
			OutputDataFloat(0, 163, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientation.z);
			OutputDataFloat(0, 164, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientation.w);
			OutputDataFloat(0, 165, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientationScale.x);
			OutputDataFloat(0, 166, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientationScale.y);
			OutputDataFloat(0, 167, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DCohesionOrientationScale.z);
			OutputDataFloat(0, 168, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientation.x);
			OutputDataFloat(0, 169, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientation.y);
			OutputDataFloat(0, 170, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientation.z);
			OutputDataFloat(0, 171, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientation.w);
			OutputDataFloat(0, 172, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientationScale.x);
			OutputDataFloat(0, 173, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientationScale.y);
			OutputDataFloat(0, 174, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DEscapeOrientationScale.z);
			OutputDataFloat(0, 175, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DMeshRadiusScale.x);
			OutputDataFloat(0, 176, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DMeshRadiusScale.y);
			OutputDataFloat(0, 177, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DMeshRadiusScale.z);
			OutputDataFloat(0, 178, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientation.x);
			OutputDataFloat(0, 179, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientation.y);
			OutputDataFloat(0, 180, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientation.z);
			OutputDataFloat(0, 181, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientation.w);
			OutputDataFloat(0, 182, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientationScale.x);
			OutputDataFloat(0, 183, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientationScale.y);
			OutputDataFloat(0, 184, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DObstacleOrientationScale.z);
			OutputDataFloat(0, 185, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DPointPosition.x);
			OutputDataFloat(0, 186, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DPointPosition.y);
			OutputDataFloat(0, 187, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DPointPosition.z);
			OutputDataFloat(0, 188, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DPointPositionScale.x);
			OutputDataFloat(0, 189, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DPointPositionScale.y);
			OutputDataFloat(0, 190, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DPointPositionScale.z);
			OutputDataFloat(0, 191, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientation.x);
			OutputDataFloat(0, 192, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientation.y);
			OutputDataFloat(0, 193, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientation.z);
			OutputDataFloat(0, 194, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientation.w);
			OutputDataFloat(0, 195, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientationScale.x);
			OutputDataFloat(0, 196, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientationScale.y);
			OutputDataFloat(0, 197, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DRandomOrientationScale.z);
			OutputDataFloat(0, 198, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientation.x);
			OutputDataFloat(0, 199, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientation.y);
			OutputDataFloat(0, 200, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientation.z);
			OutputDataFloat(0, 201, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientation.w);
			OutputDataFloat(0, 202, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientationScale.x);
			OutputDataFloat(0, 203, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientationScale.y);
			OutputDataFloat(0, 204, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSeparationOrientationScale.z);
			OutputDataFloat(0, 205, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSphereCenterScale.x);
			OutputDataFloat(0, 206, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSphereCenterScale.y);
			OutputDataFloat(0, 207, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DSphereCenterScale.z);
			OutputDataFloat(0, 208, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientation.x);
			OutputDataFloat(0, 209, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientation.y);
			OutputDataFloat(0, 210, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientation.z);
			OutputDataFloat(0, 211, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientation.w);
			OutputDataFloat(0, 212, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientationScale.x);
			OutputDataFloat(0, 213, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientationScale.y);
			OutputDataFloat(0, 214, WriteIndex, Context.MapUpdate.Particles.Previous.AS_DTargetOrientationScale.z);
			OutputDataFloat(0, 215, WriteIndex, Context.MapUpdate.Particles.Previous.CrabScale.x);
			OutputDataFloat(0, 216, WriteIndex, Context.MapUpdate.Particles.Previous.CrabScale.y);
			OutputDataFloat(0, 217, WriteIndex, Context.MapUpdate.Particles.Previous.CrabScale.z);
			OutputDataFloat(0, 218, WriteIndex, Context.MapUpdate.Particles.Previous.MeshOrientation.x);
			OutputDataFloat(0, 219, WriteIndex, Context.MapUpdate.Particles.Previous.MeshOrientation.y);
			OutputDataFloat(0, 220, WriteIndex, Context.MapUpdate.Particles.Previous.MeshOrientation.z);
			OutputDataFloat(0, 221, WriteIndex, Context.MapUpdate.Particles.Previous.MeshOrientation.w);
			OutputDataFloat(0, 222, WriteIndex, Context.MapUpdate.Particles.Previous.Position.x);
			OutputDataFloat(0, 223, WriteIndex, Context.MapUpdate.Particles.Previous.Position.y);
			OutputDataFloat(0, 224, WriteIndex, Context.MapUpdate.Particles.Previous.Position.z);
			OutputDataFloat(0, 225, WriteIndex, Context.MapUpdate.Particles.Previous.SpriteSize.x);
			OutputDataFloat(0, 226, WriteIndex, Context.MapUpdate.Particles.Previous.SpriteSize.y);
			OutputDataFloat(0, 227, WriteIndex, Context.MapUpdate.Particles.Previous.Velocity.x);
			OutputDataFloat(0, 228, WriteIndex, Context.MapUpdate.Particles.Previous.Velocity.y);
			OutputDataFloat(0, 229, WriteIndex, Context.MapUpdate.Particles.Previous.Velocity.z);
			OutputDataFloat(0, 230, WriteIndex, Context.MapUpdate.Particles.RibbonUVDistance);
			OutputDataFloat(0, 231, WriteIndex, Context.MapUpdate.Particles.Scale.x);
			OutputDataFloat(0, 232, WriteIndex, Context.MapUpdate.Particles.Scale.y);
			OutputDataFloat(0, 233, WriteIndex, Context.MapUpdate.Particles.Scale.z);
			OutputDataBool(0, 6, WriteIndex, Context.MapUpdate.Particles.SeparationActive);
			OutputDataFloat(0, 234, WriteIndex, Context.MapUpdate.Particles.SeparationRadius);
			OutputDataFloat(0, 235, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeBitangent.x);
			OutputDataFloat(0, 236, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeBitangent.y);
			OutputDataFloat(0, 237, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeBitangent.z);
			OutputDataFloat(0, 238, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeNormal.x);
			OutputDataFloat(0, 239, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeNormal.y);
			OutputDataFloat(0, 240, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeNormal.z);
			OutputDataFloat(0, 241, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapePosition.x);
			OutputDataFloat(0, 242, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapePosition.y);
			OutputDataFloat(0, 243, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapePosition.z);
			OutputDataFloat(0, 244, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeTangent.x);
			OutputDataFloat(0, 245, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeTangent.y);
			OutputDataFloat(0, 246, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeTangent.z);
			OutputDataFloat(0, 247, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeVector.x);
			OutputDataFloat(0, 248, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeVector.y);
			OutputDataFloat(0, 249, WriteIndex, Context.MapUpdate.Particles.ShapeLocation.ShapeVector.z);
			OutputDataFloat(0, 250, WriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
			OutputDataFloat(0, 251, WriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
			OutputDataInt(0, 7, WriteIndex, Context.MapUpdate.Particles.State);
			OutputDataFloat(0, 252, WriteIndex, Context.MapUpdate.Particles.StateDuration);
			OutputDataFloat(0, 253, WriteIndex, Context.MapUpdate.Particles.StateTimeTamp);
			OutputDataFloat(0, 254, WriteIndex, Context.MapUpdate.Particles.SurfaceNormal.x);
			OutputDataFloat(0, 255, WriteIndex, Context.MapUpdate.Particles.SurfaceNormal.y);
			OutputDataFloat(0, 256, WriteIndex, Context.MapUpdate.Particles.SurfaceNormal.z);
			OutputDataFloat(0, 257, WriteIndex, Context.MapUpdate.Particles.TargetSpeed);
			OutputDataFloat(0, 258, WriteIndex, Context.MapUpdate.Particles.TESTFloat);
			OutputDataInt(0, 8, WriteIndex, Context.MapUpdate.Particles.UniqueID);
			OutputDataFloat(0, 259, WriteIndex, Context.MapUpdate.Particles.Velocity.x);
			OutputDataFloat(0, 260, WriteIndex, Context.MapUpdate.Particles.Velocity.y);
			OutputDataFloat(0, 261, WriteIndex, Context.MapUpdate.Particles.Velocity.z);
			OutputDataFloat(0, 262, WriteIndex, Context.MapUpdate.Particles.WorldSpaceCollisionCenter.x);
			OutputDataFloat(0, 263, WriteIndex, Context.MapUpdate.Particles.WorldSpaceCollisionCenter.y);
			OutputDataFloat(0, 264, WriteIndex, Context.MapUpdate.Particles.WorldSpaceCollisionCenter.z);
		}


}

void CopyInstance(in int InstanceIdx)
{

}
#line 5424 "/Engine/Generated/NiagaraEmitterInstance.ush"
[numthreads( 64 ,  1 ,  1 )]
void SimulateMainComputeCS(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	GLinearThreadId = DispatchThreadId.x + (DispatchThreadId.y * DispatchThreadIdToLinear.y);
#line 5433 "/Engine/Generated/NiagaraEmitterInstance.ush"
	GDispatchThreadId = DispatchThreadId;
	GGroupThreadId = GroupThreadId;
	GEmitterTickCounter = EmitterTickCounter;
	GRandomSeedOffset = 0;


	bool bRunSpawnUpdateLogic = true;
	if (ReadInstanceCountOffset == 0xFFFFFFFF)
	{
		GSpawnStartInstance = 0;
	}
	else
	{
		GSpawnStartInstance = RWInstanceCounts[ReadInstanceCountOffset];
	}
	const uint MaxInstances = GSpawnStartInstance + NumSpawnedInstances;
	const bool bRunUpdateLogic = bRunSpawnUpdateLogic && GLinearThreadId < GSpawnStartInstance && GLinearThreadId < MaxInstances;
	const bool bRunSpawnLogic = bRunSpawnUpdateLogic && GLinearThreadId >= GSpawnStartInstance && GLinearThreadId < MaxInstances;

	const float RandomSeedInitialisation = NiagaraInternalNoise(GLinearThreadId * 16384, 0 * 8196, (bRunUpdateLogic ? 4096 : 0) + EmitterTickCounter);

	FSimulationContext Context = (FSimulationContext)0;
	[branch]
	if (bRunUpdateLogic)
	{
		SetupExecIndexForGPU();
		InitConstants(Context);
		LoadUpdateVariables(Context, GLinearThreadId);
		ReadDataSets(Context);
	}
	else if (bRunSpawnLogic)
	{
		SetupExecIndexAndSpawnInfoForGPU();
		InitConstants(Context);
		InitSpawnVariables(Context);
		ReadDataSets(Context);
		Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
		ConditionalInterpolateParameters(Context);
		SimulateMapSpawn(Context);
		TransferAttributes(Context);
	}

	if (bRunUpdateLogic || bRunSpawnLogic)
	{
		SimulateMapUpdate(Context);
		WriteDataSets(Context);
	}

	StoreUpdateVariables(Context, bRunUpdateLogic || bRunSpawnLogic);


}
#line 833 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 331027882
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 297796353
MobileSceneTextures, 11010716
SceneTexturesStruct, 158928480
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_HairScatteringLUTTexture, View, 5, 58
View_HairScatteringLUTSampler, View, 8, 59
View_LTCMatTexture, View, 5, 60
View_LTCMatSampler, View, 8, 61
View_LTCAmpTexture, View, 5, 62
View_LTCAmpSampler, View, 8, 63
View_ShadingEnergyGGXSpecTexture, View, 5, 64
View_ShadingEnergyGGXGlassTexture, View, 5, 65
View_ShadingEnergyClothSpecTexture, View, 5, 66
View_ShadingEnergyDiffuseTexture, View, 5, 67
View_ShadingEnergySampler, View, 8, 68
View_SSProfilesTexture, View, 5, 69
View_SSProfilesSampler, View, 8, 70
View_SSProfilesTransmissionSampler, View, 8, 71
View_SSProfilesPreIntegratedTexture, View, 5, 72
View_SSProfilesPreIntegratedSampler, View, 8, 73
View_WaterIndirection, View, 6, 74
View_WaterData, View, 6, 75
View_RectLightAtlasTexture, View, 5, 76
View_RectLightAtlasSampler, View, 8, 77
View_LandscapeWeightmapSampler, View, 8, 78
View_LandscapeIndirection, View, 6, 79
View_LandscapePerComponentData, View, 6, 80
View_VTFeedbackBuffer, View, 7, 81
View_EditorVisualizeLevelInstanceIds, View, 6, 82
View_EditorSelectedHitProxyIds, View, 6, 83
View_PhysicsFieldClipmapBuffer, View, 6, 84
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 6
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 7
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 8
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 9
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 14
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 18
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM6 -entry=SimulateMainComputeCS -shaderPlatformName=PCD3D_SM6 -cs L:/UE4/projects Unreal/SwarmTest/Saved/ShaderDebugInfo/PCD3D_SM6/NewNiagaraSystem/NewNiagaraEmitter2/ParticleGPUComputeScript/FNiagaraShader/0/NiagaraEmitterInstanceShader.usf -cflags=1052672 -nocrashreports
#endif /*DIRECT COMPILE*/
//
